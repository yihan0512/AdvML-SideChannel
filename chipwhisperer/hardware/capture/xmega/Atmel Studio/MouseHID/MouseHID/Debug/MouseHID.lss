
MouseHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00802000  000032c0  00003354  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009bc  008020b8  008020b8  0000340c  2**2
                  ALLOC
  3 .stab         00000768  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e1  00000000  00000000  00003b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003c55  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000770  00000000  00000000  00003c88  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e37d  00000000  00000000  000043f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002c39  00000000  00000000  00012775  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000a656  00000000  00000000  000153ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001d64  00000000  00000000  0001fa04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000304d6  00000000  00000000  00021768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000064b9  00000000  00000000  00051c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000688  00000000  00000000  000580f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c2a5  00000000  00000000  00058780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	17 c2       	rjmp	.+1070   	; 0x438 <__vector_2>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	4b c4       	rjmp	.+2198   	; 0x8b0 <__vector_6>
      1a:	00 00       	nop
      1c:	71 c4       	rjmp	.+2274   	; 0x900 <__vector_7>
      1e:	00 00       	nop
      20:	97 c4       	rjmp	.+2350   	; 0x950 <__vector_8>
      22:	00 00       	nop
      24:	bd c4       	rjmp	.+2426   	; 0x9a0 <__vector_9>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	14 c5       	rjmp	.+2600   	; 0xa62 <__vector_14>
      3a:	00 00       	nop
      3c:	3f c5       	rjmp	.+2686   	; 0xabc <__vector_15>
      3e:	00 00       	nop
      40:	6a c5       	rjmp	.+2772   	; 0xb16 <__vector_16>
      42:	00 00       	nop
      44:	95 c5       	rjmp	.+2858   	; 0xb70 <__vector_17>
      46:	00 00       	nop
      48:	c0 c5       	rjmp	.+2944   	; 0xbca <__vector_18>
      4a:	00 00       	nop
      4c:	eb c5       	rjmp	.+3030   	; 0xc24 <__vector_19>
      4e:	00 00       	nop
      50:	16 c6       	rjmp	.+3116   	; 0xc7e <__vector_20>
      52:	00 00       	nop
      54:	41 c6       	rjmp	.+3202   	; 0xcd8 <__vector_21>
      56:	00 00       	nop
      58:	6c c6       	rjmp	.+3288   	; 0xd32 <__vector_22>
      5a:	00 00       	nop
      5c:	97 c6       	rjmp	.+3374   	; 0xd8c <__vector_23>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d0 c0       	rjmp	.+416    	; 0x23e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ce c0       	rjmp	.+412    	; 0x23e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cc c0       	rjmp	.+408    	; 0x23e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ca c0       	rjmp	.+404    	; 0x23e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_43>
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_47>
      c0:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_48>
      c4:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_49>
      c8:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_50>
      cc:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_51>
      d0:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_52>
      d4:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_53>
      d8:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_54>
      dc:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__vector_55>
      e0:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__vector_56>
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	90 c0       	rjmp	.+288    	; 0x23e <__bad_interrupt>
     11e:	00 00       	nop
     120:	8e c0       	rjmp	.+284    	; 0x23e <__bad_interrupt>
     122:	00 00       	nop
     124:	8c c0       	rjmp	.+280    	; 0x23e <__bad_interrupt>
     126:	00 00       	nop
     128:	8a c0       	rjmp	.+276    	; 0x23e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	58 c6       	rjmp	.+3248   	; 0xde6 <__vector_77>
     136:	00 00       	nop
     138:	83 c6       	rjmp	.+3334   	; 0xe40 <__vector_78>
     13a:	00 00       	nop
     13c:	ae c6       	rjmp	.+3420   	; 0xe9a <__vector_79>
     13e:	00 00       	nop
     140:	d9 c6       	rjmp	.+3506   	; 0xef4 <__vector_80>
     142:	00 00       	nop
     144:	04 c7       	rjmp	.+3592   	; 0xf4e <__vector_81>
     146:	00 00       	nop
     148:	2f c7       	rjmp	.+3678   	; 0xfa8 <__vector_82>
     14a:	00 00       	nop
     14c:	5a c7       	rjmp	.+3764   	; 0x1002 <__vector_83>
     14e:	00 00       	nop
     150:	85 c7       	rjmp	.+3850   	; 0x105c <__vector_84>
     152:	00 00       	nop
     154:	b0 c7       	rjmp	.+3936   	; 0x10b6 <__vector_85>
     156:	00 00       	nop
     158:	db c7       	rjmp	.+4022   	; 0x1110 <__vector_86>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_108>
     1b4:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__vector_109>
     1b8:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_110>
     1bc:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__vector_111>
     1c0:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_112>
     1c4:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__vector_113>
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__vector_125>
     1f8:	0c 94 05 18 	jmp	0x300a	; 0x300a <__vector_126>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e5       	ldi	r29, 0x5F	; 95
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e0 ec       	ldi	r30, 0xC0	; 192
     214:	f2 e3       	ldi	r31, 0x32	; 50
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a8 3b       	cpi	r26, 0xB8	; 184
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	2a e2       	ldi	r18, 0x2A	; 42
     228:	a8 eb       	ldi	r26, 0xB8	; 184
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a4 37       	cpi	r26, 0x74	; 116
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 c3 0c 	call	0x1986	; 0x1986 <main>
     23a:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <dma_init>:
	adc_stop();
	adc_data_dlbusy = true;
}

void dma_init(void)
{
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	2b 97       	sbiw	r28, 0x0b	; 11
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	de bf       	out	0x3e, r29	; 62
	struct dma_channel_config dmach_conf;
	memset(&dmach_conf, 0, sizeof(dmach_conf));
     252:	8e 01       	movw	r16, r28
     254:	0f 5f       	subi	r16, 0xFF	; 255
     256:	1f 4f       	sbci	r17, 0xFF	; 255
     258:	8b e0       	ldi	r24, 0x0B	; 11
     25a:	f8 01       	movw	r30, r16
     25c:	11 92       	st	Z+, r1
     25e:	8a 95       	dec	r24
     260:	e9 f7       	brne	.-6      	; 0x25c <dma_init+0x1c>
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	94 e0       	ldi	r25, 0x04	; 4
     266:	8d 83       	std	Y+5, r24	; 0x05
     268:	9e 83       	std	Y+6, r25	; 0x06
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
     26a:	8d e9       	ldi	r24, 0x9D	; 157
     26c:	8b 83       	std	Y+3, r24	; 0x03
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
     26e:	80 e1       	ldi	r24, 0x10	; 16
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	88 87       	std	Y+8, r24	; 0x08
     274:	99 87       	std	Y+9, r25	; 0x09
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
     276:	83 e5       	ldi	r24, 0x53	; 83
     278:	92 e2       	ldi	r25, 0x22	; 34
     27a:	8a 87       	std	Y+10, r24	; 0x0a
     27c:	9b 87       	std	Y+11, r25	; 0x0b
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
     27e:	80 e1       	ldi	r24, 0x10	; 16
     280:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
     282:	85 e0       	ldi	r24, 0x05	; 5
     284:	89 83       	std	Y+1, r24	; 0x01
	(uint16_t)(uintptr_t)adc_data);

	dma_channel_set_trigger_source(&dmach_conf, DMA_CH_TRIGSRC_ADCA_CH0_gc);
	dma_channel_set_single_shot(&dmach_conf);

	dma_enable();
     286:	f8 d2       	rcall	.+1520   	; 0x878 <dma_enable>

	dma_set_callback(DMA_CHANNEL, dma_transfer_done);
     288:	61 eb       	ldi	r22, 0xB1	; 177
     28a:	71 e0       	ldi	r23, 0x01	; 1
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	07 d3       	rcall	.+1550   	; 0x89e <dma_set_callback>
 * \param level Interrupt level given by a \ref dma_int_level_t type
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
     290:	8a 81       	ldd	r24, Y+2	; 0x02
     292:	80 7f       	andi	r24, 0xF0	; 240
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
     294:	85 60       	ori	r24, 0x05	; 5
     296:	8a 83       	std	Y+2, r24	; 0x02
	dma_channel_set_interrupt_level(&dmach_conf, DMA_INT_LVL_LO);

	dma_channel_write_config(DMA_CHANNEL, &dmach_conf);
     298:	b8 01       	movw	r22, r16
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	a9 d3       	rcall	.+1874   	; 0x9f0 <dma_channel_write_config>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     29e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     2a0:	f8 94       	cli
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
     2a2:	e0 e1       	ldi	r30, 0x10	; 16
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	90 81       	ld	r25, Z
     2a8:	90 68       	ori	r25, 0x80	; 128
     2aa:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2ac:	8f bf       	out	0x3f, r24	; 63
	dma_channel_enable(DMA_CHANNEL);
}
     2ae:	2b 96       	adiw	r28, 0x0b	; 11
     2b0:	cd bf       	out	0x3d, r28	; 61
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <adc_init>:
#define GAIN		8

//#define NEG_CHANNEL ADCCH_NEG_NONE

void adc_init(void)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	2b 97       	sbiw	r28, 0x0b	; 11
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	de bf       	out	0x3e, r29	; 62
	struct adc_config adc_conf;
	adc_read_configuration(&ADCA, &adc_conf);	
     2cc:	be 01       	movw	r22, r28
     2ce:	6f 5f       	subi	r22, 0xFF	; 255
     2d0:	7f 4f       	sbci	r23, 0xFF	; 255
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	12 d2       	rcall	.+1060   	; 0x6fc <adc_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     2d8:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     2da:	9b 81       	ldd	r25, Y+3	; 0x03
     2dc:	9f 78       	andi	r25, 0x8F	; 143
     2de:	9b 83       	std	Y+3, r25	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	9d 83       	std	Y+5, r25	; 0x05
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     2e4:	81 7e       	andi	r24, 0xE1	; 225
     2e6:	80 61       	ori	r24, 0x10	; 16
     2e8:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
     2ea:	1c 82       	std	Y+4, r1	; 0x04
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_ON, ADC_RES_12, ADC_REF_BANDGAP);
	adc_set_clock_rate(&adc_conf, 2000000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);	
	adc_write_configuration(&ADCA, &adc_conf);
     2ec:	be 01       	movw	r22, r28
     2ee:	6f 5f       	subi	r22, 0xFF	; 255
     2f0:	7f 4f       	sbci	r23, 0xFF	; 255
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	92 e0       	ldi	r25, 0x02	; 2
     2f6:	ad d1       	rcall	.+858    	; 0x652 <adc_write_configuration>
	
	struct adc_channel_config adcch_conf;
	memset(&adcch_conf, 0, sizeof(struct adc_channel_config));
     2f8:	18 86       	std	Y+8, r1	; 0x08
     2fa:	19 86       	std	Y+9, r1	; 0x09
     2fc:	1a 86       	std	Y+10, r1	; 0x0a
     2fe:	1b 86       	std	Y+11, r1	; 0x0b
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
     300:	8f e0       	ldi	r24, 0x0F	; 15
     302:	88 87       	std	Y+8, r24	; 0x08
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     304:	81 e2       	ldi	r24, 0x21	; 33
     306:	89 87       	std	Y+9, r24	; 0x09
	adcch_disable_interrupt(&adcch_conf);
	
	uint8_t chmask = 1<<0;
	
	adcch_set_input(&adcch_conf, POS_CHANNEL, NEG_CHANNEL, GAIN);	
	adcch_write_configuration(&ADCA, chmask, &adcch_conf);
     308:	ae 01       	movw	r20, r28
     30a:	48 5f       	subi	r20, 0xF8	; 248
     30c:	5f 4f       	sbci	r21, 0xFF	; 255
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	16 d2       	rcall	.+1068   	; 0x742 <adcch_write_configuration>
	
	adc_enable(&ADCA);
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	84 d1       	rcall	.+776    	; 0x624 <adc_enable>
}
     31c:	2b 96       	adiw	r28, 0x0b	; 11
     31e:	cd bf       	out	0x3d, r28	; 61
     320:	de bf       	out	0x3e, r29	; 62
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <adc_stop>:

void adc_stop(void)
{
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	27 97       	sbiw	r28, 0x07	; 7
     332:	cd bf       	out	0x3d, r28	; 61
     334:	de bf       	out	0x3e, r29	; 62
	struct adc_config adc_conf;
	adc_read_configuration(&ADCA, &adc_conf);
     336:	be 01       	movw	r22, r28
     338:	6f 5f       	subi	r22, 0xFF	; 255
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	dd d1       	rcall	.+954    	; 0x6fc <adc_read_configuration>
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     342:	8a 81       	ldd	r24, Y+2	; 0x02
     344:	87 7f       	andi	r24, 0xF7	; 247
     346:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
     348:	1c 82       	std	Y+4, r1	; 0x04
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_write_configuration(&ADCA, &adc_conf);	
     34a:	be 01       	movw	r22, r28
     34c:	6f 5f       	subi	r22, 0xFF	; 255
     34e:	7f 4f       	sbci	r23, 0xFF	; 255
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	7e d1       	rcall	.+764    	; 0x652 <adc_write_configuration>
}
     356:	27 96       	adiw	r28, 0x07	; 7
     358:	cd bf       	out	0x3d, r28	; 61
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <dma_transfer_done>:
int16_t adc_data[ADC_DATA_LENGTH];
#define DMA_CHANNEL     0

static void dma_transfer_done(enum dma_channel_status status)
{
	adc_stop();
     362:	e2 df       	rcall	.-60     	; 0x328 <adc_stop>
	adc_data_dlbusy = true;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 5d 2a 	sts	0x2A5D, r24
     36a:	08 95       	ret

0000036c <adc_go>:
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_write_configuration(&ADCA, &adc_conf);	
}

void adc_go(void)
{
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	27 97       	sbiw	r28, 0x07	; 7
     376:	cd bf       	out	0x3d, r28	; 61
     378:	de bf       	out	0x3e, r29	; 62
	uint8_t chmask = 1<<0;
	struct adc_config adc_conf;
	adc_read_configuration(&ADCA, &adc_conf);
     37a:	be 01       	movw	r22, r28
     37c:	6f 5f       	subi	r22, 0xFF	; 255
     37e:	7f 4f       	sbci	r23, 0xFF	; 255
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	bb d1       	rcall	.+886    	; 0x6fc <adc_read_configuration>
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
				(nr_of_ch << ADC_EVACT_gp);
		break;

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	88 60       	ori	r24, 0x08	; 8
     38a:	8a 83       	std	Y+2, r24	; 0x02
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_FREERUN, 1, 0);
	adc_write_configuration(&ADCA, &adc_conf);
     38c:	be 01       	movw	r22, r28
     38e:	6f 5f       	subi	r22, 0xFF	; 255
     390:	7f 4f       	sbci	r23, 0xFF	; 255
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	5d d1       	rcall	.+698    	; 0x652 <adc_write_configuration>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     398:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     39a:	f8 94       	cli
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     39c:	e0 e0       	ldi	r30, 0x00	; 0
     39e:	f2 e0       	ldi	r31, 0x02	; 2
     3a0:	90 81       	ld	r25, Z
     3a2:	94 60       	ori	r25, 0x04	; 4
     3a4:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3a6:	8f bf       	out	0x3f, r24	; 63
	adc_start_conversion(&ADCA, chmask);	
}	
     3a8:	27 96       	adiw	r28, 0x07	; 7
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <timer_setup>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     3b4:	43 e0       	ldi	r20, 0x03	; 3
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	80 e4       	ldi	r24, 0x40	; 64
     3bc:	96 e0       	ldi	r25, 0x06	; 6
     3be:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <ioport_configure_port_pin>


void timer_setup(void)
{
	 ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 0), IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	 tc_enable(&TCC0);
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	98 e0       	ldi	r25, 0x08	; 8
     3c6:	0e 94 85 0b 	call	0x170a	; 0x170a <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
     3ca:	e0 e0       	ldi	r30, 0x00	; 0
     3cc:	f8 e0       	ldi	r31, 0x08	; 8
     3ce:	81 81       	ldd	r24, Z+1	; 0x01
     3d0:	88 7f       	andi	r24, 0xF8	; 248
     3d2:	81 60       	ori	r24, 0x01	; 1
     3d4:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
     3d6:	85 e0       	ldi	r24, 0x05	; 5
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	86 a3       	std	Z+38, r24	; 0x26
     3dc:	97 a3       	std	Z+39, r25	; 0x27
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	if (tc_is_tc0(void *tc)) {
		switch (channel_index) {
		case TC_CCA:
			((TC0_t *)tc)->CCA = value;
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	80 a7       	std	Z+40, r24	; 0x28
     3e4:	91 a7       	std	Z+41, r25	; 0x29
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
     3e6:	81 81       	ldd	r24, Z+1	; 0x01
     3e8:	80 61       	ori	r24, 0x10	; 16
     3ea:	81 83       	std	Z+1, r24	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     3ec:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     3ee:	80 7f       	andi	r24, 0xF0	; 240
     3f0:	81 60       	ori	r24, 0x01	; 1
     3f2:	80 83       	st	Z, r24
     3f4:	08 95       	ret

000003f6 <interrupt_setup>:
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	62 e0       	ldi	r22, 0x02	; 2
     3fc:	80 e4       	ldi	r24, 0x40	; 64
     3fe:	96 e0       	ldi	r25, 0x06	; 6
     400:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <ioport_configure_port_pin>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	80 93 b0 00 	sts	0x00B0, r24
	base->PIN0CTRL = mode;
     40a:	e0 e4       	ldi	r30, 0x40	; 64
     40c:	f6 e0       	ldi	r31, 0x06	; 6
     40e:	90 e1       	ldi	r25, 0x10	; 16
     410:	90 8b       	std	Z+16, r25	; 0x10

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     412:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     414:	f8 94       	cli
	volatile uint8_t *pin_ctrl =
			(&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();
	
	*pin_ctrl &= ~PORT_ISC_gm;
     416:	21 89       	ldd	r18, Z+17	; 0x11
     418:	28 7f       	andi	r18, 0xF8	; 248
     41a:	21 8b       	std	Z+17, r18	; 0x11
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     41c:	21 89       	ldd	r18, Z+17	; 0x11
     41e:	21 60       	ori	r18, 0x01	; 1
     420:	21 8b       	std	Z+17, r18	; 0x11
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     422:	9f bf       	out	0x3f, r25	; 63
void interrupt_setup(void)
{
	ioport_configure_pin(PREF, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(PREF, IOPORT_MODE_PULLDOWN);
	ioport_set_pin_sense_mode(PREF, IOPORT_SENSE_RISING);	
	TRIGPORT.INTCTRL = (TRIGPORT.INTCTRL & ~PORT_INT0LVL_gm) | PORT_INT0LVL_HI_gc;
     424:	91 85       	ldd	r25, Z+9	; 0x09
     426:	93 60       	ori	r25, 0x03	; 3
     428:	91 87       	std	Z+9, r25	; 0x09
	TRIGPORT.INT0MASK = 1<<1;
     42a:	82 87       	std	Z+10, r24	; 0x0a
	
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     42c:	e0 ea       	ldi	r30, 0xA0	; 160
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	82 81       	ldd	r24, Z+2	; 0x02
     432:	84 60       	ori	r24, 0x04	; 4
     434:	82 83       	std	Z+2, r24	; 0x02
     436:	08 95       	ret

00000438 <__vector_2>:
}

ISR(PORTC_INT0_vect)
{
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	0b b6       	in	r0, 0x3b	; 59
     444:	0f 92       	push	r0
     446:	8f 93       	push	r24
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	e0 ee       	ldi	r30, 0xE0	; 224
     450:	f7 e0       	ldi	r31, 0x07	; 7
     452:	87 83       	std	Z+7, r24	; 0x07
	LED_Toggle(LED0);	
     454:	ff 91       	pop	r31
     456:	ef 91       	pop	r30
     458:	8f 91       	pop	r24
     45a:	0f 90       	pop	r0
     45c:	0b be       	out	0x3b, r0	; 59
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	08 95       	ret

0000046c <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     46c:	30 91 66 2a 	lds	r19, 0x2A66
     470:	20 91 67 2a 	lds	r18, 0x2A67
     474:	82 2f       	mov	r24, r18
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	03 97       	sbiw	r24, 0x03	; 3
     47a:	e1 f4       	brne	.+56     	; 0x4b4 <udi_hid_generic_setreport+0x48>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     47c:	31 11       	cpse	r19, r1
     47e:	1c c0       	rjmp	.+56     	; 0x4b8 <udi_hid_generic_setreport+0x4c>
			&& (sizeof(udi_hid_generic_report_feature) ==
     480:	80 91 6a 2a 	lds	r24, 0x2A6A
     484:	90 91 6b 2a 	lds	r25, 0x2A6B
     488:	04 97       	sbiw	r24, 0x04	; 4
     48a:	c1 f4       	brne	.+48     	; 0x4bc <udi_hid_generic_setreport+0x50>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     48c:	84 ec       	ldi	r24, 0xC4	; 196
     48e:	90 e2       	ldi	r25, 0x20	; 32
     490:	80 93 6c 2a 	sts	0x2A6C, r24
     494:	90 93 6d 2a 	sts	0x2A6D, r25
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     498:	8d e7       	ldi	r24, 0x7D	; 125
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	80 93 70 2a 	sts	0x2A70, r24
     4a0:	90 93 71 2a 	sts	0x2A71, r25
		udd_g_ctrlreq.payload_size =
     4a4:	84 e0       	ldi	r24, 0x04	; 4
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	80 93 6e 2a 	sts	0x2A6E, r24
     4ac:	90 93 6f 2a 	sts	0x2A6F, r25
				sizeof(udi_hid_generic_report_feature);
		return true;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	08 95       	ret
	}
	return false;
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	08 95       	ret
     4bc:	80 e0       	ldi	r24, 0x00	; 0
}
     4be:	08 95       	ret

000004c0 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 ba 20 	sts	0x20BA, r24
     4c6:	08 95       	ret

000004c8 <udi_hid_generic_report_out_enable>:
	udi_hid_generic_report_out_enable();
}


static bool udi_hid_generic_report_out_enable(void)
{
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     4cc:	09 e9       	ldi	r16, 0x99	; 153
     4ce:	12 e0       	ldi	r17, 0x02	; 2
     4d0:	28 e0       	ldi	r18, 0x08	; 8
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	4c eb       	ldi	r20, 0xBC	; 188
     4d6:	50 e2       	ldi	r21, 0x20	; 32
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	08 95       	ret

000004e6 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     4e6:	26 e3       	ldi	r18, 0x36	; 54
     4e8:	32 e0       	ldi	r19, 0x02	; 2
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	50 e2       	ldi	r21, 0x20	; 32
     4ee:	69 eb       	ldi	r22, 0xB9	; 185
     4f0:	70 e2       	ldi	r23, 0x20	; 32
     4f2:	88 eb       	ldi	r24, 0xB8	; 184
     4f4:	90 e2       	ldi	r25, 0x20	; 32
     4f6:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <udi_hid_setup>

000004fa <udi_hid_generic_setfeature_valid>:
//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     4fa:	80 91 6e 2a 	lds	r24, 0x2A6E
     4fe:	90 91 6f 2a 	lds	r25, 0x2A6F
     502:	04 97       	sbiw	r24, 0x04	; 4
     504:	21 f4       	brne	.+8      	; 0x50e <udi_hid_generic_setfeature_valid+0x14>
		return;	// Bad data
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     506:	84 ec       	ldi	r24, 0xC4	; 196
     508:	90 e2       	ldi	r25, 0x20	; 32
     50a:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <main_hid_set_feature>
     50e:	08 95       	ret

00000510 <udi_hid_generic_disable>:
}


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     510:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <main_generic_disable>
     514:	08 95       	ret

00000516 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     516:	10 92 b8 20 	sts	0x20B8, r1
	udi_hid_generic_protocol = 0;
     51a:	10 92 b9 20 	sts	0x20B9, r1
	udi_hid_generic_b_report_in_free = true;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 ba 20 	sts	0x20BA, r24
	if (!udi_hid_generic_report_out_enable())
     524:	d1 df       	rcall	.-94     	; 0x4c8 <udi_hid_generic_report_out_enable>
     526:	88 23       	and	r24, r24
     528:	11 f0       	breq	.+4      	; 0x52e <udi_hid_generic_enable+0x18>
		return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     52a:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <main_generic_enable>
	// Initialize internal values
	udi_hid_generic_rate = 0;
	udi_hid_generic_protocol = 0;
	udi_hid_generic_b_report_in_free = true;
	if (!udi_hid_generic_report_out_enable())
		return false;
     52e:	80 e0       	ldi	r24, 0x00	; 0
	return UDI_HID_GENERIC_ENABLE_EXT();
}
     530:	08 95       	ret

00000532 <udi_hid_generic_report_out_received>:

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
     532:	81 11       	cpse	r24, r1
     534:	08 c0       	rjmp	.+16     	; 0x546 <udi_hid_generic_report_out_received+0x14>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     536:	68 30       	cpi	r22, 0x08	; 8
     538:	71 05       	cpc	r23, r1
     53a:	21 f4       	brne	.+8      	; 0x544 <udi_hid_generic_report_out_received+0x12>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     53c:	8c eb       	ldi	r24, 0xBC	; 188
     53e:	90 e2       	ldi	r25, 0x20	; 32
     540:	0e 94 9e 0c 	call	0x193c	; 0x193c <ui_led_change>
	}
	udi_hid_generic_report_out_enable();
     544:	c1 cf       	rjmp	.-126    	; 0x4c8 <udi_hid_generic_report_out_enable>
     546:	08 95       	ret

00000548 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
	if (!udi_hid_generic_b_report_in_free)
     54e:	20 91 ba 20 	lds	r18, 0x20BA
     552:	22 23       	and	r18, r18
     554:	21 f1       	breq	.+72     	; 0x59e <udi_hid_generic_send_report_in+0x56>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     556:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
     558:	f8 94       	cli
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     55a:	20 e4       	ldi	r18, 0x40	; 64
     55c:	e8 ec       	ldi	r30, 0xC8	; 200
     55e:	f0 e2       	ldi	r31, 0x20	; 32
     560:	df 01       	movw	r26, r30
     562:	1d 92       	st	X+, r1
     564:	2a 95       	dec	r18
     566:	e9 f7       	brne	.-6      	; 0x562 <udi_hid_generic_send_report_in+0x1a>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     568:	20 e4       	ldi	r18, 0x40	; 64
     56a:	fc 01       	movw	r30, r24
     56c:	a8 ec       	ldi	r26, 0xC8	; 200
     56e:	b0 e2       	ldi	r27, 0x20	; 32
     570:	01 90       	ld	r0, Z+
     572:	0d 92       	st	X+, r0
     574:	2a 95       	dec	r18
     576:	e1 f7       	brne	.-8      	; 0x570 <udi_hid_generic_send_report_in+0x28>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     578:	00 e6       	ldi	r16, 0x60	; 96
     57a:	12 e0       	ldi	r17, 0x02	; 2
     57c:	20 e4       	ldi	r18, 0x40	; 64
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	48 ec       	ldi	r20, 0xC8	; 200
     582:	50 e2       	ldi	r21, 0x20	; 32
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	81 e8       	ldi	r24, 0x81	; 129
     588:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	89 27       	eor	r24, r25
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     590:	80 93 ba 20 	sts	0x20BA, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     594:	cf bf       	out	0x3f, r28	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     596:	80 91 ba 20 	lds	r24, 0x20BA
     59a:	89 27       	eor	r24, r25
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <udi_hid_generic_send_report_in+0x58>
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
	if (!udi_hid_generic_b_report_in_free)
		return false;
     59e:	80 e0       	ldi	r24, 0x00	; 0
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;

}
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	08 95       	ret

000005a8 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     5a8:	81 15       	cp	r24, r1
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	92 07       	cpc	r25, r18
     5ae:	61 f4       	brne	.+24     	; 0x5c8 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     5b0:	80 91 08 21 	lds	r24, 0x2108
     5b4:	98 2f       	mov	r25, r24
     5b6:	9f 5f       	subi	r25, 0xFF	; 255
     5b8:	90 93 08 21 	sts	0x2108, r25
     5bc:	81 11       	cpse	r24, r1
     5be:	13 c0       	rjmp	.+38     	; 0x5e6 <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     5c0:	62 e0       	ldi	r22, 0x02	; 2
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <sysclk_enable_module>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     5c8:	80 34       	cpi	r24, 0x40	; 64
     5ca:	92 40       	sbci	r25, 0x02	; 2
     5cc:	61 f4       	brne	.+24     	; 0x5e6 <adc_enable_clock+0x3e>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     5ce:	80 91 09 21 	lds	r24, 0x2109
     5d2:	98 2f       	mov	r25, r24
     5d4:	9f 5f       	subi	r25, 0xFF	; 255
     5d6:	90 93 09 21 	sts	0x2109, r25
     5da:	81 11       	cpse	r24, r1
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     5de:	62 e0       	ldi	r22, 0x02	; 2
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <sysclk_enable_module>
     5e6:	08 95       	ret

000005e8 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     5e8:	81 15       	cp	r24, r1
     5ea:	22 e0       	ldi	r18, 0x02	; 2
     5ec:	92 07       	cpc	r25, r18
     5ee:	59 f4       	brne	.+22     	; 0x606 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     5f0:	80 91 08 21 	lds	r24, 0x2108
     5f4:	81 50       	subi	r24, 0x01	; 1
     5f6:	80 93 08 21 	sts	0x2108, r24
     5fa:	81 11       	cpse	r24, r1
     5fc:	12 c0       	rjmp	.+36     	; 0x622 <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     5fe:	62 e0       	ldi	r22, 0x02	; 2
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <sysclk_disable_module>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     606:	80 34       	cpi	r24, 0x40	; 64
     608:	92 40       	sbci	r25, 0x02	; 2
     60a:	59 f4       	brne	.+22     	; 0x622 <adc_disable_clock+0x3a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     60c:	80 91 09 21 	lds	r24, 0x2109
     610:	81 50       	subi	r24, 0x01	; 1
     612:	80 93 09 21 	sts	0x2109, r24
     616:	81 11       	cpse	r24, r1
     618:	04 c0       	rjmp	.+8      	; 0x622 <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     61a:	62 e0       	ldi	r22, 0x02	; 2
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <sysclk_disable_module>
     622:	08 95       	ret

00000624 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     62c:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     62e:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     630:	bb df       	rcall	.-138    	; 0x5a8 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     632:	88 81       	ld	r24, Y
     634:	81 60       	ori	r24, 0x01	; 1
     636:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     638:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     63a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     63c:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     63e:	ef e5       	ldi	r30, 0x5F	; 95
     640:	fa e2       	ldi	r31, 0x2A	; 42
     642:	90 81       	ld	r25, Z
     644:	9f 5f       	subi	r25, 0xFF	; 255
     646:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     648:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	08 95       	ret

00000652 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	ec 01       	movw	r28, r24
     662:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     664:	c1 15       	cp	r28, r1
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	d8 07       	cpc	r29, r24
     66a:	79 f4       	brne	.+30     	; 0x68a <adc_write_configuration+0x38>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     66c:	61 e2       	ldi	r22, 0x21	; 33
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <nvm_read_byte>
     676:	d8 2e       	mov	r13, r24
     678:	60 e2       	ldi	r22, 0x20	; 32
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <nvm_read_byte>

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
     682:	fd 2c       	mov	r15, r13
     684:	e1 2c       	mov	r14, r1
		data |= nvm_read_production_signature_row(ADCACAL0);
     686:	e8 2a       	or	r14, r24
     688:	13 c0       	rjmp	.+38     	; 0x6b0 <adc_write_configuration+0x5e>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     68a:	c0 34       	cpi	r28, 0x40	; 64
     68c:	e2 e0       	ldi	r30, 0x02	; 2
     68e:	de 07       	cpc	r29, r30
     690:	69 f5       	brne	.+90     	; 0x6ec <adc_write_configuration+0x9a>
     692:	65 e2       	ldi	r22, 0x25	; 37
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <nvm_read_byte>
     69c:	f8 2e       	mov	r15, r24
     69e:	64 e2       	ldi	r22, 0x24	; 36
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <nvm_read_byte>
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
		data <<= 8;
     6a8:	3f 2d       	mov	r19, r15
     6aa:	20 e0       	ldi	r18, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCBCAL0);
     6ac:	79 01       	movw	r14, r18
     6ae:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     6b0:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
     6b2:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     6b4:	ce 01       	movw	r24, r28
     6b6:	78 df       	rcall	.-272    	; 0x5a8 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     6b8:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	88 83       	st	Y, r24
	adc->CAL = cal;
     6be:	ec 86       	std	Y+12, r14	; 0x0c
     6c0:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
     6c2:	f8 01       	movw	r30, r16
     6c4:	85 81       	ldd	r24, Z+5	; 0x05
     6c6:	96 81       	ldd	r25, Z+6	; 0x06
     6c8:	88 8f       	std	Y+24, r24	; 0x18
     6ca:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
     6cc:	82 81       	ldd	r24, Z+2	; 0x02
     6ce:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
     6d0:	84 81       	ldd	r24, Z+4	; 0x04
     6d2:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
     6d4:	83 81       	ldd	r24, Z+3	; 0x03
     6d6:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
     6d8:	81 81       	ldd	r24, Z+1	; 0x01
     6da:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
     6dc:	82 2f       	mov	r24, r18
     6de:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
     6e0:	90 81       	ld	r25, Z
     6e2:	89 2b       	or	r24, r25
     6e4:	88 83       	st	Y, r24

	adc_disable_clock(adc);
     6e6:	ce 01       	movw	r24, r28
     6e8:	7f df       	rcall	.-258    	; 0x5e8 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6ea:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	08 95       	ret

000006fc <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	ec 01       	movw	r28, r24
     708:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     70a:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     70c:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     70e:	4c df       	rcall	.-360    	; 0x5a8 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     710:	88 81       	ld	r24, Y
     712:	80 7c       	andi	r24, 0xC0	; 192
     714:	f8 01       	movw	r30, r16
     716:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     718:	88 8d       	ldd	r24, Y+24	; 0x18
     71a:	99 8d       	ldd	r25, Y+25	; 0x19
     71c:	85 83       	std	Z+5, r24	; 0x05
     71e:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     724:	8c 81       	ldd	r24, Y+4	; 0x04
     726:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     728:	8b 81       	ldd	r24, Y+3	; 0x03
     72a:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     730:	ce 01       	movw	r24, r28
     732:	5a df       	rcall	.-332    	; 0x5e8 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     734:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	08 95       	ret

00000742 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	7c 01       	movw	r14, r24
     754:	d6 2e       	mov	r13, r22
     756:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     758:	86 2f       	mov	r24, r22
     75a:	83 70       	andi	r24, 0x03	; 3
     75c:	29 f4       	brne	.+10     	; 0x768 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     75e:	96 2f       	mov	r25, r22
     760:	96 95       	lsr	r25
     762:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	02 c0       	rjmp	.+4      	; 0x76c <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     768:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     76a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     76c:	90 ff       	sbrs	r25, 0
		index++;
     76e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     770:	e7 01       	movw	r28, r14
     772:	a0 96       	adiw	r28, 0x20	; 32
     774:	98 e0       	ldi	r25, 0x08	; 8
     776:	89 9f       	mul	r24, r25
     778:	c0 0d       	add	r28, r0
     77a:	d1 1d       	adc	r29, r1
     77c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     77e:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     780:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     782:	c7 01       	movw	r24, r14
     784:	11 df       	rcall	.-478    	; 0x5a8 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     786:	f8 01       	movw	r30, r16
     788:	80 81       	ld	r24, Z
     78a:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     790:	81 81       	ldd	r24, Z+1	; 0x01
     792:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     794:	d0 fe       	sbrs	r13, 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     798:	83 81       	ldd	r24, Z+3	; 0x03
     79a:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     79c:	c7 01       	movw	r24, r14
     79e:	24 df       	rcall	.-440    	; 0x5e8 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7a0:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	08 95       	ret

000007b4 <dma_interrupt>:
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	28 2f       	mov	r18, r24
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	71 96       	adiw	r30, 0x11	; 17
     7c0:	e2 95       	swap	r30
     7c2:	f2 95       	swap	r31
     7c4:	f0 7f       	andi	r31, 0xF0	; 240
     7c6:	fe 27       	eor	r31, r30
     7c8:	e0 7f       	andi	r30, 0xF0	; 240
     7ca:	fe 27       	eor	r31, r30
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b1 e0       	ldi	r27, 0x01	; 1
     7d0:	14 96       	adiw	r26, 0x04	; 4
     7d2:	9c 91       	ld	r25, X
     7d4:	14 97       	sbiw	r26, 0x04	; 4
     7d6:	13 96       	adiw	r26, 0x03	; 3
     7d8:	ac 91       	ld	r26, X
     7da:	a9 01       	movw	r20, r18
     7dc:	4c 5f       	subi	r20, 0xFC	; 252
     7de:	5f 4f       	sbci	r21, 0xFF	; 255
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	eb 01       	movw	r28, r22
     7e6:	04 2e       	mov	r0, r20
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <dma_interrupt+0x3a>
     7ea:	cc 0f       	add	r28, r28
     7ec:	dd 1f       	adc	r29, r29
     7ee:	0a 94       	dec	r0
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <dma_interrupt+0x36>
     7f2:	08 2e       	mov	r0, r24
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <dma_interrupt+0x46>
     7f6:	66 0f       	add	r22, r22
     7f8:	77 1f       	adc	r23, r23
     7fa:	0a 94       	dec	r0
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <dma_interrupt+0x42>
     7fe:	6c 2b       	or	r22, r28
     800:	a6 23       	and	r26, r22
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	ed 01       	movw	r28, r26
     806:	04 2e       	mov	r0, r20
     808:	02 c0       	rjmp	.+4      	; 0x80e <dma_interrupt+0x5a>
     80a:	d5 95       	asr	r29
     80c:	c7 95       	ror	r28
     80e:	0a 94       	dec	r0
     810:	e2 f7       	brpl	.-8      	; 0x80a <dma_interrupt+0x56>
     812:	c0 fd       	sbrc	r28, 0
     814:	1b c0       	rjmp	.+54     	; 0x84c <dma_interrupt+0x98>
     816:	08 2e       	mov	r0, r24
     818:	02 c0       	rjmp	.+4      	; 0x81e <dma_interrupt+0x6a>
     81a:	b5 95       	asr	r27
     81c:	a7 95       	ror	r26
     81e:	0a 94       	dec	r0
     820:	e2 f7       	brpl	.-8      	; 0x81a <dma_interrupt+0x66>
     822:	a0 fd       	sbrc	r26, 0
     824:	15 c0       	rjmp	.+42     	; 0x850 <dma_interrupt+0x9c>
     826:	69 23       	and	r22, r25
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	db 01       	movw	r26, r22
     82c:	02 c0       	rjmp	.+4      	; 0x832 <dma_interrupt+0x7e>
     82e:	b5 95       	asr	r27
     830:	a7 95       	ror	r26
     832:	4a 95       	dec	r20
     834:	e2 f7       	brpl	.-8      	; 0x82e <dma_interrupt+0x7a>
     836:	a0 fd       	sbrc	r26, 0
     838:	0d c0       	rjmp	.+26     	; 0x854 <dma_interrupt+0xa0>
     83a:	ab 01       	movw	r20, r22
     83c:	02 c0       	rjmp	.+4      	; 0x842 <dma_interrupt+0x8e>
     83e:	55 95       	asr	r21
     840:	47 95       	ror	r20
     842:	8a 95       	dec	r24
     844:	e2 f7       	brpl	.-8      	; 0x83e <dma_interrupt+0x8a>
     846:	ca 01       	movw	r24, r20
     848:	81 70       	andi	r24, 0x01	; 1
     84a:	05 c0       	rjmp	.+10     	; 0x856 <dma_interrupt+0xa2>
     84c:	84 e0       	ldi	r24, 0x04	; 4
     84e:	03 c0       	rjmp	.+6      	; 0x856 <dma_interrupt+0xa2>
     850:	83 e0       	ldi	r24, 0x03	; 3
     852:	01 c0       	rjmp	.+2      	; 0x856 <dma_interrupt+0xa2>
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	90 63       	ori	r25, 0x30	; 48
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	f9 01       	movw	r30, r18
     85e:	ee 0f       	add	r30, r30
     860:	ff 1f       	adc	r31, r31
     862:	ed 5a       	subi	r30, 0xAD	; 173
     864:	f5 4d       	sbci	r31, 0xD5	; 213
     866:	01 90       	ld	r0, Z+
     868:	f0 81       	ld	r31, Z
     86a:	e0 2d       	mov	r30, r0
     86c:	30 97       	sbiw	r30, 0x00	; 0
     86e:	09 f0       	breq	.+2      	; 0x872 <dma_interrupt+0xbe>
     870:	19 95       	eicall
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <dma_enable>:
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <sysclk_enable_module>
     880:	8f b7       	in	r24, 0x3f	; 63
     882:	f8 94       	cli
     884:	ef e5       	ldi	r30, 0x5F	; 95
     886:	fa e2       	ldi	r31, 0x2A	; 42
     888:	90 81       	ld	r25, Z
     88a:	9f 5f       	subi	r25, 0xFF	; 255
     88c:	90 83       	st	Z, r25
     88e:	8f bf       	out	0x3f, r24	; 63
     890:	e0 e0       	ldi	r30, 0x00	; 0
     892:	f1 e0       	ldi	r31, 0x01	; 1
     894:	80 e4       	ldi	r24, 0x40	; 64
     896:	80 83       	st	Z, r24
     898:	80 e8       	ldi	r24, 0x80	; 128
     89a:	80 83       	st	Z, r24
     89c:	08 95       	ret

0000089e <dma_set_callback>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
     89e:	e8 2f       	mov	r30, r24
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	ed 5a       	subi	r30, 0xAD	; 173
     8a8:	f5 4d       	sbci	r31, 0xD5	; 213
     8aa:	60 83       	st	Z, r22
     8ac:	71 83       	std	Z+1, r23	; 0x01
     8ae:	08 95       	ret

000008b0 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	0b b6       	in	r0, 0x3b	; 59
     8bc:	0f 92       	push	r0
     8be:	2f 93       	push	r18
     8c0:	3f 93       	push	r19
     8c2:	4f 93       	push	r20
     8c4:	5f 93       	push	r21
     8c6:	6f 93       	push	r22
     8c8:	7f 93       	push	r23
     8ca:	8f 93       	push	r24
     8cc:	9f 93       	push	r25
     8ce:	af 93       	push	r26
     8d0:	bf 93       	push	r27
     8d2:	ef 93       	push	r30
     8d4:	ff 93       	push	r31
	dma_interrupt(0);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	6d df       	rcall	.-294    	; 0x7b4 <dma_interrupt>
}
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	0b b6       	in	r0, 0x3b	; 59
     90c:	0f 92       	push	r0
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	6f 93       	push	r22
     918:	7f 93       	push	r23
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
	dma_interrupt(1);
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	45 df       	rcall	.-374    	; 0x7b4 <dma_interrupt>
}
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	bf 91       	pop	r27
     930:	af 91       	pop	r26
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	7f 91       	pop	r23
     938:	6f 91       	pop	r22
     93a:	5f 91       	pop	r21
     93c:	4f 91       	pop	r20
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0b be       	out	0x3b, r0	; 59
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
     950:	1f 92       	push	r1
     952:	0f 92       	push	r0
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	0f 92       	push	r0
     958:	11 24       	eor	r1, r1
     95a:	0b b6       	in	r0, 0x3b	; 59
     95c:	0f 92       	push	r0
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
	dma_interrupt(2);
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	1d df       	rcall	.-454    	; 0x7b4 <dma_interrupt>
}
     97a:	ff 91       	pop	r31
     97c:	ef 91       	pop	r30
     97e:	bf 91       	pop	r27
     980:	af 91       	pop	r26
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	7f 91       	pop	r23
     988:	6f 91       	pop	r22
     98a:	5f 91       	pop	r21
     98c:	4f 91       	pop	r20
     98e:	3f 91       	pop	r19
     990:	2f 91       	pop	r18
     992:	0f 90       	pop	r0
     994:	0b be       	out	0x3b, r0	; 59
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
     99a:	0f 90       	pop	r0
     99c:	1f 90       	pop	r1
     99e:	18 95       	reti

000009a0 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
     9a0:	1f 92       	push	r1
     9a2:	0f 92       	push	r0
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	0f 92       	push	r0
     9a8:	11 24       	eor	r1, r1
     9aa:	0b b6       	in	r0, 0x3b	; 59
     9ac:	0f 92       	push	r0
     9ae:	2f 93       	push	r18
     9b0:	3f 93       	push	r19
     9b2:	4f 93       	push	r20
     9b4:	5f 93       	push	r21
     9b6:	6f 93       	push	r22
     9b8:	7f 93       	push	r23
     9ba:	8f 93       	push	r24
     9bc:	9f 93       	push	r25
     9be:	af 93       	push	r26
     9c0:	bf 93       	push	r27
     9c2:	ef 93       	push	r30
     9c4:	ff 93       	push	r31
	dma_interrupt(3);
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	f5 de       	rcall	.-534    	; 0x7b4 <dma_interrupt>
}
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	bf 91       	pop	r27
     9d0:	af 91       	pop	r26
     9d2:	9f 91       	pop	r25
     9d4:	8f 91       	pop	r24
     9d6:	7f 91       	pop	r23
     9d8:	6f 91       	pop	r22
     9da:	5f 91       	pop	r21
     9dc:	4f 91       	pop	r20
     9de:	3f 91       	pop	r19
     9e0:	2f 91       	pop	r18
     9e2:	0f 90       	pop	r0
     9e4:	0b be       	out	0x3b, r0	; 59
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	0f 90       	pop	r0
     9ec:	1f 90       	pop	r1
     9ee:	18 95       	reti

000009f0 <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
     9f0:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
     9f2:	e8 2f       	mov	r30, r24
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	71 96       	adiw	r30, 0x11	; 17
     9f8:	e2 95       	swap	r30
     9fa:	f2 95       	swap	r31
     9fc:	f0 7f       	andi	r31, 0xF0	; 240
     9fe:	fe 27       	eor	r31, r30
     a00:	e0 7f       	andi	r30, 0xF0	; 240
     a02:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     a04:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     a06:	f8 94       	cli
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
     a08:	19 96       	adiw	r26, 0x09	; 9
     a0a:	8c 91       	ld	r24, X
     a0c:	19 97       	sbiw	r26, 0x09	; 9
     a0e:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
     a10:	1a 96       	adiw	r26, 0x0a	; 10
     a12:	8c 91       	ld	r24, X
     a14:	1a 97       	sbiw	r26, 0x0a	; 10
     a16:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
     a18:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
     a1a:	17 96       	adiw	r26, 0x07	; 7
     a1c:	8c 91       	ld	r24, X
     a1e:	17 97       	sbiw	r26, 0x07	; 7
     a20:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
     a22:	18 96       	adiw	r26, 0x08	; 8
     a24:	8c 91       	ld	r24, X
     a26:	18 97       	sbiw	r26, 0x08	; 8
     a28:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
     a2a:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	8c 91       	ld	r24, X
     a30:	12 97       	sbiw	r26, 0x02	; 2
     a32:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
     a34:	13 96       	adiw	r26, 0x03	; 3
     a36:	8c 91       	ld	r24, X
     a38:	13 97       	sbiw	r26, 0x03	; 3
     a3a:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
     a3c:	14 96       	adiw	r26, 0x04	; 4
     a3e:	8d 91       	ld	r24, X+
     a40:	9c 91       	ld	r25, X
     a42:	15 97       	sbiw	r26, 0x05	; 5
     a44:	84 83       	std	Z+4, r24	; 0x04
     a46:	95 83       	std	Z+5, r25	; 0x05
	channel->REPCNT = config->repcnt;
     a48:	16 96       	adiw	r26, 0x06	; 6
     a4a:	8c 91       	ld	r24, X
     a4c:	16 97       	sbiw	r26, 0x06	; 6
     a4e:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
     a50:	11 96       	adiw	r26, 0x01	; 1
     a52:	8c 91       	ld	r24, X
     a54:	11 97       	sbiw	r26, 0x01	; 1
     a56:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
     a58:	8c 91       	ld	r24, X
     a5a:	8f 77       	andi	r24, 0x7F	; 127
     a5c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a5e:	2f bf       	out	0x3f, r18	; 63
     a60:	08 95       	ret

00000a62 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	0b b6       	in	r0, 0x3b	; 59
     a6e:	0f 92       	push	r0
     a70:	2f 93       	push	r18
     a72:	3f 93       	push	r19
     a74:	4f 93       	push	r20
     a76:	5f 93       	push	r21
     a78:	6f 93       	push	r22
     a7a:	7f 93       	push	r23
     a7c:	8f 93       	push	r24
     a7e:	9f 93       	push	r25
     a80:	af 93       	push	r26
     a82:	bf 93       	push	r27
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     a88:	e0 91 0a 21 	lds	r30, 0x210A
     a8c:	f0 91 0b 21 	lds	r31, 0x210B
     a90:	30 97       	sbiw	r30, 0x00	; 0
     a92:	09 f0       	breq	.+2      	; 0xa96 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     a94:	19 95       	eicall
	}
}
     a96:	ff 91       	pop	r31
     a98:	ef 91       	pop	r30
     a9a:	bf 91       	pop	r27
     a9c:	af 91       	pop	r26
     a9e:	9f 91       	pop	r25
     aa0:	8f 91       	pop	r24
     aa2:	7f 91       	pop	r23
     aa4:	6f 91       	pop	r22
     aa6:	5f 91       	pop	r21
     aa8:	4f 91       	pop	r20
     aaa:	3f 91       	pop	r19
     aac:	2f 91       	pop	r18
     aae:	0f 90       	pop	r0
     ab0:	0b be       	out	0x3b, r0	; 59
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     abc:	1f 92       	push	r1
     abe:	0f 92       	push	r0
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	0b b6       	in	r0, 0x3b	; 59
     ac8:	0f 92       	push	r0
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	6f 93       	push	r22
     ad4:	7f 93       	push	r23
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	af 93       	push	r26
     adc:	bf 93       	push	r27
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     ae2:	e0 91 0c 21 	lds	r30, 0x210C
     ae6:	f0 91 0d 21 	lds	r31, 0x210D
     aea:	30 97       	sbiw	r30, 0x00	; 0
     aec:	09 f0       	breq	.+2      	; 0xaf0 <__vector_15+0x34>
		tc_tcc0_err_callback();
     aee:	19 95       	eicall
	}
}
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	bf 91       	pop	r27
     af6:	af 91       	pop	r26
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	7f 91       	pop	r23
     afe:	6f 91       	pop	r22
     b00:	5f 91       	pop	r21
     b02:	4f 91       	pop	r20
     b04:	3f 91       	pop	r19
     b06:	2f 91       	pop	r18
     b08:	0f 90       	pop	r0
     b0a:	0b be       	out	0x3b, r0	; 59
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     b16:	1f 92       	push	r1
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	0f 92       	push	r0
     b1e:	11 24       	eor	r1, r1
     b20:	0b b6       	in	r0, 0x3b	; 59
     b22:	0f 92       	push	r0
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     b3c:	e0 91 0e 21 	lds	r30, 0x210E
     b40:	f0 91 0f 21 	lds	r31, 0x210F
     b44:	30 97       	sbiw	r30, 0x00	; 0
     b46:	09 f0       	breq	.+2      	; 0xb4a <__vector_16+0x34>
		tc_tcc0_cca_callback();
     b48:	19 95       	eicall
	}
}
     b4a:	ff 91       	pop	r31
     b4c:	ef 91       	pop	r30
     b4e:	bf 91       	pop	r27
     b50:	af 91       	pop	r26
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	7f 91       	pop	r23
     b58:	6f 91       	pop	r22
     b5a:	5f 91       	pop	r21
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	0f 90       	pop	r0
     b64:	0b be       	out	0x3b, r0	; 59
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     b70:	1f 92       	push	r1
     b72:	0f 92       	push	r0
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
     b7a:	0b b6       	in	r0, 0x3b	; 59
     b7c:	0f 92       	push	r0
     b7e:	2f 93       	push	r18
     b80:	3f 93       	push	r19
     b82:	4f 93       	push	r20
     b84:	5f 93       	push	r21
     b86:	6f 93       	push	r22
     b88:	7f 93       	push	r23
     b8a:	8f 93       	push	r24
     b8c:	9f 93       	push	r25
     b8e:	af 93       	push	r26
     b90:	bf 93       	push	r27
     b92:	ef 93       	push	r30
     b94:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     b96:	e0 91 10 21 	lds	r30, 0x2110
     b9a:	f0 91 11 21 	lds	r31, 0x2111
     b9e:	30 97       	sbiw	r30, 0x00	; 0
     ba0:	09 f0       	breq	.+2      	; 0xba4 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     ba2:	19 95       	eicall
	}
}
     ba4:	ff 91       	pop	r31
     ba6:	ef 91       	pop	r30
     ba8:	bf 91       	pop	r27
     baa:	af 91       	pop	r26
     bac:	9f 91       	pop	r25
     bae:	8f 91       	pop	r24
     bb0:	7f 91       	pop	r23
     bb2:	6f 91       	pop	r22
     bb4:	5f 91       	pop	r21
     bb6:	4f 91       	pop	r20
     bb8:	3f 91       	pop	r19
     bba:	2f 91       	pop	r18
     bbc:	0f 90       	pop	r0
     bbe:	0b be       	out	0x3b, r0	; 59
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	11 24       	eor	r1, r1
     bd4:	0b b6       	in	r0, 0x3b	; 59
     bd6:	0f 92       	push	r0
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	ef 93       	push	r30
     bee:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     bf0:	e0 91 12 21 	lds	r30, 0x2112
     bf4:	f0 91 13 21 	lds	r31, 0x2113
     bf8:	30 97       	sbiw	r30, 0x00	; 0
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     bfc:	19 95       	eicall
	}
}
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	0f 90       	pop	r0
     c18:	0b be       	out	0x3b, r0	; 59
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     c24:	1f 92       	push	r1
     c26:	0f 92       	push	r0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	0f 92       	push	r0
     c2c:	11 24       	eor	r1, r1
     c2e:	0b b6       	in	r0, 0x3b	; 59
     c30:	0f 92       	push	r0
     c32:	2f 93       	push	r18
     c34:	3f 93       	push	r19
     c36:	4f 93       	push	r20
     c38:	5f 93       	push	r21
     c3a:	6f 93       	push	r22
     c3c:	7f 93       	push	r23
     c3e:	8f 93       	push	r24
     c40:	9f 93       	push	r25
     c42:	af 93       	push	r26
     c44:	bf 93       	push	r27
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     c4a:	e0 91 14 21 	lds	r30, 0x2114
     c4e:	f0 91 15 21 	lds	r31, 0x2115
     c52:	30 97       	sbiw	r30, 0x00	; 0
     c54:	09 f0       	breq	.+2      	; 0xc58 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     c56:	19 95       	eicall
	}
}
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	bf 91       	pop	r27
     c5e:	af 91       	pop	r26
     c60:	9f 91       	pop	r25
     c62:	8f 91       	pop	r24
     c64:	7f 91       	pop	r23
     c66:	6f 91       	pop	r22
     c68:	5f 91       	pop	r21
     c6a:	4f 91       	pop	r20
     c6c:	3f 91       	pop	r19
     c6e:	2f 91       	pop	r18
     c70:	0f 90       	pop	r0
     c72:	0b be       	out	0x3b, r0	; 59
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	0b b6       	in	r0, 0x3b	; 59
     c8a:	0f 92       	push	r0
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     ca4:	e0 91 16 21 	lds	r30, 0x2116
     ca8:	f0 91 17 21 	lds	r31, 0x2117
     cac:	30 97       	sbiw	r30, 0x00	; 0
     cae:	09 f0       	breq	.+2      	; 0xcb2 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     cb0:	19 95       	eicall
	}
}
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	bf 91       	pop	r27
     cb8:	af 91       	pop	r26
     cba:	9f 91       	pop	r25
     cbc:	8f 91       	pop	r24
     cbe:	7f 91       	pop	r23
     cc0:	6f 91       	pop	r22
     cc2:	5f 91       	pop	r21
     cc4:	4f 91       	pop	r20
     cc6:	3f 91       	pop	r19
     cc8:	2f 91       	pop	r18
     cca:	0f 90       	pop	r0
     ccc:	0b be       	out	0x3b, r0	; 59
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     cd8:	1f 92       	push	r1
     cda:	0f 92       	push	r0
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	0f 92       	push	r0
     ce0:	11 24       	eor	r1, r1
     ce2:	0b b6       	in	r0, 0x3b	; 59
     ce4:	0f 92       	push	r0
     ce6:	2f 93       	push	r18
     ce8:	3f 93       	push	r19
     cea:	4f 93       	push	r20
     cec:	5f 93       	push	r21
     cee:	6f 93       	push	r22
     cf0:	7f 93       	push	r23
     cf2:	8f 93       	push	r24
     cf4:	9f 93       	push	r25
     cf6:	af 93       	push	r26
     cf8:	bf 93       	push	r27
     cfa:	ef 93       	push	r30
     cfc:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     cfe:	e0 91 18 21 	lds	r30, 0x2118
     d02:	f0 91 19 21 	lds	r31, 0x2119
     d06:	30 97       	sbiw	r30, 0x00	; 0
     d08:	09 f0       	breq	.+2      	; 0xd0c <__vector_21+0x34>
		tc_tcc1_err_callback();
     d0a:	19 95       	eicall
	}
}
     d0c:	ff 91       	pop	r31
     d0e:	ef 91       	pop	r30
     d10:	bf 91       	pop	r27
     d12:	af 91       	pop	r26
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	7f 91       	pop	r23
     d1a:	6f 91       	pop	r22
     d1c:	5f 91       	pop	r21
     d1e:	4f 91       	pop	r20
     d20:	3f 91       	pop	r19
     d22:	2f 91       	pop	r18
     d24:	0f 90       	pop	r0
     d26:	0b be       	out	0x3b, r0	; 59
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	0b b6       	in	r0, 0x3b	; 59
     d3e:	0f 92       	push	r0
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	ef 93       	push	r30
     d56:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     d58:	e0 91 1a 21 	lds	r30, 0x211A
     d5c:	f0 91 1b 21 	lds	r31, 0x211B
     d60:	30 97       	sbiw	r30, 0x00	; 0
     d62:	09 f0       	breq	.+2      	; 0xd66 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     d64:	19 95       	eicall
	}
}
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	bf 91       	pop	r27
     d6c:	af 91       	pop	r26
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	7f 91       	pop	r23
     d74:	6f 91       	pop	r22
     d76:	5f 91       	pop	r21
     d78:	4f 91       	pop	r20
     d7a:	3f 91       	pop	r19
     d7c:	2f 91       	pop	r18
     d7e:	0f 90       	pop	r0
     d80:	0b be       	out	0x3b, r0	; 59
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	0b b6       	in	r0, 0x3b	; 59
     d98:	0f 92       	push	r0
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     db2:	e0 91 1c 21 	lds	r30, 0x211C
     db6:	f0 91 1d 21 	lds	r31, 0x211D
     dba:	30 97       	sbiw	r30, 0x00	; 0
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     dbe:	19 95       	eicall
	}
}
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0b be       	out	0x3b, r0	; 59
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	0b b6       	in	r0, 0x3b	; 59
     df2:	0f 92       	push	r0
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     e0c:	e0 91 1e 21 	lds	r30, 0x211E
     e10:	f0 91 1f 21 	lds	r31, 0x211F
     e14:	30 97       	sbiw	r30, 0x00	; 0
     e16:	09 f0       	breq	.+2      	; 0xe1a <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     e18:	19 95       	eicall
	}
}
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	0b be       	out	0x3b, r0	; 59
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	0b b6       	in	r0, 0x3b	; 59
     e4c:	0f 92       	push	r0
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     e66:	e0 91 20 21 	lds	r30, 0x2120
     e6a:	f0 91 21 21 	lds	r31, 0x2121
     e6e:	30 97       	sbiw	r30, 0x00	; 0
     e70:	09 f0       	breq	.+2      	; 0xe74 <__vector_78+0x34>
		tc_tcd0_err_callback();
     e72:	19 95       	eicall
	}
}
     e74:	ff 91       	pop	r31
     e76:	ef 91       	pop	r30
     e78:	bf 91       	pop	r27
     e7a:	af 91       	pop	r26
     e7c:	9f 91       	pop	r25
     e7e:	8f 91       	pop	r24
     e80:	7f 91       	pop	r23
     e82:	6f 91       	pop	r22
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	0b be       	out	0x3b, r0	; 59
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	0b b6       	in	r0, 0x3b	; 59
     ea6:	0f 92       	push	r0
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     ec0:	e0 91 22 21 	lds	r30, 0x2122
     ec4:	f0 91 23 21 	lds	r31, 0x2123
     ec8:	30 97       	sbiw	r30, 0x00	; 0
     eca:	09 f0       	breq	.+2      	; 0xece <__vector_79+0x34>
		tc_tcd0_cca_callback();
     ecc:	19 95       	eicall
	}
}
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	bf 91       	pop	r27
     ed4:	af 91       	pop	r26
     ed6:	9f 91       	pop	r25
     ed8:	8f 91       	pop	r24
     eda:	7f 91       	pop	r23
     edc:	6f 91       	pop	r22
     ede:	5f 91       	pop	r21
     ee0:	4f 91       	pop	r20
     ee2:	3f 91       	pop	r19
     ee4:	2f 91       	pop	r18
     ee6:	0f 90       	pop	r0
     ee8:	0b be       	out	0x3b, r0	; 59
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	0b b6       	in	r0, 0x3b	; 59
     f00:	0f 92       	push	r0
     f02:	2f 93       	push	r18
     f04:	3f 93       	push	r19
     f06:	4f 93       	push	r20
     f08:	5f 93       	push	r21
     f0a:	6f 93       	push	r22
     f0c:	7f 93       	push	r23
     f0e:	8f 93       	push	r24
     f10:	9f 93       	push	r25
     f12:	af 93       	push	r26
     f14:	bf 93       	push	r27
     f16:	ef 93       	push	r30
     f18:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     f1a:	e0 91 24 21 	lds	r30, 0x2124
     f1e:	f0 91 25 21 	lds	r31, 0x2125
     f22:	30 97       	sbiw	r30, 0x00	; 0
     f24:	09 f0       	breq	.+2      	; 0xf28 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     f26:	19 95       	eicall
	}
}
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0b be       	out	0x3b, r0	; 59
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	0b b6       	in	r0, 0x3b	; 59
     f5a:	0f 92       	push	r0
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	6f 93       	push	r22
     f66:	7f 93       	push	r23
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	af 93       	push	r26
     f6e:	bf 93       	push	r27
     f70:	ef 93       	push	r30
     f72:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     f74:	e0 91 26 21 	lds	r30, 0x2126
     f78:	f0 91 27 21 	lds	r31, 0x2127
     f7c:	30 97       	sbiw	r30, 0x00	; 0
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     f80:	19 95       	eicall
	}
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0b be       	out	0x3b, r0	; 59
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     fa8:	1f 92       	push	r1
     faa:	0f 92       	push	r0
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	0f 92       	push	r0
     fb0:	11 24       	eor	r1, r1
     fb2:	0b b6       	in	r0, 0x3b	; 59
     fb4:	0f 92       	push	r0
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     fce:	e0 91 28 21 	lds	r30, 0x2128
     fd2:	f0 91 29 21 	lds	r31, 0x2129
     fd6:	30 97       	sbiw	r30, 0x00	; 0
     fd8:	09 f0       	breq	.+2      	; 0xfdc <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     fda:	19 95       	eicall
	}
}
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	0f 90       	pop	r0
     ff6:	0b be       	out	0x3b, r0	; 59
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	0b b6       	in	r0, 0x3b	; 59
    100e:	0f 92       	push	r0
    1010:	2f 93       	push	r18
    1012:	3f 93       	push	r19
    1014:	4f 93       	push	r20
    1016:	5f 93       	push	r21
    1018:	6f 93       	push	r22
    101a:	7f 93       	push	r23
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	af 93       	push	r26
    1022:	bf 93       	push	r27
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1028:	e0 91 2a 21 	lds	r30, 0x212A
    102c:	f0 91 2b 21 	lds	r31, 0x212B
    1030:	30 97       	sbiw	r30, 0x00	; 0
    1032:	09 f0       	breq	.+2      	; 0x1036 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    1034:	19 95       	eicall
	}
}
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0b be       	out	0x3b, r0	; 59
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	0b b6       	in	r0, 0x3b	; 59
    1068:	0f 92       	push	r0
    106a:	2f 93       	push	r18
    106c:	3f 93       	push	r19
    106e:	4f 93       	push	r20
    1070:	5f 93       	push	r21
    1072:	6f 93       	push	r22
    1074:	7f 93       	push	r23
    1076:	8f 93       	push	r24
    1078:	9f 93       	push	r25
    107a:	af 93       	push	r26
    107c:	bf 93       	push	r27
    107e:	ef 93       	push	r30
    1080:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1082:	e0 91 2c 21 	lds	r30, 0x212C
    1086:	f0 91 2d 21 	lds	r31, 0x212D
    108a:	30 97       	sbiw	r30, 0x00	; 0
    108c:	09 f0       	breq	.+2      	; 0x1090 <__vector_84+0x34>
		tc_tcd1_err_callback();
    108e:	19 95       	eicall
	}
}
    1090:	ff 91       	pop	r31
    1092:	ef 91       	pop	r30
    1094:	bf 91       	pop	r27
    1096:	af 91       	pop	r26
    1098:	9f 91       	pop	r25
    109a:	8f 91       	pop	r24
    109c:	7f 91       	pop	r23
    109e:	6f 91       	pop	r22
    10a0:	5f 91       	pop	r21
    10a2:	4f 91       	pop	r20
    10a4:	3f 91       	pop	r19
    10a6:	2f 91       	pop	r18
    10a8:	0f 90       	pop	r0
    10aa:	0b be       	out	0x3b, r0	; 59
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    10b6:	1f 92       	push	r1
    10b8:	0f 92       	push	r0
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	0f 92       	push	r0
    10be:	11 24       	eor	r1, r1
    10c0:	0b b6       	in	r0, 0x3b	; 59
    10c2:	0f 92       	push	r0
    10c4:	2f 93       	push	r18
    10c6:	3f 93       	push	r19
    10c8:	4f 93       	push	r20
    10ca:	5f 93       	push	r21
    10cc:	6f 93       	push	r22
    10ce:	7f 93       	push	r23
    10d0:	8f 93       	push	r24
    10d2:	9f 93       	push	r25
    10d4:	af 93       	push	r26
    10d6:	bf 93       	push	r27
    10d8:	ef 93       	push	r30
    10da:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    10dc:	e0 91 2e 21 	lds	r30, 0x212E
    10e0:	f0 91 2f 21 	lds	r31, 0x212F
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	09 f0       	breq	.+2      	; 0x10ea <__vector_85+0x34>
		tc_tcd1_cca_callback();
    10e8:	19 95       	eicall
	}
}
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0b be       	out	0x3b, r0	; 59
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	0f 90       	pop	r0
    110c:	1f 90       	pop	r1
    110e:	18 95       	reti

00001110 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1110:	1f 92       	push	r1
    1112:	0f 92       	push	r0
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	0f 92       	push	r0
    1118:	11 24       	eor	r1, r1
    111a:	0b b6       	in	r0, 0x3b	; 59
    111c:	0f 92       	push	r0
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	4f 93       	push	r20
    1124:	5f 93       	push	r21
    1126:	6f 93       	push	r22
    1128:	7f 93       	push	r23
    112a:	8f 93       	push	r24
    112c:	9f 93       	push	r25
    112e:	af 93       	push	r26
    1130:	bf 93       	push	r27
    1132:	ef 93       	push	r30
    1134:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1136:	e0 91 30 21 	lds	r30, 0x2130
    113a:	f0 91 31 21 	lds	r31, 0x2131
    113e:	30 97       	sbiw	r30, 0x00	; 0
    1140:	09 f0       	breq	.+2      	; 0x1144 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    1142:	19 95       	eicall
	}
}
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	0b be       	out	0x3b, r0	; 59
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	0f 90       	pop	r0
    1166:	1f 90       	pop	r1
    1168:	18 95       	reti

0000116a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	0b b6       	in	r0, 0x3b	; 59
    1176:	0f 92       	push	r0
    1178:	2f 93       	push	r18
    117a:	3f 93       	push	r19
    117c:	4f 93       	push	r20
    117e:	5f 93       	push	r21
    1180:	6f 93       	push	r22
    1182:	7f 93       	push	r23
    1184:	8f 93       	push	r24
    1186:	9f 93       	push	r25
    1188:	af 93       	push	r26
    118a:	bf 93       	push	r27
    118c:	ef 93       	push	r30
    118e:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1190:	e0 91 32 21 	lds	r30, 0x2132
    1194:	f0 91 33 21 	lds	r31, 0x2133
    1198:	30 97       	sbiw	r30, 0x00	; 0
    119a:	09 f0       	breq	.+2      	; 0x119e <__vector_47+0x34>
		tc_tce0_ovf_callback();
    119c:	19 95       	eicall
	}
}
    119e:	ff 91       	pop	r31
    11a0:	ef 91       	pop	r30
    11a2:	bf 91       	pop	r27
    11a4:	af 91       	pop	r26
    11a6:	9f 91       	pop	r25
    11a8:	8f 91       	pop	r24
    11aa:	7f 91       	pop	r23
    11ac:	6f 91       	pop	r22
    11ae:	5f 91       	pop	r21
    11b0:	4f 91       	pop	r20
    11b2:	3f 91       	pop	r19
    11b4:	2f 91       	pop	r18
    11b6:	0f 90       	pop	r0
    11b8:	0b be       	out	0x3b, r0	; 59
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	0b b6       	in	r0, 0x3b	; 59
    11d0:	0f 92       	push	r0
    11d2:	2f 93       	push	r18
    11d4:	3f 93       	push	r19
    11d6:	4f 93       	push	r20
    11d8:	5f 93       	push	r21
    11da:	6f 93       	push	r22
    11dc:	7f 93       	push	r23
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
    11e2:	af 93       	push	r26
    11e4:	bf 93       	push	r27
    11e6:	ef 93       	push	r30
    11e8:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    11ea:	e0 91 34 21 	lds	r30, 0x2134
    11ee:	f0 91 35 21 	lds	r31, 0x2135
    11f2:	30 97       	sbiw	r30, 0x00	; 0
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <__vector_48+0x34>
		tc_tce0_err_callback();
    11f6:	19 95       	eicall
	}
}
    11f8:	ff 91       	pop	r31
    11fa:	ef 91       	pop	r30
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	0f 90       	pop	r0
    1212:	0b be       	out	0x3b, r0	; 59
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	0b b6       	in	r0, 0x3b	; 59
    122a:	0f 92       	push	r0
    122c:	2f 93       	push	r18
    122e:	3f 93       	push	r19
    1230:	4f 93       	push	r20
    1232:	5f 93       	push	r21
    1234:	6f 93       	push	r22
    1236:	7f 93       	push	r23
    1238:	8f 93       	push	r24
    123a:	9f 93       	push	r25
    123c:	af 93       	push	r26
    123e:	bf 93       	push	r27
    1240:	ef 93       	push	r30
    1242:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1244:	e0 91 36 21 	lds	r30, 0x2136
    1248:	f0 91 37 21 	lds	r31, 0x2137
    124c:	30 97       	sbiw	r30, 0x00	; 0
    124e:	09 f0       	breq	.+2      	; 0x1252 <__vector_49+0x34>
		tc_tce0_cca_callback();
    1250:	19 95       	eicall
	}
}
    1252:	ff 91       	pop	r31
    1254:	ef 91       	pop	r30
    1256:	bf 91       	pop	r27
    1258:	af 91       	pop	r26
    125a:	9f 91       	pop	r25
    125c:	8f 91       	pop	r24
    125e:	7f 91       	pop	r23
    1260:	6f 91       	pop	r22
    1262:	5f 91       	pop	r21
    1264:	4f 91       	pop	r20
    1266:	3f 91       	pop	r19
    1268:	2f 91       	pop	r18
    126a:	0f 90       	pop	r0
    126c:	0b be       	out	0x3b, r0	; 59
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	0b b6       	in	r0, 0x3b	; 59
    1284:	0f 92       	push	r0
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    129e:	e0 91 38 21 	lds	r30, 0x2138
    12a2:	f0 91 39 21 	lds	r31, 0x2139
    12a6:	30 97       	sbiw	r30, 0x00	; 0
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__vector_50+0x34>
		tc_tce0_ccb_callback();
    12aa:	19 95       	eicall
	}
}
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0b be       	out	0x3b, r0	; 59
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	0b b6       	in	r0, 0x3b	; 59
    12de:	0f 92       	push	r0
    12e0:	2f 93       	push	r18
    12e2:	3f 93       	push	r19
    12e4:	4f 93       	push	r20
    12e6:	5f 93       	push	r21
    12e8:	6f 93       	push	r22
    12ea:	7f 93       	push	r23
    12ec:	8f 93       	push	r24
    12ee:	9f 93       	push	r25
    12f0:	af 93       	push	r26
    12f2:	bf 93       	push	r27
    12f4:	ef 93       	push	r30
    12f6:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    12f8:	e0 91 3a 21 	lds	r30, 0x213A
    12fc:	f0 91 3b 21 	lds	r31, 0x213B
    1300:	30 97       	sbiw	r30, 0x00	; 0
    1302:	09 f0       	breq	.+2      	; 0x1306 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1304:	19 95       	eicall
	}
}
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	bf 91       	pop	r27
    130c:	af 91       	pop	r26
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	7f 91       	pop	r23
    1314:	6f 91       	pop	r22
    1316:	5f 91       	pop	r21
    1318:	4f 91       	pop	r20
    131a:	3f 91       	pop	r19
    131c:	2f 91       	pop	r18
    131e:	0f 90       	pop	r0
    1320:	0b be       	out	0x3b, r0	; 59
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	0b b6       	in	r0, 0x3b	; 59
    1338:	0f 92       	push	r0
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1352:	e0 91 3c 21 	lds	r30, 0x213C
    1356:	f0 91 3d 21 	lds	r31, 0x213D
    135a:	30 97       	sbiw	r30, 0x00	; 0
    135c:	09 f0       	breq	.+2      	; 0x1360 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    135e:	19 95       	eicall
	}
}
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0b be       	out	0x3b, r0	; 59
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1386:	1f 92       	push	r1
    1388:	0f 92       	push	r0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	0f 92       	push	r0
    138e:	11 24       	eor	r1, r1
    1390:	0b b6       	in	r0, 0x3b	; 59
    1392:	0f 92       	push	r0
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    13ac:	e0 91 3e 21 	lds	r30, 0x213E
    13b0:	f0 91 3f 21 	lds	r31, 0x213F
    13b4:	30 97       	sbiw	r30, 0x00	; 0
    13b6:	09 f0       	breq	.+2      	; 0x13ba <__vector_53+0x34>
		tc_tce1_ovf_callback();
    13b8:	19 95       	eicall
	}
}
    13ba:	ff 91       	pop	r31
    13bc:	ef 91       	pop	r30
    13be:	bf 91       	pop	r27
    13c0:	af 91       	pop	r26
    13c2:	9f 91       	pop	r25
    13c4:	8f 91       	pop	r24
    13c6:	7f 91       	pop	r23
    13c8:	6f 91       	pop	r22
    13ca:	5f 91       	pop	r21
    13cc:	4f 91       	pop	r20
    13ce:	3f 91       	pop	r19
    13d0:	2f 91       	pop	r18
    13d2:	0f 90       	pop	r0
    13d4:	0b be       	out	0x3b, r0	; 59
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	0b b6       	in	r0, 0x3b	; 59
    13ec:	0f 92       	push	r0
    13ee:	2f 93       	push	r18
    13f0:	3f 93       	push	r19
    13f2:	4f 93       	push	r20
    13f4:	5f 93       	push	r21
    13f6:	6f 93       	push	r22
    13f8:	7f 93       	push	r23
    13fa:	8f 93       	push	r24
    13fc:	9f 93       	push	r25
    13fe:	af 93       	push	r26
    1400:	bf 93       	push	r27
    1402:	ef 93       	push	r30
    1404:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1406:	e0 91 40 21 	lds	r30, 0x2140
    140a:	f0 91 41 21 	lds	r31, 0x2141
    140e:	30 97       	sbiw	r30, 0x00	; 0
    1410:	09 f0       	breq	.+2      	; 0x1414 <__vector_54+0x34>
		tc_tce1_err_callback();
    1412:	19 95       	eicall
	}
}
    1414:	ff 91       	pop	r31
    1416:	ef 91       	pop	r30
    1418:	bf 91       	pop	r27
    141a:	af 91       	pop	r26
    141c:	9f 91       	pop	r25
    141e:	8f 91       	pop	r24
    1420:	7f 91       	pop	r23
    1422:	6f 91       	pop	r22
    1424:	5f 91       	pop	r21
    1426:	4f 91       	pop	r20
    1428:	3f 91       	pop	r19
    142a:	2f 91       	pop	r18
    142c:	0f 90       	pop	r0
    142e:	0b be       	out	0x3b, r0	; 59
    1430:	0f 90       	pop	r0
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	0f 90       	pop	r0
    1436:	1f 90       	pop	r1
    1438:	18 95       	reti

0000143a <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    143a:	1f 92       	push	r1
    143c:	0f 92       	push	r0
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	0f 92       	push	r0
    1442:	11 24       	eor	r1, r1
    1444:	0b b6       	in	r0, 0x3b	; 59
    1446:	0f 92       	push	r0
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1460:	e0 91 42 21 	lds	r30, 0x2142
    1464:	f0 91 43 21 	lds	r31, 0x2143
    1468:	30 97       	sbiw	r30, 0x00	; 0
    146a:	09 f0       	breq	.+2      	; 0x146e <__vector_55+0x34>
		tc_tce1_cca_callback();
    146c:	19 95       	eicall
	}
}
    146e:	ff 91       	pop	r31
    1470:	ef 91       	pop	r30
    1472:	bf 91       	pop	r27
    1474:	af 91       	pop	r26
    1476:	9f 91       	pop	r25
    1478:	8f 91       	pop	r24
    147a:	7f 91       	pop	r23
    147c:	6f 91       	pop	r22
    147e:	5f 91       	pop	r21
    1480:	4f 91       	pop	r20
    1482:	3f 91       	pop	r19
    1484:	2f 91       	pop	r18
    1486:	0f 90       	pop	r0
    1488:	0b be       	out	0x3b, r0	; 59
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1494:	1f 92       	push	r1
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	0f 92       	push	r0
    149c:	11 24       	eor	r1, r1
    149e:	0b b6       	in	r0, 0x3b	; 59
    14a0:	0f 92       	push	r0
    14a2:	2f 93       	push	r18
    14a4:	3f 93       	push	r19
    14a6:	4f 93       	push	r20
    14a8:	5f 93       	push	r21
    14aa:	6f 93       	push	r22
    14ac:	7f 93       	push	r23
    14ae:	8f 93       	push	r24
    14b0:	9f 93       	push	r25
    14b2:	af 93       	push	r26
    14b4:	bf 93       	push	r27
    14b6:	ef 93       	push	r30
    14b8:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    14ba:	e0 91 44 21 	lds	r30, 0x2144
    14be:	f0 91 45 21 	lds	r31, 0x2145
    14c2:	30 97       	sbiw	r30, 0x00	; 0
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    14c6:	19 95       	eicall
	}
}
    14c8:	ff 91       	pop	r31
    14ca:	ef 91       	pop	r30
    14cc:	bf 91       	pop	r27
    14ce:	af 91       	pop	r26
    14d0:	9f 91       	pop	r25
    14d2:	8f 91       	pop	r24
    14d4:	7f 91       	pop	r23
    14d6:	6f 91       	pop	r22
    14d8:	5f 91       	pop	r21
    14da:	4f 91       	pop	r20
    14dc:	3f 91       	pop	r19
    14de:	2f 91       	pop	r18
    14e0:	0f 90       	pop	r0
    14e2:	0b be       	out	0x3b, r0	; 59
    14e4:	0f 90       	pop	r0
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	0f 90       	pop	r0
    14ea:	1f 90       	pop	r1
    14ec:	18 95       	reti

000014ee <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	0b b6       	in	r0, 0x3b	; 59
    14fa:	0f 92       	push	r0
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1514:	e0 91 46 21 	lds	r30, 0x2146
    1518:	f0 91 47 21 	lds	r31, 0x2147
    151c:	30 97       	sbiw	r30, 0x00	; 0
    151e:	09 f0       	breq	.+2      	; 0x1522 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1520:	19 95       	eicall
	}
}
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0b be       	out	0x3b, r0	; 59
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti

00001548 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1548:	1f 92       	push	r1
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	0f 92       	push	r0
    1550:	11 24       	eor	r1, r1
    1552:	0b b6       	in	r0, 0x3b	; 59
    1554:	0f 92       	push	r0
    1556:	2f 93       	push	r18
    1558:	3f 93       	push	r19
    155a:	4f 93       	push	r20
    155c:	5f 93       	push	r21
    155e:	6f 93       	push	r22
    1560:	7f 93       	push	r23
    1562:	8f 93       	push	r24
    1564:	9f 93       	push	r25
    1566:	af 93       	push	r26
    1568:	bf 93       	push	r27
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    156e:	e0 91 48 21 	lds	r30, 0x2148
    1572:	f0 91 49 21 	lds	r31, 0x2149
    1576:	30 97       	sbiw	r30, 0x00	; 0
    1578:	09 f0       	breq	.+2      	; 0x157c <__vector_109+0x34>
		tc_tcf0_err_callback();
    157a:	19 95       	eicall
	}
}
    157c:	ff 91       	pop	r31
    157e:	ef 91       	pop	r30
    1580:	bf 91       	pop	r27
    1582:	af 91       	pop	r26
    1584:	9f 91       	pop	r25
    1586:	8f 91       	pop	r24
    1588:	7f 91       	pop	r23
    158a:	6f 91       	pop	r22
    158c:	5f 91       	pop	r21
    158e:	4f 91       	pop	r20
    1590:	3f 91       	pop	r19
    1592:	2f 91       	pop	r18
    1594:	0f 90       	pop	r0
    1596:	0b be       	out	0x3b, r0	; 59
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	0b b6       	in	r0, 0x3b	; 59
    15ae:	0f 92       	push	r0
    15b0:	2f 93       	push	r18
    15b2:	3f 93       	push	r19
    15b4:	4f 93       	push	r20
    15b6:	5f 93       	push	r21
    15b8:	6f 93       	push	r22
    15ba:	7f 93       	push	r23
    15bc:	8f 93       	push	r24
    15be:	9f 93       	push	r25
    15c0:	af 93       	push	r26
    15c2:	bf 93       	push	r27
    15c4:	ef 93       	push	r30
    15c6:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    15c8:	e0 91 4a 21 	lds	r30, 0x214A
    15cc:	f0 91 4b 21 	lds	r31, 0x214B
    15d0:	30 97       	sbiw	r30, 0x00	; 0
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    15d4:	19 95       	eicall
	}
}
    15d6:	ff 91       	pop	r31
    15d8:	ef 91       	pop	r30
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0b be       	out	0x3b, r0	; 59
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	0b b6       	in	r0, 0x3b	; 59
    1608:	0f 92       	push	r0
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	4f 93       	push	r20
    1610:	5f 93       	push	r21
    1612:	6f 93       	push	r22
    1614:	7f 93       	push	r23
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	af 93       	push	r26
    161c:	bf 93       	push	r27
    161e:	ef 93       	push	r30
    1620:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1622:	e0 91 4c 21 	lds	r30, 0x214C
    1626:	f0 91 4d 21 	lds	r31, 0x214D
    162a:	30 97       	sbiw	r30, 0x00	; 0
    162c:	09 f0       	breq	.+2      	; 0x1630 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    162e:	19 95       	eicall
	}
}
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0b be       	out	0x3b, r0	; 59
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	0b b6       	in	r0, 0x3b	; 59
    1662:	0f 92       	push	r0
    1664:	2f 93       	push	r18
    1666:	3f 93       	push	r19
    1668:	4f 93       	push	r20
    166a:	5f 93       	push	r21
    166c:	6f 93       	push	r22
    166e:	7f 93       	push	r23
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
    1674:	af 93       	push	r26
    1676:	bf 93       	push	r27
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    167c:	e0 91 4e 21 	lds	r30, 0x214E
    1680:	f0 91 4f 21 	lds	r31, 0x214F
    1684:	30 97       	sbiw	r30, 0x00	; 0
    1686:	09 f0       	breq	.+2      	; 0x168a <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1688:	19 95       	eicall
	}
}
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	0f 90       	pop	r0
    16a4:	0b be       	out	0x3b, r0	; 59
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    16b0:	1f 92       	push	r1
    16b2:	0f 92       	push	r0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	0f 92       	push	r0
    16b8:	11 24       	eor	r1, r1
    16ba:	0b b6       	in	r0, 0x3b	; 59
    16bc:	0f 92       	push	r0
    16be:	2f 93       	push	r18
    16c0:	3f 93       	push	r19
    16c2:	4f 93       	push	r20
    16c4:	5f 93       	push	r21
    16c6:	6f 93       	push	r22
    16c8:	7f 93       	push	r23
    16ca:	8f 93       	push	r24
    16cc:	9f 93       	push	r25
    16ce:	af 93       	push	r26
    16d0:	bf 93       	push	r27
    16d2:	ef 93       	push	r30
    16d4:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    16d6:	e0 91 50 21 	lds	r30, 0x2150
    16da:	f0 91 51 21 	lds	r31, 0x2151
    16de:	30 97       	sbiw	r30, 0x00	; 0
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    16e2:	19 95       	eicall
	}
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0b be       	out	0x3b, r0	; 59
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    170a:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    170c:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    170e:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1710:	81 15       	cp	r24, r1
    1712:	28 e0       	ldi	r18, 0x08	; 8
    1714:	92 07       	cpc	r25, r18
    1716:	39 f4       	brne	.+14     	; 0x1726 <tc_enable+0x1c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	f6 d1       	rcall	.+1004   	; 0x1b0a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    171e:	64 e0       	ldi	r22, 0x04	; 4
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	f3 d1       	rcall	.+998    	; 0x1b0a <sysclk_enable_module>
    1724:	43 c0       	rjmp	.+134    	; 0x17ac <tc_enable+0xa2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1726:	80 34       	cpi	r24, 0x40	; 64
    1728:	28 e0       	ldi	r18, 0x08	; 8
    172a:	92 07       	cpc	r25, r18
    172c:	39 f4       	brne	.+14     	; 0x173c <tc_enable+0x32>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    172e:	62 e0       	ldi	r22, 0x02	; 2
    1730:	83 e0       	ldi	r24, 0x03	; 3
    1732:	eb d1       	rcall	.+982    	; 0x1b0a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1734:	64 e0       	ldi	r22, 0x04	; 4
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	e8 d1       	rcall	.+976    	; 0x1b0a <sysclk_enable_module>
    173a:	38 c0       	rjmp	.+112    	; 0x17ac <tc_enable+0xa2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    173c:	81 15       	cp	r24, r1
    173e:	29 e0       	ldi	r18, 0x09	; 9
    1740:	92 07       	cpc	r25, r18
    1742:	39 f4       	brne	.+14     	; 0x1752 <tc_enable+0x48>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	84 e0       	ldi	r24, 0x04	; 4
    1748:	e0 d1       	rcall	.+960    	; 0x1b0a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    174a:	64 e0       	ldi	r22, 0x04	; 4
    174c:	84 e0       	ldi	r24, 0x04	; 4
    174e:	dd d1       	rcall	.+954    	; 0x1b0a <sysclk_enable_module>
    1750:	2d c0       	rjmp	.+90     	; 0x17ac <tc_enable+0xa2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1752:	80 34       	cpi	r24, 0x40	; 64
    1754:	29 e0       	ldi	r18, 0x09	; 9
    1756:	92 07       	cpc	r25, r18
    1758:	39 f4       	brne	.+14     	; 0x1768 <tc_enable+0x5e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    175a:	62 e0       	ldi	r22, 0x02	; 2
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	d5 d1       	rcall	.+938    	; 0x1b0a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1760:	64 e0       	ldi	r22, 0x04	; 4
    1762:	84 e0       	ldi	r24, 0x04	; 4
    1764:	d2 d1       	rcall	.+932    	; 0x1b0a <sysclk_enable_module>
    1766:	22 c0       	rjmp	.+68     	; 0x17ac <tc_enable+0xa2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1768:	81 15       	cp	r24, r1
    176a:	2a e0       	ldi	r18, 0x0A	; 10
    176c:	92 07       	cpc	r25, r18
    176e:	39 f4       	brne	.+14     	; 0x177e <tc_enable+0x74>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1770:	61 e0       	ldi	r22, 0x01	; 1
    1772:	85 e0       	ldi	r24, 0x05	; 5
    1774:	ca d1       	rcall	.+916    	; 0x1b0a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1776:	64 e0       	ldi	r22, 0x04	; 4
    1778:	85 e0       	ldi	r24, 0x05	; 5
    177a:	c7 d1       	rcall	.+910    	; 0x1b0a <sysclk_enable_module>
    177c:	17 c0       	rjmp	.+46     	; 0x17ac <tc_enable+0xa2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    177e:	80 34       	cpi	r24, 0x40	; 64
    1780:	2a e0       	ldi	r18, 0x0A	; 10
    1782:	92 07       	cpc	r25, r18
    1784:	39 f4       	brne	.+14     	; 0x1794 <tc_enable+0x8a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1786:	62 e0       	ldi	r22, 0x02	; 2
    1788:	85 e0       	ldi	r24, 0x05	; 5
    178a:	bf d1       	rcall	.+894    	; 0x1b0a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    178c:	64 e0       	ldi	r22, 0x04	; 4
    178e:	85 e0       	ldi	r24, 0x05	; 5
    1790:	bc d1       	rcall	.+888    	; 0x1b0a <sysclk_enable_module>
    1792:	0c c0       	rjmp	.+24     	; 0x17ac <tc_enable+0xa2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1794:	81 15       	cp	r24, r1
    1796:	9b 40       	sbci	r25, 0x0B	; 11
    1798:	39 f4       	brne	.+14     	; 0x17a8 <tc_enable+0x9e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	86 e0       	ldi	r24, 0x06	; 6
    179e:	b5 d1       	rcall	.+874    	; 0x1b0a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    17a0:	64 e0       	ldi	r22, 0x04	; 4
    17a2:	86 e0       	ldi	r24, 0x06	; 6
    17a4:	b2 d1       	rcall	.+868    	; 0x1b0a <sysclk_enable_module>
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <tc_enable+0xa2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17a8:	cf bf       	out	0x3f, r28	; 63
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <tc_enable+0xb4>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    17ac:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    17ae:	f8 94       	cli
    17b0:	ef e5       	ldi	r30, 0x5F	; 95
    17b2:	fa e2       	ldi	r31, 0x2A	; 42
    17b4:	90 81       	ld	r25, Z
    17b6:	9f 5f       	subi	r25, 0xFF	; 255
    17b8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17ba:	8f bf       	out	0x3f, r24	; 63
    17bc:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <ui_init>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    17c2:	e0 ee       	ldi	r30, 0xE0	; 224
    17c4:	f7 e0       	ldi	r31, 0x07	; 7
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	85 83       	std	Z+5, r24	; 0x05
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	85 83       	std	Z+5, r24	; 0x05
    17ce:	08 95       	ret

000017d0 <ui_powerdown>:
    17d0:	e0 ee       	ldi	r30, 0xE0	; 224
    17d2:	f7 e0       	ldi	r31, 0x07	; 7
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	85 83       	std	Z+5, r24	; 0x05
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	85 83       	std	Z+5, r24	; 0x05
    17dc:	08 95       	ret

000017de <ui_wakeup_enable>:
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	58 e1       	ldi	r21, 0x18	; 24
    17e2:	60 e2       	ldi	r22, 0x20	; 32
    17e4:	80 e8       	ldi	r24, 0x80	; 128
    17e6:	96 e0       	ldi	r25, 0x06	; 6
    17e8:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <ioport_configure_port_pin>
	PORT_t *port;
	// Configure pin change interrupt for asynch. wake-up on button pin.
	ioport_configure_pin(GPIO_PUSH_BUTTON_0,
			IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	port = ioport_pin_to_port(GPIO_PUSH_BUTTON_0);
	port->INT0MASK = 0xFF;
    17ec:	e0 e8       	ldi	r30, 0x80	; 128
    17ee:	f6 e0       	ldi	r31, 0x06	; 6
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	82 87       	std	Z+10, r24	; 0x0a
	port->INTCTRL = PORT_INT0LVL_LO_gc;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	81 87       	std	Z+9, r24	; 0x09
    17f8:	08 95       	ret

000017fa <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
	PORT_t *port;
	port = ioport_pin_to_port(GPIO_PUSH_BUTTON_0);
	port->INT0MASK = 0x00;
    17fa:	e0 e8       	ldi	r30, 0x80	; 128
    17fc:	f6 e0       	ldi	r31, 0x06	; 6
    17fe:	12 86       	std	Z+10, r1	; 0x0a
    1800:	08 95       	ret

00001802 <__vector_43>:
 * Note:
 * This interrupt is enable when the USB host enable remotewakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
ISR(PORTE_INT0_vect)
{
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	0b b6       	in	r0, 0x3b	; 59
    180e:	0f 92       	push	r0
    1810:	2f 93       	push	r18
    1812:	3f 93       	push	r19
    1814:	4f 93       	push	r20
    1816:	5f 93       	push	r21
    1818:	6f 93       	push	r22
    181a:	7f 93       	push	r23
    181c:	8f 93       	push	r24
    181e:	9f 93       	push	r25
    1820:	af 93       	push	r26
    1822:	bf 93       	push	r27
    1824:	ef 93       	push	r30
    1826:	ff 93       	push	r31
	PORT_t *port;
	port = ioport_pin_to_port(GPIO_PUSH_BUTTON_0);
	port->INTFLAGS = 0x01; // Ack interrupt
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	e0 e8       	ldi	r30, 0x80	; 128
    182c:	f6 e0       	ldi	r31, 0x06	; 6
    182e:	84 87       	std	Z+12, r24	; 0x0c
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
    1830:	0e 94 39 16 	call	0x2c72	; 0x2c72 <udd_send_remotewakeup>
	// It is a wakeup then send wakeup USB
	udc_remotewakeup();
}
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	7f 91       	pop	r23
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	0f 90       	pop	r0
    184e:	0b be       	out	0x3b, r0	; 59
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <ui_wakeup>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	e0 ee       	ldi	r30, 0xE0	; 224
    185e:	f7 e0       	ldi	r31, 0x07	; 7
    1860:	86 83       	std	Z+6, r24	; 0x06
    1862:	08 95       	ret

00001864 <ui_process>:
{
	LED_On(LED0_GPIO);
}

void ui_process(uint16_t framenumber)
{
    1864:	ac 01       	movw	r20, r24
	bool b_btn_state;
	static bool btn0_last_state = false;
	static uint8_t cpt_sof = 0;

	if ((framenumber % 1000) == 0) {
    1866:	9c 01       	movw	r18, r24
    1868:	36 95       	lsr	r19
    186a:	27 95       	ror	r18
    186c:	36 95       	lsr	r19
    186e:	27 95       	ror	r18
    1870:	36 95       	lsr	r19
    1872:	27 95       	ror	r18
    1874:	a5 ec       	ldi	r26, 0xC5	; 197
    1876:	b0 e2       	ldi	r27, 0x20	; 32
    1878:	0e 94 49 19 	call	0x3292	; 0x3292 <__umulhisi3>
    187c:	9c 01       	movw	r18, r24
    187e:	32 95       	swap	r19
    1880:	22 95       	swap	r18
    1882:	2f 70       	andi	r18, 0x0F	; 15
    1884:	23 27       	eor	r18, r19
    1886:	3f 70       	andi	r19, 0x0F	; 15
    1888:	23 27       	eor	r18, r19
    188a:	68 ee       	ldi	r22, 0xE8	; 232
    188c:	73 e0       	ldi	r23, 0x03	; 3
    188e:	26 9f       	mul	r18, r22
    1890:	c0 01       	movw	r24, r0
    1892:	27 9f       	mul	r18, r23
    1894:	90 0d       	add	r25, r0
    1896:	36 9f       	mul	r19, r22
    1898:	90 0d       	add	r25, r0
    189a:	11 24       	eor	r1, r1
    189c:	9a 01       	movw	r18, r20
    189e:	28 1b       	sub	r18, r24
    18a0:	39 0b       	sbc	r19, r25
    18a2:	29 f4       	brne	.+10     	; 0x18ae <ui_process+0x4a>
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	e0 ee       	ldi	r30, 0xE0	; 224
    18a8:	f7 e0       	ldi	r31, 0x07	; 7
    18aa:	86 83       	std	Z+6, r24	; 0x06
    18ac:	07 c0       	rjmp	.+14     	; 0x18bc <ui_process+0x58>
		LED_On(LED1_GPIO);
	}
	if ((framenumber % 1000) == 500) {
    18ae:	24 3f       	cpi	r18, 0xF4	; 244
    18b0:	31 40       	sbci	r19, 0x01	; 1
    18b2:	21 f4       	brne	.+8      	; 0x18bc <ui_process+0x58>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	e0 ee       	ldi	r30, 0xE0	; 224
    18b8:	f7 e0       	ldi	r31, 0x07	; 7
    18ba:	85 83       	std	Z+5, r24	; 0x05
		LED_Off(LED1_GPIO);
	}
	
	if (adc_data_dlbusy) {
    18bc:	80 91 5d 2a 	lds	r24, 0x2A5D
    18c0:	88 23       	and	r24, r24
    18c2:	c1 f0       	breq	.+48     	; 0x18f4 <ui_process+0x90>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	e0 ee       	ldi	r30, 0xE0	; 224
    18c8:	f7 e0       	ldi	r31, 0x07	; 7
    18ca:	86 83       	std	Z+6, r24	; 0x06
		LED_On(LED0_GPIO);
		if (udi_hid_generic_send_report_in(adc_data_hid + adc_indx)){
    18cc:	80 91 52 21 	lds	r24, 0x2152
    18d0:	90 91 53 21 	lds	r25, 0x2153
    18d4:	8d 5a       	subi	r24, 0xAD	; 173
    18d6:	9d 4d       	sbci	r25, 0xDD	; 221
    18d8:	0e 94 a4 02 	call	0x548	; 0x548 <udi_hid_generic_send_report_in>
    18dc:	88 23       	and	r24, r24
    18de:	51 f0       	breq	.+20     	; 0x18f4 <ui_process+0x90>
			adc_indx += UDI_HID_REPORT_IN_SIZE;
    18e0:	80 91 52 21 	lds	r24, 0x2152
    18e4:	90 91 53 21 	lds	r25, 0x2153
    18e8:	80 5c       	subi	r24, 0xC0	; 192
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	80 93 52 21 	sts	0x2152, r24
    18f0:	90 93 53 21 	sts	0x2153, r25
		}
	}	
	
	if (adc_indx >= (ADC_DATA_LENGTH*2-UDI_HID_REPORT_IN_SIZE)){
    18f4:	80 91 52 21 	lds	r24, 0x2152
    18f8:	90 91 53 21 	lds	r25, 0x2153
    18fc:	80 3c       	cpi	r24, 0xC0	; 192
    18fe:	97 40       	sbci	r25, 0x07	; 7
    1900:	30 f0       	brcs	.+12     	; 0x190e <ui_process+0xaa>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	e0 ee       	ldi	r30, 0xE0	; 224
    1906:	f7 e0       	ldi	r31, 0x07	; 7
    1908:	85 83       	std	Z+5, r24	; 0x05
		LED_Off(LED0_GPIO);
		adc_data_dlbusy = false;
    190a:	10 92 5d 2a 	sts	0x2A5D, r1
	}
	
	// Scan process running each 40ms
	cpt_sof++;
    190e:	80 91 54 21 	lds	r24, 0x2154
    1912:	8f 5f       	subi	r24, 0xFF	; 255
	if (40 > cpt_sof)
    1914:	88 32       	cpi	r24, 0x28	; 40
    1916:	18 f4       	brcc	.+6      	; 0x191e <ui_process+0xba>
		LED_Off(LED0_GPIO);
		adc_data_dlbusy = false;
	}
	
	// Scan process running each 40ms
	cpt_sof++;
    1918:	80 93 54 21 	sts	0x2154, r24
    191c:	08 95       	ret
	if (40 > cpt_sof)
	return;
	cpt_sof = 0;
    191e:	10 92 54 21 	sts	0x2154, r1

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    1922:	e0 e8       	ldi	r30, 0x80	; 128
    1924:	f6 e0       	ldi	r31, 0x06	; 6
    1926:	80 85       	ldd	r24, Z+8	; 0x08

	// Scan buttons on switch 0 and 1
	b_btn_state = (gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) ? true : false;
	if (b_btn_state != btn0_last_state) {
		if (b_btn_state){
    1928:	85 fd       	sbrc	r24, 5
    192a:	07 c0       	rjmp	.+14     	; 0x193a <ui_process+0xd6>
			adc_indx = 0;
    192c:	10 92 52 21 	sts	0x2152, r1
    1930:	10 92 53 21 	sts	0x2153, r1
			adc_data_busy = true;	
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	80 93 5b 2a 	sts	0x2A5B, r24
    193a:	08 95       	ret

0000193c <ui_led_change>:
	}	
}

void ui_led_change(uint8_t *report)
{
	if (report[0]=='1') {
    193c:	fc 01       	movw	r30, r24
    193e:	20 81       	ld	r18, Z
    1940:	21 33       	cpi	r18, 0x31	; 49
    1942:	81 f4       	brne	.+32     	; 0x1964 <ui_led_change+0x28>
		// A led must be on
		switch(report[1]) {
    1944:	81 81       	ldd	r24, Z+1	; 0x01
    1946:	82 33       	cpi	r24, 0x32	; 50
    1948:	19 f0       	breq	.+6      	; 0x1950 <ui_led_change+0x14>
    194a:	83 33       	cpi	r24, 0x33	; 51
    194c:	d9 f4       	brne	.+54     	; 0x1984 <ui_led_change+0x48>
    194e:	05 c0       	rjmp	.+10     	; 0x195a <ui_led_change+0x1e>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1950:	80 e1       	ldi	r24, 0x10	; 16
    1952:	e0 e6       	ldi	r30, 0x60	; 96
    1954:	f6 e0       	ldi	r31, 0x06	; 6
    1956:	86 83       	std	Z+6, r24	; 0x06
    1958:	08 95       	ret
    195a:	80 e2       	ldi	r24, 0x20	; 32
    195c:	e0 e6       	ldi	r30, 0x60	; 96
    195e:	f6 e0       	ldi	r31, 0x06	; 6
    1960:	86 83       	std	Z+6, r24	; 0x06
    1962:	08 95       	ret
			LED_On(LED3_GPIO);
			break;
		}
		} else {
		// A led must be off
		switch(report[1]) {
    1964:	fc 01       	movw	r30, r24
    1966:	81 81       	ldd	r24, Z+1	; 0x01
    1968:	82 33       	cpi	r24, 0x32	; 50
    196a:	19 f0       	breq	.+6      	; 0x1972 <ui_led_change+0x36>
    196c:	83 33       	cpi	r24, 0x33	; 51
    196e:	51 f4       	brne	.+20     	; 0x1984 <ui_led_change+0x48>
    1970:	05 c0       	rjmp	.+10     	; 0x197c <ui_led_change+0x40>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1972:	80 e1       	ldi	r24, 0x10	; 16
    1974:	e0 e6       	ldi	r30, 0x60	; 96
    1976:	f6 e0       	ldi	r31, 0x06	; 6
    1978:	85 83       	std	Z+5, r24	; 0x05
    197a:	08 95       	ret
    197c:	80 e2       	ldi	r24, 0x20	; 32
    197e:	e0 e6       	ldi	r30, 0x60	; 96
    1980:	f6 e0       	ldi	r31, 0x06	; 6
    1982:	85 83       	std	Z+5, r24	; 0x05
    1984:	08 95       	ret

00001986 <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
	sysclk_init();
    1986:	51 d0       	rcall	.+162    	; 0x1a2a <sysclk_init>
	irq_initialize_vectors();
    1988:	87 e0       	ldi	r24, 0x07	; 7
    198a:	e0 ea       	ldi	r30, 0xA0	; 160
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    1990:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1992:	10 92 5e 2a 	sts	0x2A5E, r1
    1996:	10 92 5f 2a 	sts	0x2A5F, r1
    199a:	10 92 60 2a 	sts	0x2A60, r1
    199e:	10 92 61 2a 	sts	0x2A61, r1
    19a2:	10 92 62 2a 	sts	0x2A62, r1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	80 93 63 2a 	sts	0x2A63, r24

	// Initialize the sleep manager
	sleepmgr_init();

	board_init();
    19ac:	0e 94 0b 19 	call	0x3216	; 0x3216 <board_init>
	ui_init();
    19b0:	08 df       	rcall	.-496    	; 0x17c2 <ui_init>
	ui_powerdown();
    19b2:	0e df       	rcall	.-484    	; 0x17d0 <ui_powerdown>

	// Start USB stack to authorize VBus monitoring
	udc_start();
    19b4:	a4 d2       	rcall	.+1352   	; 0x1efe <udc_start>
	
	adc_init();
    19b6:	0e 94 5f 01 	call	0x2be	; 0x2be <adc_init>
	dma_init();
    19ba:	0e 94 20 01 	call	0x240	; 0x240 <dma_init>
	
	//Start clock for DUT
	timer_setup();
    19be:	0e 94 da 01 	call	0x3b4	; 0x3b4 <timer_setup>
	
	interrupt_setup();
    19c2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <interrupt_setup>
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
		//sleepmgr_enter_sleep();
		
		if(adc_data_busy){
    19c6:	80 91 5b 2a 	lds	r24, 0x2A5B
    19ca:	88 23       	and	r24, r24
    19cc:	e1 f3       	breq	.-8      	; 0x19c6 <main+0x40>
			dma_init();
    19ce:	0e 94 20 01 	call	0x240	; 0x240 <dma_init>
			adc_go();
    19d2:	0e 94 b6 01 	call	0x36c	; 0x36c <adc_go>
			adc_data_busy = false;
    19d6:	10 92 5b 2a 	sts	0x2A5B, r1
    19da:	f5 cf       	rjmp	.-22     	; 0x19c6 <main+0x40>

000019dc <main_suspend_action>:
	}
}

void main_suspend_action(void)
{
	ui_powerdown();
    19dc:	f9 ce       	rjmp	.-526    	; 0x17d0 <ui_powerdown>
    19de:	08 95       	ret

000019e0 <main_resume_action>:
}

void main_resume_action(void)
{
	ui_wakeup();
    19e0:	3c cf       	rjmp	.-392    	; 0x185a <ui_wakeup>
    19e2:	08 95       	ret

000019e4 <main_sof_action>:
}

void main_sof_action(void)
{
	if (!main_b_generic_enable)
    19e4:	80 91 55 21 	lds	r24, 0x2155
    19e8:	88 23       	and	r24, r24
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <main_sof_action+0xe>
	return;
	ui_process(udd_get_frame_number());
    19ec:	0e 94 32 16 	call	0x2c64	; 0x2c64 <udd_get_frame_number>
    19f0:	39 cf       	rjmp	.-398    	; 0x1864 <ui_process>
    19f2:	08 95       	ret

000019f4 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void)
{
	ui_wakeup_enable();
    19f4:	f4 ce       	rjmp	.-536    	; 0x17de <ui_wakeup_enable>
    19f6:	08 95       	ret

000019f8 <main_remotewakeup_disable>:
}

void main_remotewakeup_disable(void)
{
	ui_wakeup_disable();
    19f8:	00 cf       	rjmp	.-512    	; 0x17fa <ui_wakeup_disable>
    19fa:	08 95       	ret

000019fc <main_generic_enable>:
}

bool main_generic_enable(void)
{
	main_b_generic_enable = true;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	80 93 55 21 	sts	0x2155, r24
	return true;
}
    1a02:	08 95       	ret

00001a04 <main_generic_disable>:

void main_generic_disable(void)
{
	main_b_generic_enable = false;
    1a04:	10 92 55 21 	sts	0x2155, r1
    1a08:	08 95       	ret

00001a0a <main_hid_set_feature>:
}


void main_hid_set_feature(uint8_t* report)
{
	if (report[0] == 0xAA && report[1] == 0x55
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	20 81       	ld	r18, Z
    1a0e:	2a 3a       	cpi	r18, 0xAA	; 170
    1a10:	59 f4       	brne	.+22     	; 0x1a28 <main_hid_set_feature+0x1e>
    1a12:	21 81       	ldd	r18, Z+1	; 0x01
    1a14:	25 35       	cpi	r18, 0x55	; 85
    1a16:	41 f4       	brne	.+16     	; 0x1a28 <main_hid_set_feature+0x1e>
	&& report[2] == 0xAA && report[3] == 0x55) {
    1a18:	22 81       	ldd	r18, Z+2	; 0x02
    1a1a:	2a 3a       	cpi	r18, 0xAA	; 170
    1a1c:	29 f4       	brne	.+10     	; 0x1a28 <main_hid_set_feature+0x1e>
    1a1e:	83 81       	ldd	r24, Z+3	; 0x03
    1a20:	85 35       	cpi	r24, 0x55	; 85
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <main_hid_set_feature+0x1e>
		// Disconnect USB Device
		udc_stop();
    1a24:	97 d2       	rcall	.+1326   	; 0x1f54 <udc_stop>
		ui_powerdown();
    1a26:	d4 ce       	rjmp	.-600    	; 0x17d0 <ui_powerdown>
    1a28:	08 95       	ret

00001a2a <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <sysclk_init+0xa>
    1a34:	1f 92       	push	r1
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	80 93 70 00 	sts	0x0070, r24
    1a40:	80 93 71 00 	sts	0x0071, r24
    1a44:	80 93 72 00 	sts	0x0072, r24
    1a48:	80 93 73 00 	sts	0x0073, r24
    1a4c:	80 93 74 00 	sts	0x0074, r24
    1a50:	80 93 75 00 	sts	0x0075, r24
    1a54:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    1a58:	65 e0       	ldi	r22, 0x05	; 5
    1a5a:	81 e4       	ldi	r24, 0x41	; 65
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a8 d0       	rcall	.+336    	; 0x1bb0 <ccp_write_io>
    1a60:	6c e1       	ldi	r22, 0x1C	; 28
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	aa d0       	rcall	.+340    	; 0x1bbc <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    1a68:	8a 83       	std	Y+2, r24	; 0x02
    1a6a:	6d e1       	ldi	r22, 0x1D	; 29
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	a5 d0       	rcall	.+330    	; 0x1bbc <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    1a72:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	21 f4       	brne	.+8      	; 0x1a84 <sysclk_init+0x5a>
		cal = 0x2340;
    1a7c:	80 e4       	ldi	r24, 0x40	; 64
    1a7e:	93 e2       	ldi	r25, 0x23	; 35
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	8b 83       	std	Y+3, r24	; 0x03
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    1a8c:	e0 e6       	ldi	r30, 0x60	; 96
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    1a92:	8c 81       	ldd	r24, Y+4	; 0x04
    1a94:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a96:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1a98:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1a9a:	e0 e5       	ldi	r30, 0x50	; 80
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	90 81       	ld	r25, Z
    1aa0:	92 60       	ori	r25, 0x02	; 2
    1aa2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1aa4:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1aa6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1aa8:	81 ff       	sbrs	r24, 1
    1aaa:	fd cf       	rjmp	.-6      	; 0x1aa6 <sysclk_init+0x7c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1aac:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1aae:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1ab0:	00 e5       	ldi	r16, 0x50	; 80
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
    1ab4:	d8 01       	movw	r26, r16
    1ab6:	16 96       	adiw	r26, 0x06	; 6
    1ab8:	9c 91       	ld	r25, X
    1aba:	16 97       	sbiw	r26, 0x06	; 6
    1abc:	99 7f       	andi	r25, 0xF9	; 249
    1abe:	16 96       	adiw	r26, 0x06	; 6
    1ac0:	9c 93       	st	X, r25
    1ac2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1ac4:	e0 e6       	ldi	r30, 0x60	; 96
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	90 e8       	ldi	r25, 0x80	; 128
    1aca:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1acc:	9b eb       	ldi	r25, 0xBB	; 187
    1ace:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1ad0:	16 96       	adiw	r26, 0x06	; 6
    1ad2:	9c 91       	ld	r25, X
    1ad4:	16 97       	sbiw	r26, 0x06	; 6
    1ad6:	94 60       	ori	r25, 0x04	; 4
    1ad8:	16 96       	adiw	r26, 0x06	; 6
    1ada:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1adc:	90 81       	ld	r25, Z
    1ade:	91 60       	ori	r25, 0x01	; 1
    1ae0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ae2:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	80 e4       	ldi	r24, 0x40	; 64
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	62 d0       	rcall	.+196    	; 0x1bb0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1aec:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1aee:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1af0:	f8 01       	movw	r30, r16
    1af2:	90 81       	ld	r25, Z
    1af4:	9e 7f       	andi	r25, 0xFE	; 254
    1af6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1af8:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1afa:	24 96       	adiw	r28, 0x04	; 4
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	08 95       	ret

00001b0a <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b0a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1b0c:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1b0e:	e8 2f       	mov	r30, r24
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	e0 59       	subi	r30, 0x90	; 144
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 95       	com	r22
    1b18:	80 81       	ld	r24, Z
    1b1a:	68 23       	and	r22, r24
    1b1c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b1e:	9f bf       	out	0x3f, r25	; 63
    1b20:	08 95       	ret

00001b22 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b22:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1b24:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1b26:	e8 2f       	mov	r30, r24
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	e0 59       	subi	r30, 0x90	; 144
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	68 2b       	or	r22, r24
    1b32:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b34:	9f bf       	out	0x3f, r25	; 63
    1b36:	08 95       	ret

00001b38 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1b38:	86 30       	cpi	r24, 0x06	; 6
    1b3a:	11 f4       	brne	.+4      	; 0x1b40 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    1b3c:	68 e1       	ldi	r22, 0x18	; 24
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    1b40:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1b42:	e0 e5       	ldi	r30, 0x50	; 80
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1b48:	81 fd       	sbrc	r24, 1
    1b4a:	24 c0       	rjmp	.+72     	; 0x1b94 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b4c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1b4e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1b50:	90 81       	ld	r25, Z
    1b52:	92 60       	ori	r25, 0x02	; 2
    1b54:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b56:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1b58:	81 81       	ldd	r24, Z+1	; 0x01
    1b5a:	81 ff       	sbrs	r24, 1
    1b5c:	fd cf       	rjmp	.-6      	; 0x1b58 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b5e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1b60:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1b62:	a0 e5       	ldi	r26, 0x50	; 80
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	16 96       	adiw	r26, 0x06	; 6
    1b68:	9c 91       	ld	r25, X
    1b6a:	16 97       	sbiw	r26, 0x06	; 6
    1b6c:	99 7f       	andi	r25, 0xF9	; 249
    1b6e:	16 96       	adiw	r26, 0x06	; 6
    1b70:	9c 93       	st	X, r25
    1b72:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1b74:	e0 e6       	ldi	r30, 0x60	; 96
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	90 e8       	ldi	r25, 0x80	; 128
    1b7a:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1b7c:	9b eb       	ldi	r25, 0xBB	; 187
    1b7e:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1b80:	16 96       	adiw	r26, 0x06	; 6
    1b82:	9c 91       	ld	r25, X
    1b84:	16 97       	sbiw	r26, 0x06	; 6
    1b86:	94 60       	ori	r25, 0x04	; 4
    1b88:	16 96       	adiw	r26, 0x06	; 6
    1b8a:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1b8c:	90 81       	ld	r25, Z
    1b8e:	91 60       	ori	r25, 0x01	; 1
    1b90:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b92:	8f bf       	out	0x3f, r24	; 63
#ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1b94:	63 60       	ori	r22, 0x03	; 3
    1b96:	84 e4       	ldi	r24, 0x44	; 68
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0a d0       	rcall	.+20     	; 0x1bb0 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1b9c:	60 e4       	ldi	r22, 0x40	; 64
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	b4 cf       	rjmp	.-152    	; 0x1b0a <sysclk_enable_module>

00001ba2 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1ba2:	60 e4       	ldi	r22, 0x40	; 64
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	bd df       	rcall	.-134    	; 0x1b22 <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	84 e4       	ldi	r24, 0x44	; 68
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	00 c0       	rjmp	.+0      	; 0x1bb0 <ccp_write_io>

00001bb0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1bb0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1bb2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1bb4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1bb6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1bb8:	60 83       	st	Z, r22
	ret                             // Return to caller
    1bba:	08 95       	ret

00001bbc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1bbc:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1bc0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1bc2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1bc4:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1bc8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1bca:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1bce:	08 95       	ret

00001bd0 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    1bd6:	40 91 64 2a 	lds	r20, 0x2A64
    1bda:	44 23       	and	r20, r20
    1bdc:	0c f0       	brlt	.+2      	; 0x1be0 <udi_hid_setup+0x10>
    1bde:	65 c0       	rjmp	.+202    	; 0x1caa <udi_hid_setup+0xda>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1be0:	40 76       	andi	r20, 0x60	; 96
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <udi_hid_setup+0x16>
    1be4:	40 c0       	rjmp	.+128    	; 0x1c66 <udi_hid_setup+0x96>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1be6:	20 91 65 2a 	lds	r18, 0x2A65
    1bea:	26 30       	cpi	r18, 0x06	; 6
    1bec:	e1 f5       	brne	.+120    	; 0x1c66 <udi_hid_setup+0x96>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1bee:	82 d1       	rcall	.+772    	; 0x1ef4 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	22 85       	ldd	r18, Z+10	; 0x0a
    1bf4:	21 32       	cpi	r18, 0x21	; 33
    1bf6:	99 f5       	brne	.+102    	; 0x1c5e <udi_hid_setup+0x8e>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1bf8:	20 91 67 2a 	lds	r18, 0x2A67
    1bfc:	21 32       	cpi	r18, 0x21	; 33
    1bfe:	b9 f4       	brne	.+46     	; 0x1c2e <udi_hid_setup+0x5e>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    1c00:	9c 01       	movw	r18, r24
    1c02:	27 5f       	subi	r18, 0xF7	; 247
    1c04:	3f 4f       	sbci	r19, 0xFF	; 255
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1c06:	20 93 6c 2a 	sts	0x2A6C, r18
    1c0a:	30 93 6d 2a 	sts	0x2A6D, r19
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    1c0e:	40 91 6a 2a 	lds	r20, 0x2A6A
    1c12:	50 91 6b 2a 	lds	r21, 0x2A6B
    1c16:	21 85       	ldd	r18, Z+9	; 0x09
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	42 17       	cp	r20, r18
    1c1c:	53 07       	cpc	r21, r19
    1c1e:	08 f4       	brcc	.+2      	; 0x1c22 <udi_hid_setup+0x52>
    1c20:	9a 01       	movw	r18, r20
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    1c22:	20 93 6e 2a 	sts	0x2A6E, r18
    1c26:	30 93 6f 2a 	sts	0x2A6F, r19
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	69 c0       	rjmp	.+210    	; 0x1d00 <udi_hid_setup+0x130>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1c2e:	fc 01       	movw	r30, r24
    1c30:	37 85       	ldd	r19, Z+15	; 0x0f
    1c32:	23 13       	cpse	r18, r19
    1c34:	16 c0       	rjmp	.+44     	; 0x1c62 <udi_hid_setup+0x92>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1c36:	c0 93 6c 2a 	sts	0x2A6C, r28
    1c3a:	d0 93 6d 2a 	sts	0x2A6D, r29
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    1c3e:	20 89       	ldd	r18, Z+16	; 0x10
    1c40:	31 89       	ldd	r19, Z+17	; 0x11
    1c42:	80 91 6a 2a 	lds	r24, 0x2A6A
    1c46:	90 91 6b 2a 	lds	r25, 0x2A6B
    1c4a:	28 17       	cp	r18, r24
    1c4c:	39 07       	cpc	r19, r25
    1c4e:	08 f4       	brcc	.+2      	; 0x1c52 <udi_hid_setup+0x82>
    1c50:	c9 01       	movw	r24, r18
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    1c52:	80 93 6e 2a 	sts	0x2A6E, r24
    1c56:	90 93 6f 2a 	sts	0x2A6F, r25
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	51 c0       	rjmp	.+162    	; 0x1d00 <udi_hid_setup+0x130>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	4f c0       	rjmp	.+158    	; 0x1d00 <udi_hid_setup+0x130>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1c62:	80 e0       	ldi	r24, 0x00	; 0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    1c64:	4d c0       	rjmp	.+154    	; 0x1d00 <udi_hid_setup+0x130>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1c66:	40 32       	cpi	r20, 0x20	; 32
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <udi_hid_setup+0x9c>
    1c6a:	41 c0       	rjmp	.+130    	; 0x1cee <udi_hid_setup+0x11e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1c6c:	20 91 65 2a 	lds	r18, 0x2A65
    1c70:	22 30       	cpi	r18, 0x02	; 2
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <udi_hid_setup+0xaa>
    1c74:	23 30       	cpi	r18, 0x03	; 3
    1c76:	e9 f5       	brne	.+122    	; 0x1cf2 <udi_hid_setup+0x122>
    1c78:	0c c0       	rjmp	.+24     	; 0x1c92 <udi_hid_setup+0xc2>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1c7a:	80 93 6c 2a 	sts	0x2A6C, r24
    1c7e:	90 93 6d 2a 	sts	0x2A6D, r25
				udd_g_ctrlreq.payload_size = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	80 93 6e 2a 	sts	0x2A6E, r24
    1c8a:	90 93 6f 2a 	sts	0x2A6F, r25
				return true;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	37 c0       	rjmp	.+110    	; 0x1d00 <udi_hid_setup+0x130>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1c92:	60 93 6c 2a 	sts	0x2A6C, r22
    1c96:	70 93 6d 2a 	sts	0x2A6D, r23
				udd_g_ctrlreq.payload_size = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	80 93 6e 2a 	sts	0x2A6E, r24
    1ca2:	90 93 6f 2a 	sts	0x2A6F, r25
				return true;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	2b c0       	rjmp	.+86     	; 0x1d00 <udi_hid_setup+0x130>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1caa:	40 76       	andi	r20, 0x60	; 96
    1cac:	40 32       	cpi	r20, 0x20	; 32
    1cae:	19 f5       	brne	.+70     	; 0x1cf6 <udi_hid_setup+0x126>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1cb0:	40 91 65 2a 	lds	r20, 0x2A65
    1cb4:	49 30       	cpi	r20, 0x09	; 9
    1cb6:	31 f0       	breq	.+12     	; 0x1cc4 <udi_hid_setup+0xf4>
    1cb8:	00 f1       	brcs	.+64     	; 0x1cfa <udi_hid_setup+0x12a>
    1cba:	4a 30       	cpi	r20, 0x0A	; 10
    1cbc:	31 f0       	breq	.+12     	; 0x1cca <udi_hid_setup+0xfa>
    1cbe:	4b 30       	cpi	r20, 0x0B	; 11
    1cc0:	e1 f4       	brne	.+56     	; 0x1cfa <udi_hid_setup+0x12a>
    1cc2:	09 c0       	rjmp	.+18     	; 0x1cd6 <udi_hid_setup+0x106>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
    1cc4:	f9 01       	movw	r30, r18
    1cc6:	19 95       	eicall
    1cc8:	1b c0       	rjmp	.+54     	; 0x1d00 <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1cca:	20 91 67 2a 	lds	r18, 0x2A67
    1cce:	fc 01       	movw	r30, r24
    1cd0:	20 83       	st	Z, r18
				return true;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	15 c0       	rjmp	.+42     	; 0x1d00 <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    1cd6:	80 91 6a 2a 	lds	r24, 0x2A6A
    1cda:	90 91 6b 2a 	lds	r25, 0x2A6B
    1cde:	89 2b       	or	r24, r25
    1ce0:	71 f4       	brne	.+28     	; 0x1cfe <udi_hid_setup+0x12e>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1ce2:	80 91 66 2a 	lds	r24, 0x2A66
    1ce6:	fb 01       	movw	r30, r22
    1ce8:	80 83       	st	Z, r24
				return true;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	09 c0       	rjmp	.+18     	; 0x1d00 <udi_hid_setup+0x130>
			}
		}
	}
	return false;	// Request not supported
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	07 c0       	rjmp	.+14     	; 0x1d00 <udi_hid_setup+0x130>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <udi_hid_setup+0x130>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <udi_hid_setup+0x130>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	01 c0       	rjmp	.+2      	; 0x1d00 <udi_hid_setup+0x130>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	08 95       	ret

00001d06 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1d06:	e0 91 59 21 	lds	r30, 0x2159
    1d0a:	f0 91 5a 21 	lds	r31, 0x215A
    1d0e:	01 90       	ld	r0, Z+
    1d10:	f0 81       	ld	r31, Z
    1d12:	e0 2d       	mov	r30, r0
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1d14:	22 81       	ldd	r18, Z+2	; 0x02
    1d16:	33 81       	ldd	r19, Z+3	; 0x03
    1d18:	2e 0f       	add	r18, r30
    1d1a:	3f 1f       	adc	r19, r31
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    1d1c:	82 2f       	mov	r24, r18
    1d1e:	93 2f       	mov	r25, r19
    1d20:	08 95       	ret

00001d22 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	ec 01       	movw	r28, r24
    1d2a:	16 2f       	mov	r17, r22
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    1d2c:	ec df       	rcall	.-40     	; 0x1d06 <udc_get_eof_conf>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1d2e:	28 81       	ld	r18, Y
    1d30:	fe 01       	movw	r30, r28
    1d32:	e2 0f       	add	r30, r18
    1d34:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1d36:	e8 17       	cp	r30, r24
    1d38:	f9 07       	cpc	r31, r25
    1d3a:	a0 f4       	brcc	.+40     	; 0x1d64 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1d3c:	21 81       	ldd	r18, Z+1	; 0x01
    1d3e:	24 30       	cpi	r18, 0x04	; 4
    1d40:	a1 f0       	breq	.+40     	; 0x1d6a <udc_next_desc_in_iface+0x48>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1d42:	21 13       	cpse	r18, r17
    1d44:	06 c0       	rjmp	.+12     	; 0x1d52 <udc_next_desc_in_iface+0x30>
    1d46:	16 c0       	rjmp	.+44     	; 0x1d74 <udc_next_desc_in_iface+0x52>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1d48:	21 81       	ldd	r18, Z+1	; 0x01
    1d4a:	24 30       	cpi	r18, 0x04	; 4
    1d4c:	89 f0       	breq	.+34     	; 0x1d70 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1d4e:	21 17       	cp	r18, r17
    1d50:	89 f0       	breq	.+34     	; 0x1d74 <udc_next_desc_in_iface+0x52>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1d52:	20 81       	ld	r18, Z
    1d54:	e2 0f       	add	r30, r18
    1d56:	f1 1d       	adc	r31, r1
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1d58:	e8 17       	cp	r30, r24
    1d5a:	f9 07       	cpc	r31, r25
    1d5c:	a8 f3       	brcs	.-22     	; 0x1d48 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    1d5e:	e0 e0       	ldi	r30, 0x00	; 0
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	08 c0       	rjmp	.+16     	; 0x1d74 <udc_next_desc_in_iface+0x52>
    1d64:	e0 e0       	ldi	r30, 0x00	; 0
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <udc_next_desc_in_iface+0x52>
    1d6a:	e0 e0       	ldi	r30, 0x00	; 0
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <udc_next_desc_in_iface+0x52>
    1d70:	e0 e0       	ldi	r30, 0x00	; 0
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
}
    1d74:	8e 2f       	mov	r24, r30
    1d76:	9f 2f       	mov	r25, r31
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	08 95       	ret

00001d80 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	18 2f       	mov	r17, r24
    1d8a:	06 2f       	mov	r16, r22
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    1d8c:	80 91 58 21 	lds	r24, 0x2158
    1d90:	88 23       	and	r24, r24
    1d92:	69 f1       	breq	.+90     	; 0x1dee <udc_update_iface_desc+0x6e>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d94:	e0 91 59 21 	lds	r30, 0x2159
    1d98:	f0 91 5a 21 	lds	r31, 0x215A
    1d9c:	c0 81       	ld	r28, Z
    1d9e:	d1 81       	ldd	r29, Z+1	; 0x01
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	18 17       	cp	r17, r24
    1da4:	30 f5       	brcc	.+76     	; 0x1df2 <udc_update_iface_desc+0x72>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1da6:	c0 93 56 21 	sts	0x2156, r28
    1daa:	d0 93 57 21 	sts	0x2157, r29
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    1dae:	ab df       	rcall	.-170    	; 0x1d06 <udc_get_eof_conf>
    1db0:	9c 01       	movw	r18, r24
	while (ptr_end_desc >
    1db2:	c8 17       	cp	r28, r24
    1db4:	d9 07       	cpc	r29, r25
    1db6:	f8 f4       	brcc	.+62     	; 0x1df6 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1db8:	99 81       	ldd	r25, Y+1	; 0x01
    1dba:	94 30       	cpi	r25, 0x04	; 4
    1dbc:	61 f4       	brne	.+24     	; 0x1dd6 <udc_update_iface_desc+0x56>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	91 13       	cpse	r25, r17
    1dc2:	09 c0       	rjmp	.+18     	; 0x1dd6 <udc_update_iface_desc+0x56>
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	80 13       	cpse	r24, r16
    1dc8:	06 c0       	rjmp	.+12     	; 0x1dd6 <udc_update_iface_desc+0x56>
    1dca:	c0 93 56 21 	sts	0x2156, r28
    1dce:	d0 93 57 21 	sts	0x2157, r29
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	11 c0       	rjmp	.+34     	; 0x1df8 <udc_update_iface_desc+0x78>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1dd6:	98 81       	ld	r25, Y
    1dd8:	c9 0f       	add	r28, r25
    1dda:	d1 1d       	adc	r29, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    1ddc:	c2 17       	cp	r28, r18
    1dde:	d3 07       	cpc	r29, r19
    1de0:	58 f3       	brcs	.-42     	; 0x1db8 <udc_update_iface_desc+0x38>
    1de2:	c0 93 56 21 	sts	0x2156, r28
    1de6:	d0 93 57 21 	sts	0x2157, r29
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	05 c0       	rjmp	.+10     	; 0x1df8 <udc_update_iface_desc+0x78>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	03 c0       	rjmp	.+6      	; 0x1df8 <udc_update_iface_desc+0x78>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <udc_update_iface_desc+0x78>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    1df6:	80 e0       	ldi	r24, 0x00	; 0
}
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	08 95       	ret

00001e02 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1e02:	80 91 66 2a 	lds	r24, 0x2A66
    1e06:	8f 77       	andi	r24, 0x7F	; 127
    1e08:	27 c7       	rjmp	.+3662   	; 0x2c58 <udd_set_address>

00001e0a <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    1e0a:	1f 93       	push	r17
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1e12:	b6 df       	rcall	.-148    	; 0x1d80 <udc_update_iface_desc>
    1e14:	88 23       	and	r24, r24
    1e16:	41 f1       	breq	.+80     	; 0x1e68 <udc_iface_enable+0x5e>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1e18:	c0 91 56 21 	lds	r28, 0x2156
    1e1c:	d0 91 57 21 	lds	r29, 0x2157
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1e20:	65 e0       	ldi	r22, 0x05	; 5
    1e22:	ce 01       	movw	r24, r28
    1e24:	7e df       	rcall	.-260    	; 0x1d22 <udc_next_desc_in_iface>
    1e26:	ec 01       	movw	r28, r24
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	41 f0       	breq	.+16     	; 0x1e3c <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1e2c:	4c 81       	ldd	r20, Y+4	; 0x04
    1e2e:	5d 81       	ldd	r21, Y+5	; 0x05
    1e30:	6b 81       	ldd	r22, Y+3	; 0x03
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	36 d7       	rcall	.+3692   	; 0x2ca2 <udd_ep_alloc>
    1e36:	81 11       	cpse	r24, r1
    1e38:	f3 cf       	rjmp	.-26     	; 0x1e20 <udc_iface_enable+0x16>
    1e3a:	17 c0       	rjmp	.+46     	; 0x1e6a <udc_iface_enable+0x60>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1e3c:	a0 91 59 21 	lds	r26, 0x2159
    1e40:	b0 91 5a 21 	lds	r27, 0x215A
    1e44:	81 2f       	mov	r24, r17
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	12 96       	adiw	r26, 0x02	; 2
    1e4e:	ed 91       	ld	r30, X+
    1e50:	fc 91       	ld	r31, X
    1e52:	13 97       	sbiw	r26, 0x03	; 3
    1e54:	e8 0f       	add	r30, r24
    1e56:	f9 1f       	adc	r31, r25
    1e58:	01 90       	ld	r0, Z+
    1e5a:	f0 81       	ld	r31, Z
    1e5c:	e0 2d       	mov	r30, r0
    1e5e:	01 90       	ld	r0, Z+
    1e60:	f0 81       	ld	r31, Z
    1e62:	e0 2d       	mov	r30, r0
    1e64:	19 95       	eicall
    1e66:	01 c0       	rjmp	.+2      	; 0x1e6a <udc_iface_enable+0x60>
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
    1e68:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	08 95       	ret

00001e72 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	c8 2f       	mov	r28, r24
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	80 df       	rcall	.-256    	; 0x1d80 <udc_update_iface_desc>
    1e80:	88 23       	and	r24, r24
    1e82:	81 f1       	breq	.+96     	; 0x1ee4 <udc_iface_disable+0x72>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e84:	a0 91 59 21 	lds	r26, 0x2159
    1e88:	b0 91 5a 21 	lds	r27, 0x215A
    1e8c:	ec 2f       	mov	r30, r28
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	12 96       	adiw	r26, 0x02	; 2
    1e96:	2d 91       	ld	r18, X+
    1e98:	3c 91       	ld	r19, X
    1e9a:	13 97       	sbiw	r26, 0x03	; 3
    1e9c:	e2 0f       	add	r30, r18
    1e9e:	f3 1f       	adc	r31, r19
    1ea0:	00 81       	ld	r16, Z
    1ea2:	11 81       	ldd	r17, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1ea4:	d8 01       	movw	r26, r16
    1ea6:	16 96       	adiw	r26, 0x06	; 6
    1ea8:	ed 91       	ld	r30, X+
    1eaa:	fc 91       	ld	r31, X
    1eac:	17 97       	sbiw	r26, 0x07	; 7
    1eae:	19 95       	eicall
    1eb0:	68 2f       	mov	r22, r24
    1eb2:	8c 2f       	mov	r24, r28
    1eb4:	65 df       	rcall	.-310    	; 0x1d80 <udc_update_iface_desc>
    1eb6:	88 23       	and	r24, r24
    1eb8:	b9 f0       	breq	.+46     	; 0x1ee8 <udc_iface_disable+0x76>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1eba:	c0 91 56 21 	lds	r28, 0x2156
    1ebe:	d0 91 57 21 	lds	r29, 0x2157
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1ec2:	65 e0       	ldi	r22, 0x05	; 5
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	2d df       	rcall	.-422    	; 0x1d22 <udc_next_desc_in_iface>
    1ec8:	ec 01       	movw	r28, r24
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	19 f0       	breq	.+6      	; 0x1ed4 <udc_iface_disable+0x62>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	de d7       	rcall	.+4028   	; 0x2e8e <udd_ep_free>
		}
    1ed2:	f7 cf       	rjmp	.-18     	; 0x1ec2 <udc_iface_disable+0x50>
	}
#endif

	// Disable interface
	udi_api->disable();
    1ed4:	d8 01       	movw	r26, r16
    1ed6:	12 96       	adiw	r26, 0x02	; 2
    1ed8:	ed 91       	ld	r30, X+
    1eda:	fc 91       	ld	r31, X
    1edc:	13 97       	sbiw	r26, 0x03	; 3
    1ede:	19 95       	eicall
	return true;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	03 c0       	rjmp	.+6      	; 0x1eea <udc_iface_disable+0x78>
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <udc_iface_disable+0x78>
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	08 95       	ret

00001ef4 <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    1ef4:	80 91 56 21 	lds	r24, 0x2156
    1ef8:	90 91 57 21 	lds	r25, 0x2157
    1efc:	08 95       	ret

00001efe <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    1efe:	38 c6       	rjmp	.+3184   	; 0x2b70 <udd_enable>
    1f00:	08 95       	ret

00001f02 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    1f02:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1f04:	80 91 58 21 	lds	r24, 0x2158
    1f08:	88 23       	and	r24, r24
    1f0a:	c1 f0       	breq	.+48     	; 0x1f3c <udc_reset+0x3a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f0c:	e0 91 59 21 	lds	r30, 0x2159
    1f10:	f0 91 5a 21 	lds	r31, 0x215A
    1f14:	01 90       	ld	r0, Z+
    1f16:	f0 81       	ld	r31, Z
    1f18:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1f1a:	84 81       	ldd	r24, Z+4	; 0x04
    1f1c:	88 23       	and	r24, r24
    1f1e:	71 f0       	breq	.+28     	; 0x1f3c <udc_reset+0x3a>
    1f20:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    1f22:	8c 2f       	mov	r24, r28
    1f24:	a6 df       	rcall	.-180    	; 0x1e72 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1f26:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f28:	e0 91 59 21 	lds	r30, 0x2159
    1f2c:	f0 91 5a 21 	lds	r31, 0x215A
    1f30:	01 90       	ld	r0, Z+
    1f32:	f0 81       	ld	r31, Z
    1f34:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1f36:	84 81       	ldd	r24, Z+4	; 0x04
    1f38:	c8 17       	cp	r28, r24
    1f3a:	98 f3       	brcs	.-26     	; 0x1f22 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    1f3c:	10 92 58 21 	sts	0x2158, r1
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    1f40:	80 91 5b 21 	lds	r24, 0x215B
    1f44:	81 fd       	sbrc	r24, 1
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    1f46:	58 dd       	rcall	.-1360   	; 0x19f8 <main_remotewakeup_disable>
	}
#endif
	udc_device_status =
    1f48:	10 92 5b 21 	sts	0x215B, r1
    1f4c:	10 92 5c 21 	sts	0x215C, r1
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    1f54:	d1 d5       	rcall	.+2978   	; 0x2af8 <udd_disable>
	udc_reset();
    1f56:	d5 cf       	rjmp	.-86     	; 0x1f02 <udc_reset>

00001f58 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1f58:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1f5a:	80 91 58 21 	lds	r24, 0x2158
    1f5e:	88 23       	and	r24, r24
    1f60:	41 f1       	breq	.+80     	; 0x1fb2 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f62:	e0 91 59 21 	lds	r30, 0x2159
    1f66:	f0 91 5a 21 	lds	r31, 0x215A
    1f6a:	a0 81       	ld	r26, Z
    1f6c:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1f6e:	14 96       	adiw	r26, 0x04	; 4
    1f70:	8c 91       	ld	r24, X
    1f72:	88 23       	and	r24, r24
    1f74:	f1 f0       	breq	.+60     	; 0x1fb2 <udc_sof_notify+0x5a>
    1f76:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1f78:	8c 2f       	mov	r24, r28
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	02 80       	ldd	r0, Z+2	; 0x02
    1f82:	f3 81       	ldd	r31, Z+3	; 0x03
    1f84:	e0 2d       	mov	r30, r0
    1f86:	e8 0f       	add	r30, r24
    1f88:	f9 1f       	adc	r31, r25
    1f8a:	01 90       	ld	r0, Z+
    1f8c:	f0 81       	ld	r31, Z
    1f8e:	e0 2d       	mov	r30, r0
    1f90:	00 84       	ldd	r0, Z+8	; 0x08
    1f92:	f1 85       	ldd	r31, Z+9	; 0x09
    1f94:	e0 2d       	mov	r30, r0
    1f96:	30 97       	sbiw	r30, 0x00	; 0
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1f9a:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1f9c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f9e:	e0 91 59 21 	lds	r30, 0x2159
    1fa2:	f0 91 5a 21 	lds	r31, 0x215A
    1fa6:	a0 81       	ld	r26, Z
    1fa8:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1faa:	14 96       	adiw	r26, 0x04	; 4
    1fac:	8c 91       	ld	r24, X
    1fae:	c8 17       	cp	r28, r24
    1fb0:	18 f3       	brcs	.-58     	; 0x1f78 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1fb2:	cf 91       	pop	r28
    1fb4:	08 95       	ret

00001fb6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1fc0:	10 92 6e 2a 	sts	0x2A6E, r1
    1fc4:	10 92 6f 2a 	sts	0x2A6F, r1
	udd_g_ctrlreq.callback = NULL;
    1fc8:	10 92 70 2a 	sts	0x2A70, r1
    1fcc:	10 92 71 2a 	sts	0x2A71, r1
	udd_g_ctrlreq.over_under_run = NULL;
    1fd0:	10 92 72 2a 	sts	0x2A72, r1
    1fd4:	10 92 73 2a 	sts	0x2A73, r1

	if (Udd_setup_is_in()) {
    1fd8:	20 91 64 2a 	lds	r18, 0x2A64
    1fdc:	22 23       	and	r18, r18
    1fde:	0c f0       	brlt	.+2      	; 0x1fe2 <udc_process_setup+0x2c>
    1fe0:	8d c2       	rjmp	.+1306   	; 0x24fc <udc_process_setup+0x546>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1fe2:	80 91 6a 2a 	lds	r24, 0x2A6A
    1fe6:	90 91 6b 2a 	lds	r25, 0x2A6B
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <udc_process_setup+0x3a>
    1fee:	8b c2       	rjmp	.+1302   	; 0x2506 <udc_process_setup+0x550>
    1ff0:	7d c2       	rjmp	.+1274   	; 0x24ec <udc_process_setup+0x536>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ff2:	2f 71       	andi	r18, 0x1F	; 31
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <udc_process_setup+0x42>
    1ff6:	9d c0       	rjmp	.+314    	; 0x2132 <udc_process_setup+0x17c>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ff8:	30 91 65 2a 	lds	r19, 0x2A65
    1ffc:	36 30       	cpi	r19, 0x06	; 6
    1ffe:	81 f0       	breq	.+32     	; 0x2020 <udc_process_setup+0x6a>
    2000:	38 30       	cpi	r19, 0x08	; 8
    2002:	09 f4       	brne	.+2      	; 0x2006 <udc_process_setup+0x50>
    2004:	8b c0       	rjmp	.+278    	; 0x211c <udc_process_setup+0x166>
    2006:	31 11       	cpse	r19, r1
    2008:	94 c0       	rjmp	.+296    	; 0x2132 <udc_process_setup+0x17c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    200a:	02 97       	sbiw	r24, 0x02	; 2
    200c:	39 f4       	brne	.+14     	; 0x201c <udc_process_setup+0x66>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    200e:	62 e0       	ldi	r22, 0x02	; 2
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	8b e5       	ldi	r24, 0x5B	; 91
    2014:	91 e2       	ldi	r25, 0x21	; 33
    2016:	3c d6       	rcall	.+3192   	; 0x2c90 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	f1 c1       	rjmp	.+994    	; 0x23fe <udc_process_setup+0x448>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	ef c1       	rjmp	.+990    	; 0x23fe <udc_process_setup+0x448>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2020:	20 91 66 2a 	lds	r18, 0x2A66
    2024:	30 91 67 2a 	lds	r19, 0x2A67
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2028:	83 2f       	mov	r24, r19
    202a:	99 27       	eor	r25, r25
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    202c:	82 30       	cpi	r24, 0x02	; 2
    202e:	91 05       	cpc	r25, r1
    2030:	79 f0       	breq	.+30     	; 0x2050 <udc_process_setup+0x9a>
    2032:	83 30       	cpi	r24, 0x03	; 3
    2034:	91 05       	cpc	r25, r1
    2036:	69 f1       	breq	.+90     	; 0x2092 <udc_process_setup+0xdc>
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	09 f0       	breq	.+2      	; 0x203e <udc_process_setup+0x88>
    203c:	67 c0       	rjmp	.+206    	; 0x210c <udc_process_setup+0x156>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    203e:	80 91 3f 20 	lds	r24, 0x203F
    2042:	90 91 40 20 	lds	r25, 0x2040
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    2046:	dc 01       	movw	r26, r24
    2048:	6c 91       	ld	r22, X
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	21 d6       	rcall	.+3138   	; 0x2c90 <udd_set_setup_payload>
    204e:	4d c0       	rjmp	.+154    	; 0x20ea <udc_process_setup+0x134>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    2050:	e0 91 3f 20 	lds	r30, 0x203F
    2054:	f0 91 40 20 	lds	r31, 0x2040
    2058:	81 89       	ldd	r24, Z+17	; 0x11
    205a:	28 17       	cp	r18, r24
    205c:	08 f0       	brcs	.+2      	; 0x2060 <udc_process_setup+0xaa>
    205e:	58 c0       	rjmp	.+176    	; 0x2110 <udc_process_setup+0x15a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    2060:	c9 01       	movw	r24, r18
    2062:	99 27       	eor	r25, r25
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	e0 91 41 20 	lds	r30, 0x2041
    2070:	f0 91 42 20 	lds	r31, 0x2042
    2074:	e8 0f       	add	r30, r24
    2076:	f9 1f       	adc	r31, r25
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    207c:	fc 01       	movw	r30, r24
    207e:	62 81       	ldd	r22, Z+2	; 0x02
    2080:	73 81       	ldd	r23, Z+3	; 0x03
    2082:	06 d6       	rcall	.+3084   	; 0x2c90 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    2084:	e0 91 6c 2a 	lds	r30, 0x2A6C
    2088:	f0 91 6d 2a 	lds	r31, 0x2A6D
    208c:	82 e0       	ldi	r24, 0x02	; 2
    208e:	81 83       	std	Z+1, r24	; 0x01
    2090:	2c c0       	rjmp	.+88     	; 0x20ea <udc_process_setup+0x134>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    2092:	33 27       	eor	r19, r19
    2094:	21 30       	cpi	r18, 0x01	; 1
    2096:	31 05       	cpc	r19, r1
    2098:	59 f0       	breq	.+22     	; 0x20b0 <udc_process_setup+0xfa>
    209a:	20 f0       	brcs	.+8      	; 0x20a4 <udc_process_setup+0xee>
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	c9 f5       	brne	.+114    	; 0x2114 <udc_process_setup+0x15e>
    20a2:	0a c0       	rjmp	.+20     	; 0x20b8 <udc_process_setup+0x102>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    20a4:	64 e0       	ldi	r22, 0x04	; 4
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	86 e8       	ldi	r24, 0x86	; 134
    20aa:	90 e2       	ldi	r25, 0x20	; 32
    20ac:	f1 d5       	rcall	.+3042   	; 0x2c90 <udd_set_setup_payload>
    20ae:	1d c0       	rjmp	.+58     	; 0x20ea <udc_process_setup+0x134>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    20b0:	8a e8       	ldi	r24, 0x8A	; 138
    20b2:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    20b4:	29 e0       	ldi	r18, 0x09	; 9
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <udc_process_setup+0x108>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    20b8:	84 e9       	ldi	r24, 0x94	; 148
    20ba:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    20bc:	2b e0       	ldi	r18, 0x0B	; 11
    20be:	38 2f       	mov	r19, r24
    20c0:	e2 ea       	ldi	r30, 0xA2	; 162
    20c2:	f0 e2       	ldi	r31, 0x20	; 32
    20c4:	a8 2f       	mov	r26, r24
    20c6:	b9 2f       	mov	r27, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    20c8:	8d 91       	ld	r24, X+
    20ca:	80 83       	st	Z, r24
    20cc:	11 82       	std	Z+1, r1	; 0x01
    20ce:	32 96       	adiw	r30, 0x02	; 2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    20d0:	8a 2f       	mov	r24, r26
    20d2:	83 1b       	sub	r24, r19
    20d4:	82 17       	cp	r24, r18
    20d6:	c0 f3       	brcs	.-16     	; 0x20c8 <udc_process_setup+0x112>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    20d8:	22 0f       	add	r18, r18
    20da:	62 2f       	mov	r22, r18
    20dc:	6e 5f       	subi	r22, 0xFE	; 254
    20de:	60 93 a0 20 	sts	0x20A0, r22
		udd_set_setup_payload(
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	80 ea       	ldi	r24, 0xA0	; 160
    20e6:	90 e2       	ldi	r25, 0x20	; 32
    20e8:	d3 d5       	rcall	.+2982   	; 0x2c90 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    20ea:	80 91 6a 2a 	lds	r24, 0x2A6A
    20ee:	90 91 6b 2a 	lds	r25, 0x2A6B
    20f2:	20 91 6e 2a 	lds	r18, 0x2A6E
    20f6:	30 91 6f 2a 	lds	r19, 0x2A6F
    20fa:	82 17       	cp	r24, r18
    20fc:	93 07       	cpc	r25, r19
    20fe:	60 f4       	brcc	.+24     	; 0x2118 <udc_process_setup+0x162>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    2100:	80 93 6e 2a 	sts	0x2A6E, r24
    2104:	90 93 6f 2a 	sts	0x2A6F, r25
	}
	return true;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	79 c1       	rjmp	.+754    	; 0x23fe <udc_process_setup+0x448>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	77 c1       	rjmp	.+750    	; 0x23fe <udc_process_setup+0x448>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	75 c1       	rjmp	.+746    	; 0x23fe <udc_process_setup+0x448>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	73 c1       	rjmp	.+742    	; 0x23fe <udc_process_setup+0x448>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	71 c1       	rjmp	.+738    	; 0x23fe <udc_process_setup+0x448>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	39 f4       	brne	.+14     	; 0x212e <udc_process_setup+0x178>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    2120:	61 e0       	ldi	r22, 0x01	; 1
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	88 e5       	ldi	r24, 0x58	; 88
    2126:	91 e2       	ldi	r25, 0x21	; 33
    2128:	b3 d5       	rcall	.+2918   	; 0x2c90 <udd_set_setup_payload>
	return true;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	68 c1       	rjmp	.+720    	; 0x23fe <udc_process_setup+0x448>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	66 c1       	rjmp	.+716    	; 0x23fe <udc_process_setup+0x448>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2132:	21 30       	cpi	r18, 0x01	; 1
    2134:	09 f0       	breq	.+2      	; 0x2138 <udc_process_setup+0x182>
    2136:	40 c0       	rjmp	.+128    	; 0x21b8 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    2138:	30 91 65 2a 	lds	r19, 0x2A65
    213c:	3a 30       	cpi	r19, 0x0A	; 10
    213e:	e1 f5       	brne	.+120    	; 0x21b8 <udc_process_setup+0x202>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	91 f5       	brne	.+100    	; 0x21a8 <udc_process_setup+0x1f2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    2144:	80 91 58 21 	lds	r24, 0x2158
    2148:	88 23       	and	r24, r24
    214a:	81 f1       	breq	.+96     	; 0x21ac <udc_process_setup+0x1f6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    214c:	c0 91 68 2a 	lds	r28, 0x2A68
    2150:	d0 91 69 2a 	lds	r29, 0x2A69
    2154:	8c 2f       	mov	r24, r28
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2156:	00 91 59 21 	lds	r16, 0x2159
    215a:	10 91 5a 21 	lds	r17, 0x215A
    215e:	d8 01       	movw	r26, r16
    2160:	ed 91       	ld	r30, X+
    2162:	fc 91       	ld	r31, X
    2164:	94 81       	ldd	r25, Z+4	; 0x04
    2166:	c9 17       	cp	r28, r25
    2168:	18 f5       	brcc	.+70     	; 0x21b0 <udc_process_setup+0x1fa>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    216a:	60 e0       	ldi	r22, 0x00	; 0
    216c:	09 de       	rcall	.-1006   	; 0x1d80 <udc_update_iface_desc>
    216e:	88 23       	and	r24, r24
    2170:	09 f1       	breq	.+66     	; 0x21b4 <udc_process_setup+0x1fe>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2172:	ce 01       	movw	r24, r28
    2174:	99 27       	eor	r25, r25
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	d8 01       	movw	r26, r16
    217c:	12 96       	adiw	r26, 0x02	; 2
    217e:	ed 91       	ld	r30, X+
    2180:	fc 91       	ld	r31, X
    2182:	13 97       	sbiw	r26, 0x03	; 3
    2184:	e8 0f       	add	r30, r24
    2186:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    2188:	01 90       	ld	r0, Z+
    218a:	f0 81       	ld	r31, Z
    218c:	e0 2d       	mov	r30, r0
    218e:	86 81       	ldd	r24, Z+6	; 0x06
    2190:	97 81       	ldd	r25, Z+7	; 0x07
    2192:	fc 01       	movw	r30, r24
    2194:	19 95       	eicall
    2196:	80 93 5d 21 	sts	0x215D, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    219a:	61 e0       	ldi	r22, 0x01	; 1
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	8d e5       	ldi	r24, 0x5D	; 93
    21a0:	91 e2       	ldi	r25, 0x21	; 33
    21a2:	76 d5       	rcall	.+2796   	; 0x2c90 <udd_set_setup_payload>
	return true;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	2b c1       	rjmp	.+598    	; 0x23fe <udc_process_setup+0x448>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	29 c1       	rjmp	.+594    	; 0x23fe <udc_process_setup+0x448>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	27 c1       	rjmp	.+590    	; 0x23fe <udc_process_setup+0x448>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	25 c1       	rjmp	.+586    	; 0x23fe <udc_process_setup+0x448>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	23 c1       	rjmp	.+582    	; 0x23fe <udc_process_setup+0x448>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    21b8:	22 30       	cpi	r18, 0x02	; 2
    21ba:	09 f0       	breq	.+2      	; 0x21be <udc_process_setup+0x208>
    21bc:	22 c1       	rjmp	.+580    	; 0x2402 <udc_process_setup+0x44c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    21be:	20 91 65 2a 	lds	r18, 0x2A65
    21c2:	21 11       	cpse	r18, r1
    21c4:	19 c1       	rjmp	.+562    	; 0x23f8 <udc_process_setup+0x442>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    21c6:	02 97       	sbiw	r24, 0x02	; 2
    21c8:	71 f4       	brne	.+28     	; 0x21e6 <udc_process_setup+0x230>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    21ca:	80 91 68 2a 	lds	r24, 0x2A68
    21ce:	92 d5       	rcall	.+2852   	; 0x2cf4 <udd_ep_is_halted>
    21d0:	80 93 5e 21 	sts	0x215E, r24
    21d4:	10 92 5f 21 	sts	0x215F, r1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    21d8:	62 e0       	ldi	r22, 0x02	; 2
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	8e e5       	ldi	r24, 0x5E	; 94
    21de:	91 e2       	ldi	r25, 0x21	; 33
    21e0:	57 d5       	rcall	.+2734   	; 0x2c90 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	0c c1       	rjmp	.+536    	; 0x23fe <udc_process_setup+0x448>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	0a c1       	rjmp	.+532    	; 0x23fe <udc_process_setup+0x448>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    21ea:	2f 71       	andi	r18, 0x1F	; 31
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <udc_process_setup+0x23a>
    21ee:	ae c0       	rjmp	.+348    	; 0x234c <udc_process_setup+0x396>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    21f0:	80 91 65 2a 	lds	r24, 0x2A65
    21f4:	83 30       	cpi	r24, 0x03	; 3
    21f6:	b9 f1       	breq	.+110    	; 0x2266 <udc_process_setup+0x2b0>
    21f8:	20 f4       	brcc	.+8      	; 0x2202 <udc_process_setup+0x24c>
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	09 f0       	breq	.+2      	; 0x2200 <udc_process_setup+0x24a>
    21fe:	a6 c0       	rjmp	.+332    	; 0x234c <udc_process_setup+0x396>
    2200:	16 c0       	rjmp	.+44     	; 0x222e <udc_process_setup+0x278>
    2202:	85 30       	cpi	r24, 0x05	; 5
    2204:	21 f0       	breq	.+8      	; 0x220e <udc_process_setup+0x258>
    2206:	89 30       	cpi	r24, 0x09	; 9
    2208:	09 f0       	breq	.+2      	; 0x220c <udc_process_setup+0x256>
    220a:	a0 c0       	rjmp	.+320    	; 0x234c <udc_process_setup+0x396>
    220c:	48 c0       	rjmp	.+144    	; 0x229e <udc_process_setup+0x2e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    220e:	80 91 6a 2a 	lds	r24, 0x2A6A
    2212:	90 91 6b 2a 	lds	r25, 0x2A6B
    2216:	89 2b       	or	r24, r25
    2218:	41 f4       	brne	.+16     	; 0x222a <udc_process_setup+0x274>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	9f e0       	ldi	r25, 0x0F	; 15
    221e:	80 93 70 2a 	sts	0x2A70, r24
    2222:	90 93 71 2a 	sts	0x2A71, r25
	return true;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	ea c0       	rjmp	.+468    	; 0x23fe <udc_process_setup+0x448>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	e8 c0       	rjmp	.+464    	; 0x23fe <udc_process_setup+0x448>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    222e:	80 91 6a 2a 	lds	r24, 0x2A6A
    2232:	90 91 6b 2a 	lds	r25, 0x2A6B
    2236:	89 2b       	or	r24, r25
    2238:	91 f4       	brne	.+36     	; 0x225e <udc_process_setup+0x2a8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    223a:	80 91 66 2a 	lds	r24, 0x2A66
    223e:	90 91 67 2a 	lds	r25, 0x2A67
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	71 f4       	brne	.+28     	; 0x2262 <udc_process_setup+0x2ac>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2246:	80 91 5b 21 	lds	r24, 0x215B
    224a:	90 91 5c 21 	lds	r25, 0x215C
    224e:	8d 7f       	andi	r24, 0xFD	; 253
    2250:	80 93 5b 21 	sts	0x215B, r24
    2254:	90 93 5c 21 	sts	0x215C, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    2258:	cf db       	rcall	.-2146   	; 0x19f8 <main_remotewakeup_disable>
#endif
		return true;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	d0 c0       	rjmp	.+416    	; 0x23fe <udc_process_setup+0x448>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	ce c0       	rjmp	.+412    	; 0x23fe <udc_process_setup+0x448>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	cc c0       	rjmp	.+408    	; 0x23fe <udc_process_setup+0x448>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2266:	80 91 6a 2a 	lds	r24, 0x2A6A
    226a:	90 91 6b 2a 	lds	r25, 0x2A6B
    226e:	89 2b       	or	r24, r25
    2270:	91 f4       	brne	.+36     	; 0x2296 <udc_process_setup+0x2e0>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    2272:	80 91 66 2a 	lds	r24, 0x2A66
    2276:	90 91 67 2a 	lds	r25, 0x2A67
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	71 f4       	brne	.+28     	; 0x229a <udc_process_setup+0x2e4>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    227e:	80 91 5b 21 	lds	r24, 0x215B
    2282:	90 91 5c 21 	lds	r25, 0x215C
    2286:	82 60       	ori	r24, 0x02	; 2
    2288:	80 93 5b 21 	sts	0x215B, r24
    228c:	90 93 5c 21 	sts	0x215C, r25
		UDC_REMOTEWAKEUP_ENABLE();
    2290:	b1 db       	rcall	.-2206   	; 0x19f4 <main_remotewakeup_enable>
		return true;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	b4 c0       	rjmp	.+360    	; 0x23fe <udc_process_setup+0x448>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	b2 c0       	rjmp	.+356    	; 0x23fe <udc_process_setup+0x448>
		break;
#endif
	default:
		break;
	}
	return false;
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	b0 c0       	rjmp	.+352    	; 0x23fe <udc_process_setup+0x448>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    229e:	80 91 6a 2a 	lds	r24, 0x2A6A
    22a2:	90 91 6b 2a 	lds	r25, 0x2A6B
    22a6:	89 2b       	or	r24, r25
    22a8:	09 f0       	breq	.+2      	; 0x22ac <udc_process_setup+0x2f6>
    22aa:	44 c0       	rjmp	.+136    	; 0x2334 <udc_process_setup+0x37e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    22ac:	d8 d4       	rcall	.+2480   	; 0x2c5e <udd_getaddress>
    22ae:	88 23       	and	r24, r24
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <udc_process_setup+0x2fe>
    22b2:	42 c0       	rjmp	.+132    	; 0x2338 <udc_process_setup+0x382>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    22b4:	20 91 66 2a 	lds	r18, 0x2A66
    22b8:	30 91 67 2a 	lds	r19, 0x2A67
    22bc:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    22be:	e0 91 3f 20 	lds	r30, 0x203F
    22c2:	f0 91 40 20 	lds	r31, 0x2040
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    22c6:	81 89       	ldd	r24, Z+17	; 0x11
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	82 17       	cp	r24, r18
    22cc:	93 07       	cpc	r25, r19
    22ce:	b0 f1       	brcs	.+108    	; 0x233c <udc_process_setup+0x386>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    22d0:	18 de       	rcall	.-976    	; 0x1f02 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    22d2:	80 91 66 2a 	lds	r24, 0x2A66
    22d6:	90 91 67 2a 	lds	r25, 0x2A67
    22da:	80 93 58 21 	sts	0x2158, r24
	if (udc_num_configuration == 0) {
    22de:	88 23       	and	r24, r24
    22e0:	79 f1       	breq	.+94     	; 0x2340 <udc_process_setup+0x38a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    22e2:	99 27       	eor	r25, r25
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	e0 91 41 20 	lds	r30, 0x2041
    22f2:	f0 91 42 20 	lds	r31, 0x2042
    22f6:	e8 0f       	add	r30, r24
    22f8:	f9 1f       	adc	r31, r25
    22fa:	e0 93 59 21 	sts	0x2159, r30
    22fe:	f0 93 5a 21 	sts	0x215A, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2302:	01 90       	ld	r0, Z+
    2304:	f0 81       	ld	r31, Z
    2306:	e0 2d       	mov	r30, r0
    2308:	84 81       	ldd	r24, Z+4	; 0x04
    230a:	88 23       	and	r24, r24
    230c:	d9 f0       	breq	.+54     	; 0x2344 <udc_process_setup+0x38e>
    230e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	8c 2f       	mov	r24, r28
    2314:	7a dd       	rcall	.-1292   	; 0x1e0a <udc_iface_enable>
    2316:	88 23       	and	r24, r24
    2318:	b9 f0       	breq	.+46     	; 0x2348 <udc_process_setup+0x392>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    231a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    231c:	e0 91 59 21 	lds	r30, 0x2159
    2320:	f0 91 5a 21 	lds	r31, 0x215A
    2324:	01 90       	ld	r0, Z+
    2326:	f0 81       	ld	r31, Z
    2328:	e0 2d       	mov	r30, r0
    232a:	84 81       	ldd	r24, Z+4	; 0x04
    232c:	c8 17       	cp	r28, r24
    232e:	80 f3       	brcs	.-32     	; 0x2310 <udc_process_setup+0x35a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	65 c0       	rjmp	.+202    	; 0x23fe <udc_process_setup+0x448>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	63 c0       	rjmp	.+198    	; 0x23fe <udc_process_setup+0x448>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	61 c0       	rjmp	.+194    	; 0x23fe <udc_process_setup+0x448>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	5f c0       	rjmp	.+190    	; 0x23fe <udc_process_setup+0x448>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	5d c0       	rjmp	.+186    	; 0x23fe <udc_process_setup+0x448>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	5b c0       	rjmp	.+182    	; 0x23fe <udc_process_setup+0x448>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	59 c0       	rjmp	.+178    	; 0x23fe <udc_process_setup+0x448>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    234c:	21 30       	cpi	r18, 0x01	; 1
    234e:	01 f5       	brne	.+64     	; 0x2390 <udc_process_setup+0x3da>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    2350:	80 91 65 2a 	lds	r24, 0x2A65
    2354:	8b 30       	cpi	r24, 0x0B	; 11
    2356:	e1 f4       	brne	.+56     	; 0x2390 <udc_process_setup+0x3da>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    2358:	80 91 6a 2a 	lds	r24, 0x2A6A
    235c:	90 91 6b 2a 	lds	r25, 0x2A6B
    2360:	89 2b       	or	r24, r25
    2362:	81 f4       	brne	.+32     	; 0x2384 <udc_process_setup+0x3ce>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    2364:	80 91 58 21 	lds	r24, 0x2158
    2368:	88 23       	and	r24, r24
    236a:	71 f0       	breq	.+28     	; 0x2388 <udc_process_setup+0x3d2>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    236c:	c0 91 68 2a 	lds	r28, 0x2A68
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    2370:	d0 91 66 2a 	lds	r29, 0x2A66

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    2374:	8c 2f       	mov	r24, r28
    2376:	7d dd       	rcall	.-1286   	; 0x1e72 <udc_iface_disable>
    2378:	88 23       	and	r24, r24
    237a:	41 f0       	breq	.+16     	; 0x238c <udc_process_setup+0x3d6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    237c:	6d 2f       	mov	r22, r29
    237e:	8c 2f       	mov	r24, r28
    2380:	44 dd       	rcall	.-1400   	; 0x1e0a <udc_iface_enable>
    2382:	3d c0       	rjmp	.+122    	; 0x23fe <udc_process_setup+0x448>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	3b c0       	rjmp	.+118    	; 0x23fe <udc_process_setup+0x448>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	39 c0       	rjmp	.+114    	; 0x23fe <udc_process_setup+0x448>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	37 c0       	rjmp	.+110    	; 0x23fe <udc_process_setup+0x448>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	b9 f5       	brne	.+110    	; 0x2402 <udc_process_setup+0x44c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    2394:	80 91 65 2a 	lds	r24, 0x2A65
    2398:	81 30       	cpi	r24, 0x01	; 1
    239a:	19 f0       	breq	.+6      	; 0x23a2 <udc_process_setup+0x3ec>
    239c:	83 30       	cpi	r24, 0x03	; 3
    239e:	71 f5       	brne	.+92     	; 0x23fc <udc_process_setup+0x446>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    23a2:	80 91 6a 2a 	lds	r24, 0x2A6A
    23a6:	90 91 6b 2a 	lds	r25, 0x2A6B
    23aa:	89 2b       	or	r24, r25
    23ac:	51 f4       	brne	.+20     	; 0x23c2 <udc_process_setup+0x40c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    23ae:	80 91 66 2a 	lds	r24, 0x2A66
    23b2:	90 91 67 2a 	lds	r25, 0x2A67
    23b6:	89 2b       	or	r24, r25
    23b8:	31 f4       	brne	.+12     	; 0x23c6 <udc_process_setup+0x410>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    23ba:	80 91 68 2a 	lds	r24, 0x2A68
    23be:	a1 d4       	rcall	.+2370   	; 0x2d02 <udd_ep_clear_halt>
    23c0:	1e c0       	rjmp	.+60     	; 0x23fe <udc_process_setup+0x448>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	1c c0       	rjmp	.+56     	; 0x23fe <udc_process_setup+0x448>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	1a c0       	rjmp	.+52     	; 0x23fe <udc_process_setup+0x448>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    23ca:	80 91 6a 2a 	lds	r24, 0x2A6A
    23ce:	90 91 6b 2a 	lds	r25, 0x2A6B
    23d2:	89 2b       	or	r24, r25
    23d4:	69 f4       	brne	.+26     	; 0x23f0 <udc_process_setup+0x43a>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    23d6:	80 91 66 2a 	lds	r24, 0x2A66
    23da:	90 91 67 2a 	lds	r25, 0x2A67
    23de:	89 2b       	or	r24, r25
    23e0:	49 f4       	brne	.+18     	; 0x23f4 <udc_process_setup+0x43e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    23e2:	c8 e6       	ldi	r28, 0x68	; 104
    23e4:	da e2       	ldi	r29, 0x2A	; 42
    23e6:	88 81       	ld	r24, Y
    23e8:	1b d5       	rcall	.+2614   	; 0x2e20 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    23ea:	88 81       	ld	r24, Y
    23ec:	40 d5       	rcall	.+2688   	; 0x2e6e <udd_ep_set_halt>
    23ee:	07 c0       	rjmp	.+14     	; 0x23fe <udc_process_setup+0x448>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	05 c0       	rjmp	.+10     	; 0x23fe <udc_process_setup+0x448>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	03 c0       	rjmp	.+6      	; 0x23fe <udc_process_setup+0x448>
				break;
			}
		}
#endif
	}
	return false;
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <udc_process_setup+0x448>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    23fe:	81 11       	cpse	r24, r1
    2400:	77 c0       	rjmp	.+238    	; 0x24f0 <udc_process_setup+0x53a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    2402:	80 91 64 2a 	lds	r24, 0x2A64
    2406:	8f 71       	andi	r24, 0x1F	; 31
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	71 f5       	brne	.+92     	; 0x2468 <udc_process_setup+0x4b2>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    240c:	80 91 58 21 	lds	r24, 0x2158
    2410:	88 23       	and	r24, r24
    2412:	51 f1       	breq	.+84     	; 0x2468 <udc_process_setup+0x4b2>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2414:	00 91 68 2a 	lds	r16, 0x2A68
    2418:	10 91 69 2a 	lds	r17, 0x2A69
    241c:	f0 2e       	mov	r15, r16
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    241e:	c0 91 59 21 	lds	r28, 0x2159
    2422:	d0 91 5a 21 	lds	r29, 0x215A
    2426:	e8 81       	ld	r30, Y
    2428:	f9 81       	ldd	r31, Y+1	; 0x01
    242a:	84 81       	ldd	r24, Z+4	; 0x04
    242c:	08 17       	cp	r16, r24
    242e:	e0 f4       	brcc	.+56     	; 0x2468 <udc_process_setup+0x4b2>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	80 2f       	mov	r24, r16
    2434:	a5 dc       	rcall	.-1718   	; 0x1d80 <udc_update_iface_desc>
    2436:	88 23       	and	r24, r24
    2438:	b9 f0       	breq	.+46     	; 0x2468 <udc_process_setup+0x4b2>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    243a:	11 27       	eor	r17, r17
    243c:	98 01       	movw	r18, r16
    243e:	22 0f       	add	r18, r18
    2440:	33 1f       	adc	r19, r19
    2442:	ea 81       	ldd	r30, Y+2	; 0x02
    2444:	fb 81       	ldd	r31, Y+3	; 0x03
    2446:	e2 0f       	add	r30, r18
    2448:	f3 1f       	adc	r31, r19
    244a:	c0 81       	ld	r28, Z
    244c:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    244e:	ee 81       	ldd	r30, Y+6	; 0x06
    2450:	ff 81       	ldd	r31, Y+7	; 0x07
    2452:	19 95       	eicall
    2454:	68 2f       	mov	r22, r24
    2456:	8f 2d       	mov	r24, r15
    2458:	93 dc       	rcall	.-1754   	; 0x1d80 <udc_update_iface_desc>
    245a:	88 23       	and	r24, r24
    245c:	29 f0       	breq	.+10     	; 0x2468 <udc_process_setup+0x4b2>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    245e:	ec 81       	ldd	r30, Y+4	; 0x04
    2460:	fd 81       	ldd	r31, Y+5	; 0x05
    2462:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    2464:	81 11       	cpse	r24, r1
    2466:	46 c0       	rjmp	.+140    	; 0x24f4 <udc_process_setup+0x53e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    2468:	80 91 64 2a 	lds	r24, 0x2A64
    246c:	8f 71       	andi	r24, 0x1F	; 31
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	09 f0       	breq	.+2      	; 0x2474 <udc_process_setup+0x4be>
    2472:	42 c0       	rjmp	.+132    	; 0x24f8 <udc_process_setup+0x542>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    2474:	80 91 58 21 	lds	r24, 0x2158
    2478:	88 23       	and	r24, r24
    247a:	81 f1       	breq	.+96     	; 0x24dc <udc_process_setup+0x526>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    247c:	e0 91 59 21 	lds	r30, 0x2159
    2480:	f0 91 5a 21 	lds	r31, 0x215A
    2484:	a0 81       	ld	r26, Z
    2486:	b1 81       	ldd	r27, Z+1	; 0x01
    2488:	14 96       	adiw	r26, 0x04	; 4
    248a:	8c 91       	ld	r24, X
    248c:	88 23       	and	r24, r24
    248e:	41 f1       	breq	.+80     	; 0x24e0 <udc_process_setup+0x52a>
    2490:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    2492:	21 2f       	mov	r18, r17
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	02 80       	ldd	r0, Z+2	; 0x02
    249c:	f3 81       	ldd	r31, Z+3	; 0x03
    249e:	e0 2d       	mov	r30, r0
    24a0:	e2 0f       	add	r30, r18
    24a2:	f3 1f       	adc	r31, r19
    24a4:	c0 81       	ld	r28, Z
    24a6:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    24a8:	ee 81       	ldd	r30, Y+6	; 0x06
    24aa:	ff 81       	ldd	r31, Y+7	; 0x07
    24ac:	19 95       	eicall
    24ae:	68 2f       	mov	r22, r24
    24b0:	81 2f       	mov	r24, r17
    24b2:	66 dc       	rcall	.-1844   	; 0x1d80 <udc_update_iface_desc>
    24b4:	88 23       	and	r24, r24
    24b6:	b1 f0       	breq	.+44     	; 0x24e4 <udc_process_setup+0x52e>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    24b8:	ec 81       	ldd	r30, Y+4	; 0x04
    24ba:	fd 81       	ldd	r31, Y+5	; 0x05
    24bc:	19 95       	eicall
    24be:	81 11       	cpse	r24, r1
    24c0:	13 c0       	rjmp	.+38     	; 0x24e8 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    24c2:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    24c4:	e0 91 59 21 	lds	r30, 0x2159
    24c8:	f0 91 5a 21 	lds	r31, 0x215A
    24cc:	a0 81       	ld	r26, Z
    24ce:	b1 81       	ldd	r27, Z+1	; 0x01
    24d0:	14 96       	adiw	r26, 0x04	; 4
    24d2:	8c 91       	ld	r24, X
    24d4:	18 17       	cp	r17, r24
    24d6:	e8 f2       	brcs	.-70     	; 0x2492 <udc_process_setup+0x4dc>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	1a c0       	rjmp	.+52     	; 0x2510 <udc_process_setup+0x55a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	18 c0       	rjmp	.+48     	; 0x2510 <udc_process_setup+0x55a>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	16 c0       	rjmp	.+44     	; 0x2510 <udc_process_setup+0x55a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	14 c0       	rjmp	.+40     	; 0x2510 <udc_process_setup+0x55a>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	12 c0       	rjmp	.+36     	; 0x2510 <udc_process_setup+0x55a>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	10 c0       	rjmp	.+32     	; 0x2510 <udc_process_setup+0x55a>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	0e c0       	rjmp	.+28     	; 0x2510 <udc_process_setup+0x55a>
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	0c c0       	rjmp	.+24     	; 0x2510 <udc_process_setup+0x55a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	0a c0       	rjmp	.+20     	; 0x2510 <udc_process_setup+0x55a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    24fc:	82 2f       	mov	r24, r18
    24fe:	80 76       	andi	r24, 0x60	; 96
    2500:	09 f0       	breq	.+2      	; 0x2504 <udc_process_setup+0x54e>
    2502:	7f cf       	rjmp	.-258    	; 0x2402 <udc_process_setup+0x44c>
    2504:	72 ce       	rjmp	.-796    	; 0x21ea <udc_process_setup+0x234>
    2506:	32 2f       	mov	r19, r18
    2508:	30 76       	andi	r19, 0x60	; 96
    250a:	09 f0       	breq	.+2      	; 0x250e <udc_process_setup+0x558>
    250c:	7a cf       	rjmp	.-268    	; 0x2402 <udc_process_setup+0x44c>
    250e:	71 cd       	rjmp	.-1310   	; 0x1ff2 <udc_process_setup+0x3c>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	ff 90       	pop	r15
    251a:	08 95       	ret

0000251c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    251c:	81 11       	cpse	r24, r1
    251e:	18 c0       	rjmp	.+48     	; 0x2550 <udd_sleep_mode+0x34>
    2520:	90 91 c4 21 	lds	r25, 0x21C4
    2524:	99 23       	and	r25, r25
    2526:	89 f0       	breq	.+34     	; 0x254a <udd_sleep_mode+0x2e>
    2528:	9f b7       	in	r25, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	ef e5       	ldi	r30, 0x5F	; 95
    252e:	fa e2       	ldi	r31, 0x2A	; 42
    2530:	20 81       	ld	r18, Z
    2532:	21 50       	subi	r18, 0x01	; 1
    2534:	20 83       	st	Z, r18
    2536:	9f bf       	out	0x3f, r25	; 63
    2538:	08 c0       	rjmp	.+16     	; 0x254a <udd_sleep_mode+0x2e>
    253a:	9f b7       	in	r25, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	ef e5       	ldi	r30, 0x5F	; 95
    2540:	fa e2       	ldi	r31, 0x2A	; 42
    2542:	20 81       	ld	r18, Z
    2544:	2f 5f       	subi	r18, 0xFF	; 255
    2546:	20 83       	st	Z, r18
    2548:	9f bf       	out	0x3f, r25	; 63
    254a:	80 93 c4 21 	sts	0x21C4, r24
    254e:	08 95       	ret
    2550:	90 91 c4 21 	lds	r25, 0x21C4
    2554:	99 23       	and	r25, r25
    2556:	89 f3       	breq	.-30     	; 0x253a <udd_sleep_mode+0x1e>
    2558:	f8 cf       	rjmp	.-16     	; 0x254a <udd_sleep_mode+0x2e>

0000255a <udd_ep_get_ctrl>:
    255a:	28 2f       	mov	r18, r24
    255c:	2f 70       	andi	r18, 0x0F	; 15
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	22 0f       	add	r18, r18
    2562:	33 1f       	adc	r19, r19
    2564:	99 27       	eor	r25, r25
    2566:	87 fd       	sbrc	r24, 7
    2568:	90 95       	com	r25
    256a:	88 27       	eor	r24, r24
    256c:	99 0f       	add	r25, r25
    256e:	88 1f       	adc	r24, r24
    2570:	99 27       	eor	r25, r25
    2572:	28 0f       	add	r18, r24
    2574:	39 1f       	adc	r19, r25
    2576:	22 0f       	add	r18, r18
    2578:	33 1f       	adc	r19, r19
    257a:	22 0f       	add	r18, r18
    257c:	33 1f       	adc	r19, r19
    257e:	22 0f       	add	r18, r18
    2580:	33 1f       	adc	r19, r19
    2582:	24 59       	subi	r18, 0x94	; 148
    2584:	3e 4d       	sbci	r19, 0xDE	; 222
    2586:	82 2f       	mov	r24, r18
    2588:	93 2f       	mov	r25, r19
    258a:	08 95       	ret

0000258c <udd_ep_init>:
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	63 70       	andi	r22, 0x03	; 3
    2592:	61 30       	cpi	r22, 0x01	; 1
    2594:	11 f0       	breq	.+4      	; 0x259a <udd_ep_init+0xe>
    2596:	28 f0       	brcs	.+10     	; 0x25a2 <udd_ep_init+0x16>
    2598:	02 c0       	rjmp	.+4      	; 0x259e <udd_ep_init+0x12>
    259a:	d0 ec       	ldi	r29, 0xC0	; 192
    259c:	03 c0       	rjmp	.+6      	; 0x25a4 <udd_ep_init+0x18>
    259e:	d0 e8       	ldi	r29, 0x80	; 128
    25a0:	01 c0       	rjmp	.+2      	; 0x25a4 <udd_ep_init+0x18>
    25a2:	d0 e4       	ldi	r29, 0x40	; 64
    25a4:	40 38       	cpi	r20, 0x80	; 128
    25a6:	51 05       	cpc	r21, r1
    25a8:	e1 f0       	breq	.+56     	; 0x25e2 <udd_ep_init+0x56>
    25aa:	50 f4       	brcc	.+20     	; 0x25c0 <udd_ep_init+0x34>
    25ac:	40 32       	cpi	r20, 0x20	; 32
    25ae:	51 05       	cpc	r21, r1
    25b0:	a1 f0       	breq	.+40     	; 0x25da <udd_ep_init+0x4e>
    25b2:	40 34       	cpi	r20, 0x40	; 64
    25b4:	51 05       	cpc	r21, r1
    25b6:	99 f0       	breq	.+38     	; 0x25de <udd_ep_init+0x52>
    25b8:	40 31       	cpi	r20, 0x10	; 16
    25ba:	51 05       	cpc	r21, r1
    25bc:	61 f4       	brne	.+24     	; 0x25d6 <udd_ep_init+0x4a>
    25be:	19 c0       	rjmp	.+50     	; 0x25f2 <udd_ep_init+0x66>
    25c0:	41 15       	cp	r20, r1
    25c2:	92 e0       	ldi	r25, 0x02	; 2
    25c4:	59 07       	cpc	r21, r25
    25c6:	89 f0       	breq	.+34     	; 0x25ea <udd_ep_init+0x5e>
    25c8:	4f 3f       	cpi	r20, 0xFF	; 255
    25ca:	93 e0       	ldi	r25, 0x03	; 3
    25cc:	59 07       	cpc	r21, r25
    25ce:	79 f0       	breq	.+30     	; 0x25ee <udd_ep_init+0x62>
    25d0:	41 15       	cp	r20, r1
    25d2:	51 40       	sbci	r21, 0x01	; 1
    25d4:	41 f0       	breq	.+16     	; 0x25e6 <udd_ep_init+0x5a>
    25d6:	c0 e0       	ldi	r28, 0x00	; 0
    25d8:	0d c0       	rjmp	.+26     	; 0x25f4 <udd_ep_init+0x68>
    25da:	c2 e0       	ldi	r28, 0x02	; 2
    25dc:	0b c0       	rjmp	.+22     	; 0x25f4 <udd_ep_init+0x68>
    25de:	c3 e0       	ldi	r28, 0x03	; 3
    25e0:	09 c0       	rjmp	.+18     	; 0x25f4 <udd_ep_init+0x68>
    25e2:	c4 e0       	ldi	r28, 0x04	; 4
    25e4:	07 c0       	rjmp	.+14     	; 0x25f4 <udd_ep_init+0x68>
    25e6:	c5 e0       	ldi	r28, 0x05	; 5
    25e8:	05 c0       	rjmp	.+10     	; 0x25f4 <udd_ep_init+0x68>
    25ea:	c6 e0       	ldi	r28, 0x06	; 6
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <udd_ep_init+0x68>
    25ee:	c7 e0       	ldi	r28, 0x07	; 7
    25f0:	01 c0       	rjmp	.+2      	; 0x25f4 <udd_ep_init+0x68>
    25f2:	c1 e0       	ldi	r28, 0x01	; 1
    25f4:	b2 df       	rcall	.-156    	; 0x255a <udd_ep_get_ctrl>
    25f6:	fc 01       	movw	r30, r24
    25f8:	11 82       	std	Z+1, r1	; 0x01
    25fa:	86 e0       	ldi	r24, 0x06	; 6
    25fc:	80 83       	st	Z, r24
    25fe:	cd 2b       	or	r28, r29
    2600:	c1 83       	std	Z+1, r28	; 0x01
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	08 95       	ret

00002608 <udd_ctrl_init>:
    2608:	0f 93       	push	r16
    260a:	e8 ec       	ldi	r30, 0xC8	; 200
    260c:	f4 e0       	ldi	r31, 0x04	; 4
    260e:	80 81       	ld	r24, Z
    2610:	8f 7d       	andi	r24, 0xDF	; 223
    2612:	80 83       	st	Z, r24
    2614:	80 81       	ld	r24, Z
    2616:	8f 7d       	andi	r24, 0xDF	; 223
    2618:	80 83       	st	Z, r24
    261a:	e4 e7       	ldi	r30, 0x74	; 116
    261c:	f1 e2       	ldi	r31, 0x21	; 33
    261e:	02 e0       	ldi	r16, 0x02	; 2
    2620:	05 93       	las	Z, r16
    2622:	10 92 76 21 	sts	0x2176, r1
    2626:	10 92 77 21 	sts	0x2177, r1
    262a:	00 e2       	ldi	r16, 0x20	; 32
    262c:	06 93       	lac	Z, r16
    262e:	00 e4       	ldi	r16, 0x40	; 64
    2630:	06 93       	lac	Z, r16
    2632:	ec e6       	ldi	r30, 0x6C	; 108
    2634:	f1 e2       	ldi	r31, 0x21	; 33
    2636:	00 e2       	ldi	r16, 0x20	; 32
    2638:	06 93       	lac	Z, r16
    263a:	00 e4       	ldi	r16, 0x40	; 64
    263c:	06 93       	lac	Z, r16
    263e:	10 92 70 2a 	sts	0x2A70, r1
    2642:	10 92 71 2a 	sts	0x2A71, r1
    2646:	10 92 72 2a 	sts	0x2A72, r1
    264a:	10 92 73 2a 	sts	0x2A73, r1
    264e:	10 92 6e 2a 	sts	0x2A6E, r1
    2652:	10 92 6f 2a 	sts	0x2A6F, r1
    2656:	10 92 4d 22 	sts	0x224D, r1
    265a:	0f 91       	pop	r16
    265c:	08 95       	ret

0000265e <udd_ctrl_stall_data>:
    265e:	0f 93       	push	r16
    2660:	85 e0       	ldi	r24, 0x05	; 5
    2662:	80 93 4d 22 	sts	0x224D, r24
    2666:	e5 e7       	ldi	r30, 0x75	; 117
    2668:	f1 e2       	ldi	r31, 0x21	; 33
    266a:	04 e0       	ldi	r16, 0x04	; 4
    266c:	05 93       	las	Z, r16
    266e:	ed e6       	ldi	r30, 0x6D	; 109
    2670:	f1 e2       	ldi	r31, 0x21	; 33
    2672:	04 e0       	ldi	r16, 0x04	; 4
    2674:	05 93       	las	Z, r16
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <udd_ctrl_send_zlp_in>:
    267a:	0f 93       	push	r16
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	80 93 4d 22 	sts	0x224D, r24
    2682:	10 92 76 21 	sts	0x2176, r1
    2686:	10 92 77 21 	sts	0x2177, r1
    268a:	e4 e7       	ldi	r30, 0x74	; 116
    268c:	f1 e2       	ldi	r31, 0x21	; 33
    268e:	02 e0       	ldi	r16, 0x02	; 2
    2690:	06 93       	lac	Z, r16
    2692:	0f 91       	pop	r16
    2694:	08 95       	ret

00002696 <udd_ctrl_send_zlp_out>:
    2696:	0f 93       	push	r16
    2698:	84 e0       	ldi	r24, 0x04	; 4
    269a:	80 93 4d 22 	sts	0x224D, r24
    269e:	ec e6       	ldi	r30, 0x6C	; 108
    26a0:	f1 e2       	ldi	r31, 0x21	; 33
    26a2:	02 e0       	ldi	r16, 0x02	; 2
    26a4:	06 93       	lac	Z, r16
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

000026aa <udd_ctrl_endofrequest>:
    26aa:	e0 91 70 2a 	lds	r30, 0x2A70
    26ae:	f0 91 71 2a 	lds	r31, 0x2A71
    26b2:	30 97       	sbiw	r30, 0x00	; 0
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <udd_ctrl_endofrequest+0xe>
    26b6:	19 95       	eicall
    26b8:	08 95       	ret

000026ba <udd_ctrl_in_sent>:
    26ba:	0f 93       	push	r16
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	80 91 4d 22 	lds	r24, 0x224D
    26c4:	83 30       	cpi	r24, 0x03	; 3
    26c6:	19 f4       	brne	.+6      	; 0x26ce <udd_ctrl_in_sent+0x14>
    26c8:	f0 df       	rcall	.-32     	; 0x26aa <udd_ctrl_endofrequest>
    26ca:	9e df       	rcall	.-196    	; 0x2608 <udd_ctrl_init>
    26cc:	5a c0       	rjmp	.+180    	; 0x2782 <udd_ctrl_in_sent+0xc8>
    26ce:	80 91 50 22 	lds	r24, 0x2250
    26d2:	90 91 51 22 	lds	r25, 0x2251
    26d6:	c0 91 6e 2a 	lds	r28, 0x2A6E
    26da:	d0 91 6f 2a 	lds	r29, 0x2A6F
    26de:	c8 1b       	sub	r28, r24
    26e0:	d9 0b       	sbc	r29, r25
    26e2:	41 f5       	brne	.+80     	; 0x2734 <udd_ctrl_in_sent+0x7a>
    26e4:	20 91 4e 22 	lds	r18, 0x224E
    26e8:	30 91 4f 22 	lds	r19, 0x224F
    26ec:	82 0f       	add	r24, r18
    26ee:	93 1f       	adc	r25, r19
    26f0:	80 93 4e 22 	sts	0x224E, r24
    26f4:	90 93 4f 22 	sts	0x224F, r25
    26f8:	20 91 6a 2a 	lds	r18, 0x2A6A
    26fc:	30 91 6b 2a 	lds	r19, 0x2A6B
    2700:	82 17       	cp	r24, r18
    2702:	93 07       	cpc	r25, r19
    2704:	21 f0       	breq	.+8      	; 0x270e <udd_ctrl_in_sent+0x54>
    2706:	80 91 52 22 	lds	r24, 0x2252
    270a:	88 23       	and	r24, r24
    270c:	11 f0       	breq	.+4      	; 0x2712 <udd_ctrl_in_sent+0x58>
    270e:	c3 df       	rcall	.-122    	; 0x2696 <udd_ctrl_send_zlp_out>
    2710:	38 c0       	rjmp	.+112    	; 0x2782 <udd_ctrl_in_sent+0xc8>
    2712:	e0 91 72 2a 	lds	r30, 0x2A72
    2716:	f0 91 73 2a 	lds	r31, 0x2A73
    271a:	30 97       	sbiw	r30, 0x00	; 0
    271c:	99 f0       	breq	.+38     	; 0x2744 <udd_ctrl_in_sent+0x8a>
    271e:	19 95       	eicall
    2720:	88 23       	and	r24, r24
    2722:	81 f0       	breq	.+32     	; 0x2744 <udd_ctrl_in_sent+0x8a>
    2724:	10 92 50 22 	sts	0x2250, r1
    2728:	10 92 51 22 	sts	0x2251, r1
    272c:	c0 91 6e 2a 	lds	r28, 0x2A6E
    2730:	d0 91 6f 2a 	lds	r29, 0x2A6F
    2734:	c8 30       	cpi	r28, 0x08	; 8
    2736:	d1 05       	cpc	r29, r1
    2738:	28 f0       	brcs	.+10     	; 0x2744 <udd_ctrl_in_sent+0x8a>
    273a:	10 92 52 22 	sts	0x2252, r1
    273e:	c8 e0       	ldi	r28, 0x08	; 8
    2740:	d0 e0       	ldi	r29, 0x00	; 0
    2742:	03 c0       	rjmp	.+6      	; 0x274a <udd_ctrl_in_sent+0x90>
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	80 93 52 22 	sts	0x2252, r24
    274a:	c0 93 76 21 	sts	0x2176, r28
    274e:	d0 93 77 21 	sts	0x2177, r29
    2752:	80 91 50 22 	lds	r24, 0x2250
    2756:	90 91 51 22 	lds	r25, 0x2251
    275a:	20 91 6c 2a 	lds	r18, 0x2A6C
    275e:	30 91 6d 2a 	lds	r19, 0x2A6D
    2762:	28 0f       	add	r18, r24
    2764:	39 1f       	adc	r19, r25
    2766:	20 93 78 21 	sts	0x2178, r18
    276a:	30 93 79 21 	sts	0x2179, r19
    276e:	c8 0f       	add	r28, r24
    2770:	d9 1f       	adc	r29, r25
    2772:	c0 93 50 22 	sts	0x2250, r28
    2776:	d0 93 51 22 	sts	0x2251, r29
    277a:	e4 e7       	ldi	r30, 0x74	; 116
    277c:	f1 e2       	ldi	r31, 0x21	; 33
    277e:	02 e0       	ldi	r16, 0x02	; 2
    2780:	06 93       	lac	Z, r16
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	0f 91       	pop	r16
    2788:	08 95       	ret

0000278a <udd_ep_get_size>:
    278a:	fc 01       	movw	r30, r24
    278c:	81 81       	ldd	r24, Z+1	; 0x01
    278e:	87 70       	andi	r24, 0x07	; 7
    2790:	84 30       	cpi	r24, 0x04	; 4
    2792:	a9 f0       	breq	.+42     	; 0x27be <udd_ep_get_size+0x34>
    2794:	30 f4       	brcc	.+12     	; 0x27a2 <udd_ep_get_size+0x18>
    2796:	82 30       	cpi	r24, 0x02	; 2
    2798:	61 f0       	breq	.+24     	; 0x27b2 <udd_ep_get_size+0x28>
    279a:	70 f4       	brcc	.+28     	; 0x27b8 <udd_ep_get_size+0x2e>
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	31 f4       	brne	.+12     	; 0x27ac <udd_ep_get_size+0x22>
    27a0:	1a c0       	rjmp	.+52     	; 0x27d6 <udd_ep_get_size+0x4c>
    27a2:	86 30       	cpi	r24, 0x06	; 6
    27a4:	91 f0       	breq	.+36     	; 0x27ca <udd_ep_get_size+0x40>
    27a6:	70 f0       	brcs	.+28     	; 0x27c4 <udd_ep_get_size+0x3a>
    27a8:	87 30       	cpi	r24, 0x07	; 7
    27aa:	91 f0       	breq	.+36     	; 0x27d0 <udd_ep_get_size+0x46>
    27ac:	28 e0       	ldi	r18, 0x08	; 8
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <udd_ep_get_size+0x50>
    27b2:	20 e2       	ldi	r18, 0x20	; 32
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	11 c0       	rjmp	.+34     	; 0x27da <udd_ep_get_size+0x50>
    27b8:	20 e4       	ldi	r18, 0x40	; 64
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	0e c0       	rjmp	.+28     	; 0x27da <udd_ep_get_size+0x50>
    27be:	20 e8       	ldi	r18, 0x80	; 128
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	0b c0       	rjmp	.+22     	; 0x27da <udd_ep_get_size+0x50>
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	31 e0       	ldi	r19, 0x01	; 1
    27c8:	08 c0       	rjmp	.+16     	; 0x27da <udd_ep_get_size+0x50>
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	32 e0       	ldi	r19, 0x02	; 2
    27ce:	05 c0       	rjmp	.+10     	; 0x27da <udd_ep_get_size+0x50>
    27d0:	2f ef       	ldi	r18, 0xFF	; 255
    27d2:	33 e0       	ldi	r19, 0x03	; 3
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <udd_ep_get_size+0x50>
    27d6:	20 e1       	ldi	r18, 0x10	; 16
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	82 2f       	mov	r24, r18
    27dc:	93 2f       	mov	r25, r19
    27de:	08 95       	ret

000027e0 <udd_ep_get_job>:
    27e0:	28 2f       	mov	r18, r24
    27e2:	2f 70       	andi	r18, 0x0F	; 15
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	22 0f       	add	r18, r18
    27e8:	33 1f       	adc	r19, r19
    27ea:	99 27       	eor	r25, r25
    27ec:	87 fd       	sbrc	r24, 7
    27ee:	90 95       	com	r25
    27f0:	88 27       	eor	r24, r24
    27f2:	99 0f       	add	r25, r25
    27f4:	88 1f       	adc	r24, r24
    27f6:	99 27       	eor	r25, r25
    27f8:	28 0f       	add	r18, r24
    27fa:	39 1f       	adc	r19, r25
    27fc:	22 50       	subi	r18, 0x02	; 2
    27fe:	31 09       	sbc	r19, r1
    2800:	c9 01       	movw	r24, r18
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	28 0f       	add	r18, r24
    2810:	39 1f       	adc	r19, r25
    2812:	20 56       	subi	r18, 0x60	; 96
    2814:	3e 4d       	sbci	r19, 0xDE	; 222
    2816:	82 2f       	mov	r24, r18
    2818:	93 2f       	mov	r25, r19
    281a:	08 95       	ret

0000281c <udd_ctrl_interrupt_tc_setup>:
    281c:	0f 93       	push	r16
    281e:	80 91 cc 04 	lds	r24, 0x04CC
    2822:	80 ff       	sbrs	r24, 0
    2824:	63 c0       	rjmp	.+198    	; 0x28ec <udd_ctrl_interrupt_tc_setup+0xd0>
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	80 93 cc 04 	sts	0x04CC, r24
    282c:	ec e6       	ldi	r30, 0x6C	; 108
    282e:	f1 e2       	ldi	r31, 0x21	; 33
    2830:	00 e8       	ldi	r16, 0x80	; 128
    2832:	06 93       	lac	Z, r16
    2834:	e4 e7       	ldi	r30, 0x74	; 116
    2836:	f1 e2       	ldi	r31, 0x21	; 33
    2838:	00 e8       	ldi	r16, 0x80	; 128
    283a:	06 93       	lac	Z, r16
    283c:	80 93 ca 04 	sts	0x04CA, r24
    2840:	ec e6       	ldi	r30, 0x6C	; 108
    2842:	f1 e2       	ldi	r31, 0x21	; 33
    2844:	00 e1       	ldi	r16, 0x10	; 16
    2846:	06 93       	lac	Z, r16
    2848:	80 91 4d 22 	lds	r24, 0x224D
    284c:	88 23       	and	r24, r24
    284e:	29 f0       	breq	.+10     	; 0x285a <udd_ctrl_interrupt_tc_setup+0x3e>
    2850:	83 50       	subi	r24, 0x03	; 3
    2852:	82 30       	cpi	r24, 0x02	; 2
    2854:	08 f4       	brcc	.+2      	; 0x2858 <udd_ctrl_interrupt_tc_setup+0x3c>
    2856:	29 df       	rcall	.-430    	; 0x26aa <udd_ctrl_endofrequest>
    2858:	d7 de       	rcall	.-594    	; 0x2608 <udd_ctrl_init>
    285a:	80 91 6e 21 	lds	r24, 0x216E
    285e:	90 91 6f 21 	lds	r25, 0x216F
    2862:	08 97       	sbiw	r24, 0x08	; 8
    2864:	09 f0       	breq	.+2      	; 0x2868 <udd_ctrl_interrupt_tc_setup+0x4c>
    2866:	44 c0       	rjmp	.+136    	; 0x28f0 <udd_ctrl_interrupt_tc_setup+0xd4>
    2868:	88 e0       	ldi	r24, 0x08	; 8
    286a:	e5 e4       	ldi	r30, 0x45	; 69
    286c:	f2 e2       	ldi	r31, 0x22	; 34
    286e:	a4 e6       	ldi	r26, 0x64	; 100
    2870:	ba e2       	ldi	r27, 0x2A	; 42
    2872:	01 90       	ld	r0, Z+
    2874:	0d 92       	st	X+, r0
    2876:	8a 95       	dec	r24
    2878:	e1 f7       	brne	.-8      	; 0x2872 <udd_ctrl_interrupt_tc_setup+0x56>
    287a:	e8 ec       	ldi	r30, 0xC8	; 200
    287c:	f4 e0       	ldi	r31, 0x04	; 4
    287e:	80 81       	ld	r24, Z
    2880:	80 62       	ori	r24, 0x20	; 32
    2882:	80 83       	st	Z, r24
    2884:	80 81       	ld	r24, Z
    2886:	80 62       	ori	r24, 0x20	; 32
    2888:	80 83       	st	Z, r24
    288a:	95 db       	rcall	.-2262   	; 0x1fb6 <udc_process_setup>
    288c:	81 11       	cpse	r24, r1
    288e:	03 c0       	rjmp	.+6      	; 0x2896 <udd_ctrl_interrupt_tc_setup+0x7a>
    2890:	e6 de       	rcall	.-564    	; 0x265e <udd_ctrl_stall_data>
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	2e c0       	rjmp	.+92     	; 0x28f2 <udd_ctrl_interrupt_tc_setup+0xd6>
    2896:	80 91 64 2a 	lds	r24, 0x2A64
    289a:	88 23       	and	r24, r24
    289c:	74 f4       	brge	.+28     	; 0x28ba <udd_ctrl_interrupt_tc_setup+0x9e>
    289e:	10 92 4e 22 	sts	0x224E, r1
    28a2:	10 92 4f 22 	sts	0x224F, r1
    28a6:	10 92 50 22 	sts	0x2250, r1
    28aa:	10 92 51 22 	sts	0x2251, r1
    28ae:	82 e0       	ldi	r24, 0x02	; 2
    28b0:	80 93 4d 22 	sts	0x224D, r24
    28b4:	02 df       	rcall	.-508    	; 0x26ba <udd_ctrl_in_sent>
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	1c c0       	rjmp	.+56     	; 0x28f2 <udd_ctrl_interrupt_tc_setup+0xd6>
    28ba:	80 91 6a 2a 	lds	r24, 0x2A6A
    28be:	90 91 6b 2a 	lds	r25, 0x2A6B
    28c2:	89 2b       	or	r24, r25
    28c4:	19 f4       	brne	.+6      	; 0x28cc <udd_ctrl_interrupt_tc_setup+0xb0>
    28c6:	d9 de       	rcall	.-590    	; 0x267a <udd_ctrl_send_zlp_in>
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	13 c0       	rjmp	.+38     	; 0x28f2 <udd_ctrl_interrupt_tc_setup+0xd6>
    28cc:	10 92 4e 22 	sts	0x224E, r1
    28d0:	10 92 4f 22 	sts	0x224F, r1
    28d4:	10 92 50 22 	sts	0x2250, r1
    28d8:	10 92 51 22 	sts	0x2251, r1
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	80 93 4d 22 	sts	0x224D, r24
    28e2:	ec e6       	ldi	r30, 0x6C	; 108
    28e4:	f1 e2       	ldi	r31, 0x21	; 33
    28e6:	02 e0       	ldi	r16, 0x02	; 2
    28e8:	06 93       	lac	Z, r16
    28ea:	03 c0       	rjmp	.+6      	; 0x28f2 <udd_ctrl_interrupt_tc_setup+0xd6>
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	01 c0       	rjmp	.+2      	; 0x28f2 <udd_ctrl_interrupt_tc_setup+0xd6>
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	0f 91       	pop	r16
    28f4:	08 95       	ret

000028f6 <udd_ep_trans_complet>:
    28f6:	bf 92       	push	r11
    28f8:	cf 92       	push	r12
    28fa:	df 92       	push	r13
    28fc:	ef 92       	push	r14
    28fe:	ff 92       	push	r15
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	b8 2e       	mov	r11, r24
    290a:	6a df       	rcall	.-300    	; 0x27e0 <udd_ep_get_job>
    290c:	ec 01       	movw	r28, r24
    290e:	8b 2d       	mov	r24, r11
    2910:	24 de       	rcall	.-952    	; 0x255a <udd_ep_get_ctrl>
    2912:	7c 01       	movw	r14, r24
    2914:	3a df       	rcall	.-396    	; 0x278a <udd_ep_get_size>
    2916:	6c 01       	movw	r12, r24
    2918:	bb 20       	and	r11, r11
    291a:	0c f0       	brlt	.+2      	; 0x291e <udd_ep_trans_complet+0x28>
    291c:	5d c0       	rjmp	.+186    	; 0x29d8 <udd_ep_trans_complet+0xe2>
    291e:	d7 01       	movw	r26, r14
    2920:	16 96       	adiw	r26, 0x06	; 6
    2922:	2d 91       	ld	r18, X+
    2924:	3c 91       	ld	r19, X
    2926:	17 97       	sbiw	r26, 0x07	; 7
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	28 0f       	add	r18, r24
    292e:	39 1f       	adc	r19, r25
    2930:	2d 83       	std	Y+5, r18	; 0x05
    2932:	3e 83       	std	Y+6, r19	; 0x06
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	28 17       	cp	r18, r24
    293a:	39 07       	cpc	r19, r25
    293c:	09 f4       	brne	.+2      	; 0x2940 <udd_ep_trans_complet+0x4a>
    293e:	3a c0       	rjmp	.+116    	; 0x29b4 <udd_ep_trans_complet+0xbe>
    2940:	fc 01       	movw	r30, r24
    2942:	e2 1b       	sub	r30, r18
    2944:	f3 0b       	sbc	r31, r19
    2946:	9f 01       	movw	r18, r30
    2948:	21 15       	cp	r18, r1
    294a:	f4 e0       	ldi	r31, 0x04	; 4
    294c:	3f 07       	cpc	r19, r31
    294e:	38 f0       	brcs	.+14     	; 0x295e <udd_ep_trans_complet+0x68>
    2950:	2f ef       	ldi	r18, 0xFF	; 255
    2952:	33 e0       	ldi	r19, 0x03	; 3
    2954:	c9 01       	movw	r24, r18
    2956:	b6 01       	movw	r22, r12
    2958:	88 d4       	rcall	.+2320   	; 0x326a <__udivmodhi4>
    295a:	28 1b       	sub	r18, r24
    295c:	39 0b       	sbc	r19, r25
    295e:	88 81       	ld	r24, Y
    2960:	81 ff       	sbrs	r24, 1
    2962:	0b c0       	rjmp	.+22     	; 0x297a <udd_ep_trans_complet+0x84>
    2964:	c9 01       	movw	r24, r18
    2966:	b6 01       	movw	r22, r12
    2968:	80 d4       	rcall	.+2304   	; 0x326a <__udivmodhi4>
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	89 2b       	or	r24, r25
    2970:	11 f0       	breq	.+4      	; 0x2976 <udd_ep_trans_complet+0x80>
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	ca 01       	movw	r24, r20
    2978:	02 c0       	rjmp	.+4      	; 0x297e <udd_ep_trans_complet+0x88>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	98 81       	ld	r25, Y
    2980:	80 fb       	bst	r24, 0
    2982:	91 f9       	bld	r25, 1
    2984:	98 83       	st	Y, r25
    2986:	d7 01       	movw	r26, r14
    2988:	16 96       	adiw	r26, 0x06	; 6
    298a:	1d 92       	st	X+, r1
    298c:	1c 92       	st	X, r1
    298e:	17 97       	sbiw	r26, 0x07	; 7
    2990:	12 96       	adiw	r26, 0x02	; 2
    2992:	2d 93       	st	X+, r18
    2994:	3c 93       	st	X, r19
    2996:	13 97       	sbiw	r26, 0x03	; 3
    2998:	29 81       	ldd	r18, Y+1	; 0x01
    299a:	3a 81       	ldd	r19, Y+2	; 0x02
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	82 0f       	add	r24, r18
    29a2:	93 1f       	adc	r25, r19
    29a4:	14 96       	adiw	r26, 0x04	; 4
    29a6:	8d 93       	st	X+, r24
    29a8:	9c 93       	st	X, r25
    29aa:	15 97       	sbiw	r26, 0x05	; 5
    29ac:	f7 01       	movw	r30, r14
    29ae:	02 e0       	ldi	r16, 0x02	; 2
    29b0:	06 93       	lac	Z, r16
    29b2:	98 c0       	rjmp	.+304    	; 0x2ae4 <udd_ep_trans_complet+0x1ee>
    29b4:	88 81       	ld	r24, Y
    29b6:	81 ff       	sbrs	r24, 1
    29b8:	87 c0       	rjmp	.+270    	; 0x2ac8 <udd_ep_trans_complet+0x1d2>
    29ba:	8d 7f       	andi	r24, 0xFD	; 253
    29bc:	88 83       	st	Y, r24
    29be:	d7 01       	movw	r26, r14
    29c0:	16 96       	adiw	r26, 0x06	; 6
    29c2:	1d 92       	st	X+, r1
    29c4:	1c 92       	st	X, r1
    29c6:	17 97       	sbiw	r26, 0x07	; 7
    29c8:	12 96       	adiw	r26, 0x02	; 2
    29ca:	1d 92       	st	X+, r1
    29cc:	1c 92       	st	X, r1
    29ce:	13 97       	sbiw	r26, 0x03	; 3
    29d0:	f7 01       	movw	r30, r14
    29d2:	02 e0       	ldi	r16, 0x02	; 2
    29d4:	06 93       	lac	Z, r16
    29d6:	86 c0       	rjmp	.+268    	; 0x2ae4 <udd_ep_trans_complet+0x1ee>
    29d8:	d7 01       	movw	r26, r14
    29da:	12 96       	adiw	r26, 0x02	; 2
    29dc:	0d 91       	ld	r16, X+
    29de:	1c 91       	ld	r17, X
    29e0:	13 97       	sbiw	r26, 0x03	; 3
    29e2:	88 81       	ld	r24, Y
    29e4:	82 ff       	sbrs	r24, 2
    29e6:	17 c0       	rjmp	.+46     	; 0x2a16 <udd_ep_trans_complet+0x120>
    29e8:	29 81       	ldd	r18, Y+1	; 0x01
    29ea:	3a 81       	ldd	r19, Y+2	; 0x02
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	28 0f       	add	r18, r24
    29f2:	39 1f       	adc	r19, r25
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	b6 01       	movw	r22, r12
    29fa:	37 d4       	rcall	.+2158   	; 0x326a <__udivmodhi4>
    29fc:	b0 e4       	ldi	r27, 0x40	; 64
    29fe:	bb 9e       	mul	r11, r27
    2a00:	f0 01       	movw	r30, r0
    2a02:	11 24       	eor	r1, r1
    2a04:	eb 57       	subi	r30, 0x7B	; 123
    2a06:	fe 4d       	sbci	r31, 0xDE	; 222
    2a08:	48 2f       	mov	r20, r24
    2a0a:	59 2f       	mov	r21, r25
    2a0c:	6e 2f       	mov	r22, r30
    2a0e:	7f 2f       	mov	r23, r31
    2a10:	82 2f       	mov	r24, r18
    2a12:	93 2f       	mov	r25, r19
    2a14:	4a d4       	rcall	.+2196   	; 0x32aa <memcpy>
    2a16:	2d 81       	ldd	r18, Y+5	; 0x05
    2a18:	3e 81       	ldd	r19, Y+6	; 0x06
    2a1a:	20 0f       	add	r18, r16
    2a1c:	31 1f       	adc	r19, r17
    2a1e:	2d 83       	std	Y+5, r18	; 0x05
    2a20:	3e 83       	std	Y+6, r19	; 0x06
    2a22:	eb 81       	ldd	r30, Y+3	; 0x03
    2a24:	fc 81       	ldd	r31, Y+4	; 0x04
    2a26:	e2 17       	cp	r30, r18
    2a28:	f3 07       	cpc	r31, r19
    2a2a:	10 f4       	brcc	.+4      	; 0x2a30 <udd_ep_trans_complet+0x13a>
    2a2c:	ed 83       	std	Y+5, r30	; 0x05
    2a2e:	fe 83       	std	Y+6, r31	; 0x06
    2a30:	d7 01       	movw	r26, r14
    2a32:	16 96       	adiw	r26, 0x06	; 6
    2a34:	2d 91       	ld	r18, X+
    2a36:	3c 91       	ld	r19, X
    2a38:	17 97       	sbiw	r26, 0x07	; 7
    2a3a:	20 17       	cp	r18, r16
    2a3c:	31 07       	cpc	r19, r17
    2a3e:	09 f0       	breq	.+2      	; 0x2a42 <udd_ep_trans_complet+0x14c>
    2a40:	43 c0       	rjmp	.+134    	; 0x2ac8 <udd_ep_trans_complet+0x1d2>
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	e8 17       	cp	r30, r24
    2a48:	f9 07       	cpc	r31, r25
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <udd_ep_trans_complet+0x158>
    2a4c:	3d c0       	rjmp	.+122    	; 0x2ac8 <udd_ep_trans_complet+0x1d2>
    2a4e:	e8 1b       	sub	r30, r24
    2a50:	f9 0b       	sbc	r31, r25
    2a52:	e1 15       	cp	r30, r1
    2a54:	b4 e0       	ldi	r27, 0x04	; 4
    2a56:	fb 07       	cpc	r31, r27
    2a58:	40 f0       	brcs	.+16     	; 0x2a6a <udd_ep_trans_complet+0x174>
    2a5a:	ef ef       	ldi	r30, 0xFF	; 255
    2a5c:	f3 e0       	ldi	r31, 0x03	; 3
    2a5e:	cf 01       	movw	r24, r30
    2a60:	b6 01       	movw	r22, r12
    2a62:	03 d4       	rcall	.+2054   	; 0x326a <__udivmodhi4>
    2a64:	e8 1b       	sub	r30, r24
    2a66:	f9 0b       	sbc	r31, r25
    2a68:	05 c0       	rjmp	.+10     	; 0x2a74 <udd_ep_trans_complet+0x17e>
    2a6a:	cf 01       	movw	r24, r30
    2a6c:	b6 01       	movw	r22, r12
    2a6e:	fd d3       	rcall	.+2042   	; 0x326a <__udivmodhi4>
    2a70:	e8 1b       	sub	r30, r24
    2a72:	f9 0b       	sbc	r31, r25
    2a74:	d7 01       	movw	r26, r14
    2a76:	12 96       	adiw	r26, 0x02	; 2
    2a78:	1d 92       	st	X+, r1
    2a7a:	1c 92       	st	X, r1
    2a7c:	13 97       	sbiw	r26, 0x03	; 3
    2a7e:	ec 15       	cp	r30, r12
    2a80:	fd 05       	cpc	r31, r13
    2a82:	78 f4       	brcc	.+30     	; 0x2aa2 <udd_ep_trans_complet+0x1ac>
    2a84:	88 81       	ld	r24, Y
    2a86:	84 60       	ori	r24, 0x04	; 4
    2a88:	88 83       	st	Y, r24
    2a8a:	b0 e4       	ldi	r27, 0x40	; 64
    2a8c:	bb 9e       	mul	r11, r27
    2a8e:	c0 01       	movw	r24, r0
    2a90:	11 24       	eor	r1, r1
    2a92:	8b 57       	subi	r24, 0x7B	; 123
    2a94:	9e 4d       	sbci	r25, 0xDE	; 222
    2a96:	f7 01       	movw	r30, r14
    2a98:	84 83       	std	Z+4, r24	; 0x04
    2a9a:	95 83       	std	Z+5, r25	; 0x05
    2a9c:	c6 82       	std	Z+6, r12	; 0x06
    2a9e:	d7 82       	std	Z+7, r13	; 0x07
    2aa0:	0f c0       	rjmp	.+30     	; 0x2ac0 <udd_ep_trans_complet+0x1ca>
    2aa2:	29 81       	ldd	r18, Y+1	; 0x01
    2aa4:	3a 81       	ldd	r19, Y+2	; 0x02
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aaa:	82 0f       	add	r24, r18
    2aac:	93 1f       	adc	r25, r19
    2aae:	d7 01       	movw	r26, r14
    2ab0:	14 96       	adiw	r26, 0x04	; 4
    2ab2:	8d 93       	st	X+, r24
    2ab4:	9c 93       	st	X, r25
    2ab6:	15 97       	sbiw	r26, 0x05	; 5
    2ab8:	16 96       	adiw	r26, 0x06	; 6
    2aba:	ed 93       	st	X+, r30
    2abc:	fc 93       	st	X, r31
    2abe:	17 97       	sbiw	r26, 0x07	; 7
    2ac0:	f7 01       	movw	r30, r14
    2ac2:	02 e0       	ldi	r16, 0x02	; 2
    2ac4:	06 93       	lac	Z, r16
    2ac6:	0e c0       	rjmp	.+28     	; 0x2ae4 <udd_ep_trans_complet+0x1ee>
    2ac8:	88 81       	ld	r24, Y
    2aca:	80 ff       	sbrs	r24, 0
    2acc:	0b c0       	rjmp	.+22     	; 0x2ae4 <udd_ep_trans_complet+0x1ee>
    2ace:	8e 7f       	andi	r24, 0xFE	; 254
    2ad0:	88 83       	st	Y, r24
    2ad2:	ef 81       	ldd	r30, Y+7	; 0x07
    2ad4:	f8 85       	ldd	r31, Y+8	; 0x08
    2ad6:	30 97       	sbiw	r30, 0x00	; 0
    2ad8:	29 f0       	breq	.+10     	; 0x2ae4 <udd_ep_trans_complet+0x1ee>
    2ada:	6d 81       	ldd	r22, Y+5	; 0x05
    2adc:	7e 81       	ldd	r23, Y+6	; 0x06
    2ade:	4b 2d       	mov	r20, r11
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	19 95       	eicall
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	ff 90       	pop	r15
    2aee:	ef 90       	pop	r14
    2af0:	df 90       	pop	r13
    2af2:	cf 90       	pop	r12
    2af4:	bf 90       	pop	r11
    2af6:	08 95       	ret

00002af8 <udd_disable>:
    2af8:	cf 93       	push	r28
    2afa:	cf b7       	in	r28, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	e1 ec       	ldi	r30, 0xC1	; 193
    2b00:	f4 e0       	ldi	r31, 0x04	; 4
    2b02:	80 81       	ld	r24, Z
    2b04:	8e 7f       	andi	r24, 0xFE	; 254
    2b06:	80 83       	st	Z, r24
    2b08:	10 92 c0 04 	sts	0x04C0, r1
    2b0c:	10 82       	st	Z, r1
    2b0e:	49 d8       	rcall	.-3950   	; 0x1ba2 <sysclk_disable_usb>
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	04 dd       	rcall	.-1528   	; 0x251c <udd_sleep_mode>
    2b14:	8f b7       	in	r24, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	e3 e6       	ldi	r30, 0x63	; 99
    2b1a:	fa e2       	ldi	r31, 0x2A	; 42
    2b1c:	90 81       	ld	r25, Z
    2b1e:	91 50       	subi	r25, 0x01	; 1
    2b20:	90 83       	st	Z, r25
    2b22:	8f bf       	out	0x3f, r24	; 63
    2b24:	cf bf       	out	0x3f, r28	; 63
    2b26:	cf 91       	pop	r28
    2b28:	08 95       	ret

00002b2a <udd_attach>:
    2b2a:	cf 93       	push	r28
    2b2c:	cf b7       	in	r28, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	f4 dc       	rcall	.-1560   	; 0x251c <udd_sleep_mode>
    2b34:	ea ec       	ldi	r30, 0xCA	; 202
    2b36:	f4 e0       	ldi	r31, 0x04	; 4
    2b38:	80 e4       	ldi	r24, 0x40	; 64
    2b3a:	80 83       	st	Z, r24
    2b3c:	80 e2       	ldi	r24, 0x20	; 32
    2b3e:	80 83       	st	Z, r24
    2b40:	e1 ec       	ldi	r30, 0xC1	; 193
    2b42:	f4 e0       	ldi	r31, 0x04	; 4
    2b44:	80 81       	ld	r24, Z
    2b46:	81 60       	ori	r24, 0x01	; 1
    2b48:	80 83       	st	Z, r24
    2b4a:	a9 ec       	ldi	r26, 0xC9	; 201
    2b4c:	b4 e0       	ldi	r27, 0x04	; 4
    2b4e:	8c 91       	ld	r24, X
    2b50:	82 60       	ori	r24, 0x02	; 2
    2b52:	8c 93       	st	X, r24
    2b54:	e8 ec       	ldi	r30, 0xC8	; 200
    2b56:	f4 e0       	ldi	r31, 0x04	; 4
    2b58:	80 81       	ld	r24, Z
    2b5a:	80 64       	ori	r24, 0x40	; 64
    2b5c:	80 83       	st	Z, r24
    2b5e:	8c 91       	ld	r24, X
    2b60:	81 60       	ori	r24, 0x01	; 1
    2b62:	8c 93       	st	X, r24
    2b64:	80 81       	ld	r24, Z
    2b66:	80 68       	ori	r24, 0x80	; 128
    2b68:	80 83       	st	Z, r24
    2b6a:	cf bf       	out	0x3f, r28	; 63
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <udd_enable>:
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	c0 e6       	ldi	r28, 0x60	; 96
    2b76:	d0 e0       	ldi	r29, 0x00	; 0
    2b78:	18 82       	st	Y, r1
    2b7a:	80 e3       	ldi	r24, 0x30	; 48
    2b7c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <sysclk_enable_usb>
    2b80:	e0 ec       	ldi	r30, 0xC0	; 192
    2b82:	f4 e0       	ldi	r31, 0x04	; 4
    2b84:	80 81       	ld	r24, Z
    2b86:	80 64       	ori	r24, 0x40	; 64
    2b88:	80 83       	st	Z, r24
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	88 83       	st	Y, r24
    2b8e:	cf b7       	in	r28, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	10 92 6d 21 	sts	0x216D, r1
    2b96:	10 92 75 21 	sts	0x2175, r1
    2b9a:	10 92 7d 21 	sts	0x217D, r1
    2b9e:	10 92 85 21 	sts	0x2185, r1
    2ba2:	10 92 8d 21 	sts	0x218D, r1
    2ba6:	10 92 95 21 	sts	0x2195, r1
    2baa:	e0 ea       	ldi	r30, 0xA0	; 160
    2bac:	f1 e2       	ldi	r31, 0x21	; 33
    2bae:	80 81       	ld	r24, Z
    2bb0:	8e 7f       	andi	r24, 0xFE	; 254
    2bb2:	80 83       	st	Z, r24
    2bb4:	e9 ea       	ldi	r30, 0xA9	; 169
    2bb6:	f1 e2       	ldi	r31, 0x21	; 33
    2bb8:	80 81       	ld	r24, Z
    2bba:	8e 7f       	andi	r24, 0xFE	; 254
    2bbc:	80 83       	st	Z, r24
    2bbe:	e2 eb       	ldi	r30, 0xB2	; 178
    2bc0:	f1 e2       	ldi	r31, 0x21	; 33
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8e 7f       	andi	r24, 0xFE	; 254
    2bc6:	80 83       	st	Z, r24
    2bc8:	eb eb       	ldi	r30, 0xBB	; 187
    2bca:	f1 e2       	ldi	r31, 0x21	; 33
    2bcc:	80 81       	ld	r24, Z
    2bce:	8e 7f       	andi	r24, 0xFE	; 254
    2bd0:	80 83       	st	Z, r24
    2bd2:	6a e1       	ldi	r22, 0x1A	; 26
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	82 e0       	ldi	r24, 0x02	; 2
    2bd8:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <nvm_read_byte>
    2bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    2bde:	19 f0       	breq	.+6      	; 0x2be6 <udd_enable+0x76>
    2be0:	80 93 fa 04 	sts	0x04FA, r24
    2be4:	03 c0       	rjmp	.+6      	; 0x2bec <udd_enable+0x7c>
    2be6:	8f e1       	ldi	r24, 0x1F	; 31
    2be8:	80 93 fa 04 	sts	0x04FA, r24
    2bec:	6b e1       	ldi	r22, 0x1B	; 27
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	82 e0       	ldi	r24, 0x02	; 2
    2bf2:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <nvm_read_byte>
    2bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <udd_enable+0x90>
    2bfa:	80 93 fb 04 	sts	0x04FB, r24
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <udd_enable+0x96>
    2c00:	8f e1       	ldi	r24, 0x1F	; 31
    2c02:	80 93 fb 04 	sts	0x04FB, r24
    2c06:	e0 ec       	ldi	r30, 0xC0	; 192
    2c08:	f4 e0       	ldi	r31, 0x04	; 4
    2c0a:	80 81       	ld	r24, Z
    2c0c:	82 60       	ori	r24, 0x02	; 2
    2c0e:	80 83       	st	Z, r24
    2c10:	80 81       	ld	r24, Z
    2c12:	80 68       	ori	r24, 0x80	; 128
    2c14:	80 83       	st	Z, r24
    2c16:	80 81       	ld	r24, Z
    2c18:	80 61       	ori	r24, 0x10	; 16
    2c1a:	80 83       	st	Z, r24
    2c1c:	8c e6       	ldi	r24, 0x6C	; 108
    2c1e:	91 e2       	ldi	r25, 0x21	; 33
    2c20:	86 83       	std	Z+6, r24	; 0x06
    2c22:	97 83       	std	Z+7, r25	; 0x07
    2c24:	80 81       	ld	r24, Z
    2c26:	80 62       	ori	r24, 0x20	; 32
    2c28:	80 83       	st	Z, r24
    2c2a:	8f ef       	ldi	r24, 0xFF	; 255
    2c2c:	80 93 c5 04 	sts	0x04C5, r24
    2c30:	e8 ec       	ldi	r30, 0xC8	; 200
    2c32:	f4 e0       	ldi	r31, 0x04	; 4
    2c34:	80 81       	ld	r24, Z
    2c36:	81 60       	ori	r24, 0x01	; 1
    2c38:	80 83       	st	Z, r24
    2c3a:	10 92 c4 21 	sts	0x21C4, r1
    2c3e:	8f b7       	in	r24, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	e3 e6       	ldi	r30, 0x63	; 99
    2c44:	fa e2       	ldi	r31, 0x2A	; 42
    2c46:	90 81       	ld	r25, Z
    2c48:	9f 5f       	subi	r25, 0xFF	; 255
    2c4a:	90 83       	st	Z, r25
    2c4c:	8f bf       	out	0x3f, r24	; 63
    2c4e:	6d df       	rcall	.-294    	; 0x2b2a <udd_attach>
    2c50:	cf bf       	out	0x3f, r28	; 63
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	08 95       	ret

00002c58 <udd_set_address>:
    2c58:	80 93 c3 04 	sts	0x04C3, r24
    2c5c:	08 95       	ret

00002c5e <udd_getaddress>:
    2c5e:	80 91 c3 04 	lds	r24, 0x04C3
    2c62:	08 95       	ret

00002c64 <udd_get_frame_number>:
    2c64:	20 91 9c 21 	lds	r18, 0x219C
    2c68:	30 91 9d 21 	lds	r19, 0x219D
    2c6c:	82 2f       	mov	r24, r18
    2c6e:	93 2f       	mov	r25, r19
    2c70:	08 95       	ret

00002c72 <udd_send_remotewakeup>:
    2c72:	80 91 c4 21 	lds	r24, 0x21C4
    2c76:	81 11       	cpse	r24, r1
    2c78:	0a c0       	rjmp	.+20     	; 0x2c8e <udd_send_remotewakeup+0x1c>
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	4f dc       	rcall	.-1890   	; 0x251c <udd_sleep_mode>
    2c7e:	e1 ec       	ldi	r30, 0xC1	; 193
    2c80:	f4 e0       	ldi	r31, 0x04	; 4
    2c82:	80 81       	ld	r24, Z
    2c84:	8b 7f       	andi	r24, 0xFB	; 251
    2c86:	80 83       	st	Z, r24
    2c88:	80 81       	ld	r24, Z
    2c8a:	84 60       	ori	r24, 0x04	; 4
    2c8c:	80 83       	st	Z, r24
    2c8e:	08 95       	ret

00002c90 <udd_set_setup_payload>:
    2c90:	80 93 6c 2a 	sts	0x2A6C, r24
    2c94:	90 93 6d 2a 	sts	0x2A6D, r25
    2c98:	60 93 6e 2a 	sts	0x2A6E, r22
    2c9c:	70 93 6f 2a 	sts	0x2A6F, r23
    2ca0:	08 95       	ret

00002ca2 <udd_ep_alloc>:
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	f8 2e       	mov	r15, r24
    2cb0:	e6 2e       	mov	r14, r22
    2cb2:	8a 01       	movw	r16, r20
    2cb4:	52 dc       	rcall	.-1884   	; 0x255a <udd_ep_get_ctrl>
    2cb6:	ec 01       	movw	r28, r24
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	80 7c       	andi	r24, 0xC0	; 192
    2cbc:	89 f4       	brne	.+34     	; 0x2ce0 <udd_ep_alloc+0x3e>
    2cbe:	a8 01       	movw	r20, r16
    2cc0:	6e 2d       	mov	r22, r14
    2cc2:	8f 2d       	mov	r24, r15
    2cc4:	63 dc       	rcall	.-1850   	; 0x258c <udd_ep_init>
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	80 7c       	andi	r24, 0xC0	; 192
    2cca:	80 3c       	cpi	r24, 0xC0	; 192
    2ccc:	21 f4       	brne	.+8      	; 0x2cd6 <udd_ep_alloc+0x34>
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	87 70       	andi	r24, 0x07	; 7
    2cd2:	87 30       	cpi	r24, 0x07	; 7
    2cd4:	39 f0       	breq	.+14     	; 0x2ce4 <udd_ep_alloc+0x42>
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	80 62       	ori	r24, 0x20	; 32
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	03 c0       	rjmp	.+6      	; 0x2ce6 <udd_ep_alloc+0x44>
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	01 c0       	rjmp	.+2      	; 0x2ce6 <udd_ep_alloc+0x44>
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ff 90       	pop	r15
    2cf0:	ef 90       	pop	r14
    2cf2:	08 95       	ret

00002cf4 <udd_ep_is_halted>:
    2cf4:	32 dc       	rcall	.-1948   	; 0x255a <udd_ep_get_ctrl>
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	81 81       	ldd	r24, Z+1	; 0x01
    2cfa:	82 fb       	bst	r24, 2
    2cfc:	88 27       	eor	r24, r24
    2cfe:	80 f9       	bld	r24, 0
    2d00:	08 95       	ret

00002d02 <udd_ep_clear_halt>:
    2d02:	cf 93       	push	r28
    2d04:	c8 2f       	mov	r28, r24
    2d06:	29 dc       	rcall	.-1966   	; 0x255a <udd_ep_get_ctrl>
    2d08:	fc 01       	movw	r30, r24
    2d0a:	81 81       	ldd	r24, Z+1	; 0x01
    2d0c:	82 ff       	sbrs	r24, 2
    2d0e:	0f c0       	rjmp	.+30     	; 0x2d2e <udd_ep_clear_halt+0x2c>
    2d10:	81 81       	ldd	r24, Z+1	; 0x01
    2d12:	8b 7f       	andi	r24, 0xFB	; 251
    2d14:	81 83       	std	Z+1, r24	; 0x01
    2d16:	8c 2f       	mov	r24, r28
    2d18:	63 dd       	rcall	.-1338   	; 0x27e0 <udd_ep_get_job>
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	80 81       	ld	r24, Z
    2d1e:	80 ff       	sbrs	r24, 0
    2d20:	06 c0       	rjmp	.+12     	; 0x2d2e <udd_ep_clear_halt+0x2c>
    2d22:	8e 7f       	andi	r24, 0xFE	; 254
    2d24:	80 83       	st	Z, r24
    2d26:	07 80       	ldd	r0, Z+7	; 0x07
    2d28:	f0 85       	ldd	r31, Z+8	; 0x08
    2d2a:	e0 2d       	mov	r30, r0
    2d2c:	19 95       	eicall
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	cf 91       	pop	r28
    2d32:	08 95       	ret

00002d34 <udd_ep_run>:
    2d34:	8f 92       	push	r8
    2d36:	9f 92       	push	r9
    2d38:	af 92       	push	r10
    2d3a:	bf 92       	push	r11
    2d3c:	cf 92       	push	r12
    2d3e:	df 92       	push	r13
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	98 2e       	mov	r9, r24
    2d4e:	86 2e       	mov	r8, r22
    2d50:	5a 01       	movw	r10, r20
    2d52:	69 01       	movw	r12, r18
    2d54:	45 dd       	rcall	.-1398   	; 0x27e0 <udd_ep_get_job>
    2d56:	7c 01       	movw	r14, r24
    2d58:	89 2d       	mov	r24, r9
    2d5a:	ff db       	rcall	.-2050   	; 0x255a <udd_ep_get_ctrl>
    2d5c:	ec 01       	movw	r28, r24
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	80 7c       	andi	r24, 0xC0	; 192
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <udd_ep_run+0x32>
    2d64:	4d c0       	rjmp	.+154    	; 0x2e00 <udd_ep_run+0xcc>
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	80 7c       	andi	r24, 0xC0	; 192
    2d6a:	80 3c       	cpi	r24, 0xC0	; 192
    2d6c:	19 f0       	breq	.+6      	; 0x2d74 <udd_ep_run+0x40>
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	82 fd       	sbrc	r24, 2
    2d72:	48 c0       	rjmp	.+144    	; 0x2e04 <udd_ep_run+0xd0>
    2d74:	8f b7       	in	r24, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	f7 01       	movw	r30, r14
    2d7a:	90 81       	ld	r25, Z
    2d7c:	90 ff       	sbrs	r25, 0
    2d7e:	03 c0       	rjmp	.+6      	; 0x2d86 <udd_ep_run+0x52>
    2d80:	8f bf       	out	0x3f, r24	; 63
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	40 c0       	rjmp	.+128    	; 0x2e06 <udd_ep_run+0xd2>
    2d86:	f7 01       	movw	r30, r14
    2d88:	90 81       	ld	r25, Z
    2d8a:	91 60       	ori	r25, 0x01	; 1
    2d8c:	90 83       	st	Z, r25
    2d8e:	8f bf       	out	0x3f, r24	; 63
    2d90:	a1 82       	std	Z+1, r10	; 0x01
    2d92:	b2 82       	std	Z+2, r11	; 0x02
    2d94:	c3 82       	std	Z+3, r12	; 0x03
    2d96:	d4 82       	std	Z+4, r13	; 0x04
    2d98:	15 82       	std	Z+5, r1	; 0x05
    2d9a:	16 82       	std	Z+6, r1	; 0x06
    2d9c:	07 83       	std	Z+7, r16	; 0x07
    2d9e:	10 87       	std	Z+8, r17	; 0x08
    2da0:	81 10       	cpse	r8, r1
    2da2:	08 c0       	rjmp	.+16     	; 0x2db4 <udd_ep_run+0x80>
    2da4:	21 e0       	ldi	r18, 0x01	; 1
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	c1 14       	cp	r12, r1
    2daa:	d1 04       	cpc	r13, r1
    2dac:	29 f0       	breq	.+10     	; 0x2db8 <udd_ep_run+0x84>
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <udd_ep_run+0x84>
    2db4:	21 e0       	ldi	r18, 0x01	; 1
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	f7 01       	movw	r30, r14
    2dba:	80 81       	ld	r24, Z
    2dbc:	20 fb       	bst	r18, 0
    2dbe:	81 f9       	bld	r24, 1
    2dc0:	8b 7f       	andi	r24, 0xFB	; 251
    2dc2:	80 83       	st	Z, r24
    2dc4:	99 20       	and	r9, r9
    2dc6:	1c f4       	brge	.+6      	; 0x2dce <udd_ep_run+0x9a>
    2dc8:	1e 82       	std	Y+6, r1	; 0x06
    2dca:	1f 82       	std	Y+7, r1	; 0x07
    2dcc:	15 c0       	rjmp	.+42     	; 0x2df8 <udd_ep_run+0xc4>
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	80 7c       	andi	r24, 0xC0	; 192
    2dd2:	80 3c       	cpi	r24, 0xC0	; 192
    2dd4:	69 f4       	brne	.+26     	; 0x2df0 <udd_ep_run+0xbc>
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	d8 dc       	rcall	.-1616   	; 0x278a <udd_ep_get_size>
    2dda:	bc 01       	movw	r22, r24
    2ddc:	c6 01       	movw	r24, r12
    2dde:	45 d2       	rcall	.+1162   	; 0x326a <__udivmodhi4>
    2de0:	89 2b       	or	r24, r25
    2de2:	31 f0       	breq	.+12     	; 0x2df0 <udd_ep_run+0xbc>
    2de4:	f7 01       	movw	r30, r14
    2de6:	80 81       	ld	r24, Z
    2de8:	8e 7f       	andi	r24, 0xFE	; 254
    2dea:	80 83       	st	Z, r24
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	0b c0       	rjmp	.+22     	; 0x2e06 <udd_ep_run+0xd2>
    2df0:	1a 82       	std	Y+2, r1	; 0x02
    2df2:	1b 82       	std	Y+3, r1	; 0x03
    2df4:	1e 82       	std	Y+6, r1	; 0x06
    2df6:	1f 82       	std	Y+7, r1	; 0x07
    2df8:	89 2d       	mov	r24, r9
    2dfa:	7d dd       	rcall	.-1286   	; 0x28f6 <udd_ep_trans_complet>
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	03 c0       	rjmp	.+6      	; 0x2e06 <udd_ep_run+0xd2>
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	01 c0       	rjmp	.+2      	; 0x2e06 <udd_ep_run+0xd2>
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	ff 90       	pop	r15
    2e10:	ef 90       	pop	r14
    2e12:	df 90       	pop	r13
    2e14:	cf 90       	pop	r12
    2e16:	bf 90       	pop	r11
    2e18:	af 90       	pop	r10
    2e1a:	9f 90       	pop	r9
    2e1c:	8f 90       	pop	r8
    2e1e:	08 95       	ret

00002e20 <udd_ep_abort>:
    2e20:	0f 93       	push	r16
    2e22:	1f 93       	push	r17
    2e24:	cf 93       	push	r28
    2e26:	df 93       	push	r29
    2e28:	18 2f       	mov	r17, r24
    2e2a:	97 db       	rcall	.-2258   	; 0x255a <udd_ep_get_ctrl>
    2e2c:	ec 01       	movw	r28, r24
    2e2e:	81 2f       	mov	r24, r17
    2e30:	d7 dc       	rcall	.-1618   	; 0x27e0 <udd_ep_get_job>
    2e32:	dc 01       	movw	r26, r24
    2e34:	fe 01       	movw	r30, r28
    2e36:	02 e0       	ldi	r16, 0x02	; 2
    2e38:	05 93       	las	Z, r16
    2e3a:	8c 91       	ld	r24, X
    2e3c:	80 ff       	sbrs	r24, 0
    2e3e:	12 c0       	rjmp	.+36     	; 0x2e64 <udd_ep_abort+0x44>
    2e40:	8e 7f       	andi	r24, 0xFE	; 254
    2e42:	8c 93       	st	X, r24
    2e44:	17 96       	adiw	r26, 0x07	; 7
    2e46:	ed 91       	ld	r30, X+
    2e48:	fc 91       	ld	r31, X
    2e4a:	18 97       	sbiw	r26, 0x08	; 8
    2e4c:	30 97       	sbiw	r30, 0x00	; 0
    2e4e:	51 f0       	breq	.+20     	; 0x2e64 <udd_ep_abort+0x44>
    2e50:	11 23       	and	r17, r17
    2e52:	1c f4       	brge	.+6      	; 0x2e5a <udd_ep_abort+0x3a>
    2e54:	6e 81       	ldd	r22, Y+6	; 0x06
    2e56:	7f 81       	ldd	r23, Y+7	; 0x07
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <udd_ep_abort+0x3e>
    2e5a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e5c:	7b 81       	ldd	r23, Y+3	; 0x03
    2e5e:	41 2f       	mov	r20, r17
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	19 95       	eicall
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	1f 91       	pop	r17
    2e6a:	0f 91       	pop	r16
    2e6c:	08 95       	ret

00002e6e <udd_ep_set_halt>:
    2e6e:	0f 93       	push	r16
    2e70:	cf 93       	push	r28
    2e72:	c8 2f       	mov	r28, r24
    2e74:	72 db       	rcall	.-2332   	; 0x255a <udd_ep_get_ctrl>
    2e76:	fc 01       	movw	r30, r24
    2e78:	81 81       	ldd	r24, Z+1	; 0x01
    2e7a:	84 60       	ori	r24, 0x04	; 4
    2e7c:	81 83       	std	Z+1, r24	; 0x01
    2e7e:	01 e0       	ldi	r16, 0x01	; 1
    2e80:	06 93       	lac	Z, r16
    2e82:	8c 2f       	mov	r24, r28
    2e84:	cd df       	rcall	.-102    	; 0x2e20 <udd_ep_abort>
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	cf 91       	pop	r28
    2e8a:	0f 91       	pop	r16
    2e8c:	08 95       	ret

00002e8e <udd_ep_free>:
    2e8e:	cf 93       	push	r28
    2e90:	c8 2f       	mov	r28, r24
    2e92:	c6 df       	rcall	.-116    	; 0x2e20 <udd_ep_abort>
    2e94:	8c 2f       	mov	r24, r28
    2e96:	61 db       	rcall	.-2366   	; 0x255a <udd_ep_get_ctrl>
    2e98:	fc 01       	movw	r30, r24
    2e9a:	11 82       	std	Z+1, r1	; 0x01
    2e9c:	cf 91       	pop	r28
    2e9e:	08 95       	ret

00002ea0 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2ea0:	1f 92       	push	r1
    2ea2:	0f 92       	push	r0
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	0f 92       	push	r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	0b b6       	in	r0, 0x3b	; 59
    2eac:	0f 92       	push	r0
    2eae:	0f 93       	push	r16
    2eb0:	2f 93       	push	r18
    2eb2:	3f 93       	push	r19
    2eb4:	4f 93       	push	r20
    2eb6:	5f 93       	push	r21
    2eb8:	6f 93       	push	r22
    2eba:	7f 93       	push	r23
    2ebc:	8f 93       	push	r24
    2ebe:	9f 93       	push	r25
    2ec0:	af 93       	push	r26
    2ec2:	bf 93       	push	r27
    2ec4:	ef 93       	push	r30
    2ec6:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2ec8:	80 91 cb 04 	lds	r24, 0x04CB
    2ecc:	88 23       	and	r24, r24
    2ece:	3c f4       	brge	.+14     	; 0x2ede <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    2ed0:	80 e8       	ldi	r24, 0x80	; 128
    2ed2:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    2ed6:	40 d8       	rcall	.-3968   	; 0x1f58 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2ed8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2edc:	82 c0       	rjmp	.+260    	; 0x2fe2 <__vector_125+0x142>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2ede:	80 91 cb 04 	lds	r24, 0x04CB
    2ee2:	82 ff       	sbrs	r24, 2
    2ee4:	20 c0       	rjmp	.+64     	; 0x2f26 <__vector_125+0x86>
		udd_ack_underflow_event();
    2ee6:	84 e0       	ldi	r24, 0x04	; 4
    2ee8:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    2eec:	80 91 74 21 	lds	r24, 0x2174
    2ef0:	86 ff       	sbrs	r24, 6
    2ef2:	77 c0       	rjmp	.+238    	; 0x2fe2 <__vector_125+0x142>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2ef4:	80 91 cc 04 	lds	r24, 0x04CC
    2ef8:	81 fd       	sbrc	r24, 1
    2efa:	73 c0       	rjmp	.+230    	; 0x2fe2 <__vector_125+0x142>
    2efc:	8f dc       	rcall	.-1762   	; 0x281c <udd_ctrl_interrupt_tc_setup>
    2efe:	81 11       	cpse	r24, r1
    2f00:	70 c0       	rjmp	.+224    	; 0x2fe2 <__vector_125+0x142>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2f02:	80 91 4d 22 	lds	r24, 0x224D
    2f06:	81 30       	cpi	r24, 0x01	; 1
    2f08:	11 f4       	brne	.+4      	; 0x2f0e <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2f0a:	b7 db       	rcall	.-2194   	; 0x267a <udd_ctrl_send_zlp_in>
    2f0c:	6a c0       	rjmp	.+212    	; 0x2fe2 <__vector_125+0x142>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2f0e:	84 30       	cpi	r24, 0x04	; 4
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <__vector_125+0x74>
    2f12:	67 c0       	rjmp	.+206    	; 0x2fe2 <__vector_125+0x142>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2f14:	e5 e7       	ldi	r30, 0x75	; 117
    2f16:	f1 e2       	ldi	r31, 0x21	; 33
    2f18:	04 e0       	ldi	r16, 0x04	; 4
    2f1a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2f1c:	ed e6       	ldi	r30, 0x6D	; 109
    2f1e:	f1 e2       	ldi	r31, 0x21	; 33
    2f20:	04 e0       	ldi	r16, 0x04	; 4
    2f22:	05 93       	las	Z, r16
    2f24:	5e c0       	rjmp	.+188    	; 0x2fe2 <__vector_125+0x142>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2f26:	80 91 cb 04 	lds	r24, 0x04CB
    2f2a:	81 ff       	sbrs	r24, 1
    2f2c:	55 c0       	rjmp	.+170    	; 0x2fd8 <__vector_125+0x138>
		udd_ack_overflow_event();
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    2f34:	80 91 6c 21 	lds	r24, 0x216C
    2f38:	86 ff       	sbrs	r24, 6
    2f3a:	53 c0       	rjmp	.+166    	; 0x2fe2 <__vector_125+0x142>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2f3c:	80 91 cc 04 	lds	r24, 0x04CC
    2f40:	81 fd       	sbrc	r24, 1
    2f42:	4f c0       	rjmp	.+158    	; 0x2fe2 <__vector_125+0x142>
    2f44:	6b dc       	rcall	.-1834   	; 0x281c <udd_ctrl_interrupt_tc_setup>
    2f46:	81 11       	cpse	r24, r1
    2f48:	4c c0       	rjmp	.+152    	; 0x2fe2 <__vector_125+0x142>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2f4a:	80 91 4d 22 	lds	r24, 0x224D
    2f4e:	82 30       	cpi	r24, 0x02	; 2
    2f50:	11 f4       	brne	.+4      	; 0x2f56 <__vector_125+0xb6>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
    2f52:	a1 db       	rcall	.-2238   	; 0x2696 <udd_ctrl_send_zlp_out>
    2f54:	46 c0       	rjmp	.+140    	; 0x2fe2 <__vector_125+0x142>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2f56:	83 30       	cpi	r24, 0x03	; 3
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <__vector_125+0xbc>
    2f5a:	43 c0       	rjmp	.+134    	; 0x2fe2 <__vector_125+0x142>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2f5c:	e5 e7       	ldi	r30, 0x75	; 117
    2f5e:	f1 e2       	ldi	r31, 0x21	; 33
    2f60:	04 e0       	ldi	r16, 0x04	; 4
    2f62:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2f64:	ed e6       	ldi	r30, 0x6D	; 109
    2f66:	f1 e2       	ldi	r31, 0x21	; 33
    2f68:	04 e0       	ldi	r16, 0x04	; 4
    2f6a:	05 93       	las	Z, r16
    2f6c:	3a c0       	rjmp	.+116    	; 0x2fe2 <__vector_125+0x142>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2f6e:	80 e1       	ldi	r24, 0x10	; 16
    2f70:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	54 df       	rcall	.-344    	; 0x2e20 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2f78:	81 e8       	ldi	r24, 0x81	; 129
    2f7a:	52 df       	rcall	.-348    	; 0x2e20 <udd_ep_abort>
		}
#endif
		udc_reset();
    2f7c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2f80:	10 92 c3 04 	sts	0x04C3, r1
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
    2f84:	48 e0       	ldi	r20, 0x08	; 8
    2f86:	50 e0       	ldi	r21, 0x00	; 0
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	ff da       	rcall	.-2562   	; 0x258c <udd_ep_init>
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
    2f8e:	48 e0       	ldi	r20, 0x08	; 8
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	80 e8       	ldi	r24, 0x80	; 128
    2f96:	fa da       	rcall	.-2572   	; 0x258c <udd_ep_init>
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2f98:	85 e4       	ldi	r24, 0x45	; 69
    2f9a:	92 e2       	ldi	r25, 0x22	; 34
    2f9c:	80 93 70 21 	sts	0x2170, r24
    2fa0:	90 93 71 21 	sts	0x2171, r25
		// Reset endpoint control management
		udd_ctrl_init();
    2fa4:	31 db       	rcall	.-2462   	; 0x2608 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2fa6:	1d c0       	rjmp	.+58     	; 0x2fe2 <__vector_125+0x142>
	}

	if (udd_is_suspend_event()) {
    2fa8:	80 91 cb 04 	lds	r24, 0x04CB
    2fac:	86 ff       	sbrs	r24, 6
    2fae:	08 c0       	rjmp	.+16     	; 0x2fc0 <__vector_125+0x120>
		udd_ack_suspend_event();
    2fb0:	80 e4       	ldi	r24, 0x40	; 64
    2fb2:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	b1 da       	rcall	.-2718   	; 0x251c <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2fba:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2fbe:	11 c0       	rjmp	.+34     	; 0x2fe2 <__vector_125+0x142>
	}

	if (udd_is_resume_event()) {
    2fc0:	80 91 cb 04 	lds	r24, 0x04CB
    2fc4:	85 ff       	sbrs	r24, 5
    2fc6:	0d c0       	rjmp	.+26     	; 0x2fe2 <__vector_125+0x142>
		udd_ack_resume_event();
    2fc8:	80 e2       	ldi	r24, 0x20	; 32
    2fca:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	a5 da       	rcall	.-2742   	; 0x251c <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2fd2:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2fd6:	05 c0       	rjmp	.+10     	; 0x2fe2 <__vector_125+0x142>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2fd8:	80 91 cb 04 	lds	r24, 0x04CB
    2fdc:	84 fd       	sbrc	r24, 4
    2fde:	c7 cf       	rjmp	.-114    	; 0x2f6e <__vector_125+0xce>
    2fe0:	e3 cf       	rjmp	.-58     	; 0x2fa8 <__vector_125+0x108>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2fe2:	ff 91       	pop	r31
    2fe4:	ef 91       	pop	r30
    2fe6:	bf 91       	pop	r27
    2fe8:	af 91       	pop	r26
    2fea:	9f 91       	pop	r25
    2fec:	8f 91       	pop	r24
    2fee:	7f 91       	pop	r23
    2ff0:	6f 91       	pop	r22
    2ff2:	5f 91       	pop	r21
    2ff4:	4f 91       	pop	r20
    2ff6:	3f 91       	pop	r19
    2ff8:	2f 91       	pop	r18
    2ffa:	0f 91       	pop	r16
    2ffc:	0f 90       	pop	r0
    2ffe:	0b be       	out	0x3b, r0	; 59
    3000:	0f 90       	pop	r0
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	0f 90       	pop	r0
    3006:	1f 90       	pop	r1
    3008:	18 95       	reti

0000300a <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    300a:	1f 92       	push	r1
    300c:	0f 92       	push	r0
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	0f 92       	push	r0
    3012:	11 24       	eor	r1, r1
    3014:	0b b6       	in	r0, 0x3b	; 59
    3016:	0f 92       	push	r0
    3018:	0f 93       	push	r16
    301a:	1f 93       	push	r17
    301c:	2f 93       	push	r18
    301e:	3f 93       	push	r19
    3020:	4f 93       	push	r20
    3022:	5f 93       	push	r21
    3024:	6f 93       	push	r22
    3026:	7f 93       	push	r23
    3028:	8f 93       	push	r24
    302a:	9f 93       	push	r25
    302c:	af 93       	push	r26
    302e:	bf 93       	push	r27
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	ef 93       	push	r30
    3036:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    3038:	80 91 cc 04 	lds	r24, 0x04CC
    303c:	81 fd       	sbrc	r24, 1
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    3040:	ed db       	rcall	.-2086   	; 0x281c <udd_ctrl_interrupt_tc_setup>
    3042:	81 11       	cpse	r24, r1
    3044:	a9 c0       	rjmp	.+338    	; 0x3198 <__vector_126+0x18e>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    304c:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    3050:	81 95       	neg	r24
    3052:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    3054:	ec e6       	ldi	r30, 0x6C	; 108
    3056:	f1 e2       	ldi	r31, 0x21	; 33
    3058:	e8 1b       	sub	r30, r24
    305a:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    305c:	20 81       	ld	r18, Z
    305e:	31 81       	ldd	r19, Z+1	; 0x01
    3060:	2c 56       	subi	r18, 0x6C	; 108
    3062:	31 42       	sbci	r19, 0x21	; 33
    3064:	36 95       	lsr	r19
    3066:	27 95       	ror	r18
    3068:	36 95       	lsr	r19
    306a:	27 95       	ror	r18
    306c:	36 95       	lsr	r19
    306e:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    3070:	82 2f       	mov	r24, r18
    3072:	86 95       	lsr	r24
    3074:	20 ff       	sbrs	r18, 0
    3076:	02 c0       	rjmp	.+4      	; 0x307c <__vector_126+0x72>
    3078:	c0 e8       	ldi	r28, 0x80	; 128
    307a:	01 c0       	rjmp	.+2      	; 0x307e <__vector_126+0x74>
    307c:	c0 e0       	ldi	r28, 0x00	; 0
    307e:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    3080:	8c 2f       	mov	r24, r28
    3082:	6b da       	rcall	.-2858   	; 0x255a <udd_ep_get_ctrl>
    3084:	fc 01       	movw	r30, r24
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    3086:	80 81       	ld	r24, Z
    3088:	85 ff       	sbrs	r24, 5
    308a:	86 c0       	rjmp	.+268    	; 0x3198 <__vector_126+0x18e>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    308c:	00 e2       	ldi	r16, 0x20	; 32
    308e:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    3090:	c1 11       	cpse	r28, r1
    3092:	7c c0       	rjmp	.+248    	; 0x318c <__vector_126+0x182>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    3094:	80 91 4d 22 	lds	r24, 0x224D
    3098:	84 30       	cpi	r24, 0x04	; 4
    309a:	19 f4       	brne	.+6      	; 0x30a2 <__vector_126+0x98>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    309c:	06 db       	rcall	.-2548   	; 0x26aa <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    309e:	b4 da       	rcall	.-2712   	; 0x2608 <udd_ctrl_init>
    30a0:	7b c0       	rjmp	.+246    	; 0x3198 <__vector_126+0x18e>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    30a2:	c0 91 6e 21 	lds	r28, 0x216E
    30a6:	d0 91 6f 21 	lds	r29, 0x216F

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    30aa:	80 91 6e 2a 	lds	r24, 0x2A6E
    30ae:	90 91 6f 2a 	lds	r25, 0x2A6F
    30b2:	00 91 50 22 	lds	r16, 0x2250
    30b6:	10 91 51 22 	lds	r17, 0x2251
    30ba:	98 01       	movw	r18, r16
    30bc:	2c 0f       	add	r18, r28
    30be:	3d 1f       	adc	r19, r29
    30c0:	82 17       	cp	r24, r18
    30c2:	93 07       	cpc	r25, r19
    30c4:	18 f4       	brcc	.+6      	; 0x30cc <__vector_126+0xc2>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    30c6:	ec 01       	movw	r28, r24
    30c8:	c0 1b       	sub	r28, r16
    30ca:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    30cc:	20 91 6c 2a 	lds	r18, 0x2A6C
    30d0:	30 91 6d 2a 	lds	r19, 0x2A6D
    30d4:	20 0f       	add	r18, r16
    30d6:	31 1f       	adc	r19, r17
    30d8:	85 e4       	ldi	r24, 0x45	; 69
    30da:	92 e2       	ldi	r25, 0x22	; 34
    30dc:	4c 2f       	mov	r20, r28
    30de:	5d 2f       	mov	r21, r29
    30e0:	68 2f       	mov	r22, r24
    30e2:	79 2f       	mov	r23, r25
    30e4:	82 2f       	mov	r24, r18
    30e6:	93 2f       	mov	r25, r19
    30e8:	e0 d0       	rcall	.+448    	; 0x32aa <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    30ea:	0c 0f       	add	r16, r28
    30ec:	1d 1f       	adc	r17, r29
    30ee:	00 93 50 22 	sts	0x2250, r16
    30f2:	10 93 51 22 	sts	0x2251, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    30f6:	28 97       	sbiw	r28, 0x08	; 8
    30f8:	69 f4       	brne	.+26     	; 0x3114 <__vector_126+0x10a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    30fa:	80 91 4e 22 	lds	r24, 0x224E
    30fe:	90 91 4f 22 	lds	r25, 0x224F
    3102:	80 0f       	add	r24, r16
    3104:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    3106:	20 91 6a 2a 	lds	r18, 0x2A6A
    310a:	30 91 6b 2a 	lds	r19, 0x2A6B
    310e:	82 17       	cp	r24, r18
    3110:	93 07       	cpc	r25, r19
    3112:	88 f0       	brcs	.+34     	; 0x3136 <__vector_126+0x12c>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3114:	00 93 6e 2a 	sts	0x2A6E, r16
    3118:	10 93 6f 2a 	sts	0x2A6F, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    311c:	e0 91 72 2a 	lds	r30, 0x2A72
    3120:	f0 91 73 2a 	lds	r31, 0x2A73
    3124:	30 97       	sbiw	r30, 0x00	; 0
    3126:	29 f0       	breq	.+10     	; 0x3132 <__vector_126+0x128>
			if (!udd_g_ctrlreq.over_under_run()) {
    3128:	19 95       	eicall
    312a:	81 11       	cpse	r24, r1
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <__vector_126+0x128>
				// Stall ZLP
				udd_ctrl_stall_data();
    312e:	97 da       	rcall	.-2770   	; 0x265e <udd_ctrl_stall_data>
    3130:	33 c0       	rjmp	.+102    	; 0x3198 <__vector_126+0x18e>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    3132:	a3 da       	rcall	.-2746   	; 0x267a <udd_ctrl_send_zlp_in>
    3134:	31 c0       	rjmp	.+98     	; 0x3198 <__vector_126+0x18e>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3136:	80 91 6e 2a 	lds	r24, 0x2A6E
    313a:	90 91 6f 2a 	lds	r25, 0x2A6F
    313e:	08 17       	cp	r16, r24
    3140:	19 07       	cpc	r17, r25
    3142:	f9 f4       	brne	.+62     	; 0x3182 <__vector_126+0x178>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    3144:	e0 91 72 2a 	lds	r30, 0x2A72
    3148:	f0 91 73 2a 	lds	r31, 0x2A73
    314c:	30 97       	sbiw	r30, 0x00	; 0
    314e:	11 f4       	brne	.+4      	; 0x3154 <__vector_126+0x14a>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    3150:	86 da       	rcall	.-2804   	; 0x265e <udd_ctrl_stall_data>
    3152:	22 c0       	rjmp	.+68     	; 0x3198 <__vector_126+0x18e>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    3154:	19 95       	eicall
    3156:	81 11       	cpse	r24, r1
    3158:	02 c0       	rjmp	.+4      	; 0x315e <__vector_126+0x154>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    315a:	81 da       	rcall	.-2814   	; 0x265e <udd_ctrl_stall_data>
    315c:	1d c0       	rjmp	.+58     	; 0x3198 <__vector_126+0x18e>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    315e:	20 91 4e 22 	lds	r18, 0x224E
    3162:	30 91 4f 22 	lds	r19, 0x224F
    3166:	80 91 50 22 	lds	r24, 0x2250
    316a:	90 91 51 22 	lds	r25, 0x2251
    316e:	82 0f       	add	r24, r18
    3170:	93 1f       	adc	r25, r19
    3172:	80 93 4e 22 	sts	0x224E, r24
    3176:	90 93 4f 22 	sts	0x224F, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    317a:	10 92 50 22 	sts	0x2250, r1
    317e:	10 92 51 22 	sts	0x2251, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    3182:	ec e6       	ldi	r30, 0x6C	; 108
    3184:	f1 e2       	ldi	r31, 0x21	; 33
    3186:	02 e0       	ldi	r16, 0x02	; 2
    3188:	06 93       	lac	Z, r16
    318a:	06 c0       	rjmp	.+12     	; 0x3198 <__vector_126+0x18e>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    318c:	c0 38       	cpi	r28, 0x80	; 128
    318e:	11 f4       	brne	.+4      	; 0x3194 <__vector_126+0x18a>
		udd_ctrl_in_sent();
    3190:	94 da       	rcall	.-2776   	; 0x26ba <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <__vector_126+0x18e>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    3194:	8c 2f       	mov	r24, r28
    3196:	af db       	rcall	.-2210   	; 0x28f6 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    3198:	ff 91       	pop	r31
    319a:	ef 91       	pop	r30
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	bf 91       	pop	r27
    31a2:	af 91       	pop	r26
    31a4:	9f 91       	pop	r25
    31a6:	8f 91       	pop	r24
    31a8:	7f 91       	pop	r23
    31aa:	6f 91       	pop	r22
    31ac:	5f 91       	pop	r21
    31ae:	4f 91       	pop	r20
    31b0:	3f 91       	pop	r19
    31b2:	2f 91       	pop	r18
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	0f 90       	pop	r0
    31ba:	0b be       	out	0x3b, r0	; 59
    31bc:	0f 90       	pop	r0
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	0f 90       	pop	r0
    31c2:	1f 90       	pop	r1
    31c4:	18 95       	reti

000031c6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    31c6:	cf 93       	push	r28
    31c8:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
    31ca:	fc 01       	movw	r30, r24
    31cc:	70 96       	adiw	r30, 0x10	; 16
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    31d2:	c6 2f       	mov	r28, r22
    31d4:	d0 e0       	ldi	r29, 0x00	; 0
    31d6:	de 01       	movw	r26, r28
    31d8:	02 2e       	mov	r0, r18
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <ioport_configure_port_pin+0x1a>
    31dc:	b5 95       	asr	r27
    31de:	a7 95       	ror	r26
    31e0:	0a 94       	dec	r0
    31e2:	e2 f7       	brpl	.-8      	; 0x31dc <ioport_configure_port_pin+0x16>
    31e4:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    31e6:	50 83       	st	Z, r21
    31e8:	2f 5f       	subi	r18, 0xFF	; 255
    31ea:	3f 4f       	sbci	r19, 0xFF	; 255
    31ec:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    31ee:	28 30       	cpi	r18, 0x08	; 8
    31f0:	31 05       	cpc	r19, r1
    31f2:	89 f7       	brne	.-30     	; 0x31d6 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    31f4:	40 ff       	sbrs	r20, 0
    31f6:	0a c0       	rjmp	.+20     	; 0x320c <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    31f8:	41 ff       	sbrs	r20, 1
    31fa:	03 c0       	rjmp	.+6      	; 0x3202 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    31fc:	fc 01       	movw	r30, r24
    31fe:	65 83       	std	Z+5, r22	; 0x05
    3200:	02 c0       	rjmp	.+4      	; 0x3206 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    3202:	fc 01       	movw	r30, r24
    3204:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    3206:	fc 01       	movw	r30, r24
    3208:	61 83       	std	Z+1, r22	; 0x01
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    320c:	fc 01       	movw	r30, r24
    320e:	62 83       	std	Z+2, r22	; 0x02
	}
}
    3210:	df 91       	pop	r29
    3212:	cf 91       	pop	r28
    3214:	08 95       	ret

00003216 <board_init>:
    3216:	43 e0       	ldi	r20, 0x03	; 3
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	61 e0       	ldi	r22, 0x01	; 1
    321c:	80 ee       	ldi	r24, 0xE0	; 224
    321e:	97 e0       	ldi	r25, 0x07	; 7
    3220:	d2 df       	rcall	.-92     	; 0x31c6 <ioport_configure_port_pin>
    3222:	43 e0       	ldi	r20, 0x03	; 3
    3224:	50 e0       	ldi	r21, 0x00	; 0
    3226:	62 e0       	ldi	r22, 0x02	; 2
    3228:	80 ee       	ldi	r24, 0xE0	; 224
    322a:	97 e0       	ldi	r25, 0x07	; 7
    322c:	cc df       	rcall	.-104    	; 0x31c6 <ioport_configure_port_pin>
    322e:	43 e0       	ldi	r20, 0x03	; 3
    3230:	50 e0       	ldi	r21, 0x00	; 0
    3232:	60 e1       	ldi	r22, 0x10	; 16
    3234:	80 e6       	ldi	r24, 0x60	; 96
    3236:	96 e0       	ldi	r25, 0x06	; 6
    3238:	c6 df       	rcall	.-116    	; 0x31c6 <ioport_configure_port_pin>
    323a:	41 e0       	ldi	r20, 0x01	; 1
    323c:	50 e4       	ldi	r21, 0x40	; 64
    323e:	60 e2       	ldi	r22, 0x20	; 32
    3240:	80 e6       	ldi	r24, 0x60	; 96
    3242:	96 e0       	ldi	r25, 0x06	; 6
    3244:	c0 df       	rcall	.-128    	; 0x31c6 <ioport_configure_port_pin>
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	5b e1       	ldi	r21, 0x1B	; 27
    324a:	60 e2       	ldi	r22, 0x20	; 32
    324c:	80 e8       	ldi	r24, 0x80	; 128
    324e:	96 e0       	ldi	r25, 0x06	; 6
    3250:	ba df       	rcall	.-140    	; 0x31c6 <ioport_configure_port_pin>
    3252:	40 e0       	ldi	r20, 0x00	; 0
    3254:	5b e1       	ldi	r21, 0x1B	; 27
    3256:	62 e0       	ldi	r22, 0x02	; 2
    3258:	80 ea       	ldi	r24, 0xA0	; 160
    325a:	96 e0       	ldi	r25, 0x06	; 6
    325c:	b4 df       	rcall	.-152    	; 0x31c6 <ioport_configure_port_pin>
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	5b e1       	ldi	r21, 0x1B	; 27
    3262:	64 e0       	ldi	r22, 0x04	; 4
    3264:	80 ea       	ldi	r24, 0xA0	; 160
    3266:	96 e0       	ldi	r25, 0x06	; 6
    3268:	ae cf       	rjmp	.-164    	; 0x31c6 <ioport_configure_port_pin>

0000326a <__udivmodhi4>:
    326a:	aa 1b       	sub	r26, r26
    326c:	bb 1b       	sub	r27, r27
    326e:	51 e1       	ldi	r21, 0x11	; 17
    3270:	07 c0       	rjmp	.+14     	; 0x3280 <__udivmodhi4_ep>

00003272 <__udivmodhi4_loop>:
    3272:	aa 1f       	adc	r26, r26
    3274:	bb 1f       	adc	r27, r27
    3276:	a6 17       	cp	r26, r22
    3278:	b7 07       	cpc	r27, r23
    327a:	10 f0       	brcs	.+4      	; 0x3280 <__udivmodhi4_ep>
    327c:	a6 1b       	sub	r26, r22
    327e:	b7 0b       	sbc	r27, r23

00003280 <__udivmodhi4_ep>:
    3280:	88 1f       	adc	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	5a 95       	dec	r21
    3286:	a9 f7       	brne	.-22     	; 0x3272 <__udivmodhi4_loop>
    3288:	80 95       	com	r24
    328a:	90 95       	com	r25
    328c:	bc 01       	movw	r22, r24
    328e:	cd 01       	movw	r24, r26
    3290:	08 95       	ret

00003292 <__umulhisi3>:
    3292:	a2 9f       	mul	r26, r18
    3294:	b0 01       	movw	r22, r0
    3296:	b3 9f       	mul	r27, r19
    3298:	c0 01       	movw	r24, r0
    329a:	a3 9f       	mul	r26, r19
    329c:	01 d0       	rcall	.+2      	; 0x32a0 <__umulhisi3+0xe>
    329e:	b2 9f       	mul	r27, r18
    32a0:	70 0d       	add	r23, r0
    32a2:	81 1d       	adc	r24, r1
    32a4:	11 24       	eor	r1, r1
    32a6:	91 1d       	adc	r25, r1
    32a8:	08 95       	ret

000032aa <memcpy>:
    32aa:	fb 01       	movw	r30, r22
    32ac:	dc 01       	movw	r26, r24
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <memcpy+0xa>
    32b0:	01 90       	ld	r0, Z+
    32b2:	0d 92       	st	X+, r0
    32b4:	41 50       	subi	r20, 0x01	; 1
    32b6:	50 40       	sbci	r21, 0x00	; 0
    32b8:	d8 f7       	brcc	.-10     	; 0x32b0 <memcpy+0x6>
    32ba:	08 95       	ret

000032bc <_exit>:
    32bc:	f8 94       	cli

000032be <__stop_program>:
    32be:	ff cf       	rjmp	.-2      	; 0x32be <__stop_program>
