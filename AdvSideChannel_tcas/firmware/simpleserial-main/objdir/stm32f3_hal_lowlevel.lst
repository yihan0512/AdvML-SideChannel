   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f3_hal_lowlevel.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_GetPriorityGrouping,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	NVIC_GetPriorityGrouping:
  26              	.LFB107:
  27              		.file 1 ".././hal/stm32f3/CMSIS/core/core_cm4.h"
   1:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**************************************************************************//**
   2:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  * @file     core_cm4.h
   3:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  * @version  V4.30
   5:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  * @date     20. October 2015
   6:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
   7:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
   9:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    All rights reserved.
  10:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      to endorse or promote products derived from this software without
  19:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      specific prior written permission.
  20:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    *
  21:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  34:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  35:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if   defined ( __ICCARM__ )
  36:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
  40:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  41:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  44:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #include <stdint.h>
  45:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  46:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
  47:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  extern "C" {
  48:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
  49:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  50:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
  51:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  54:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  57:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      Unions are used for effective representation of core registers.
  59:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  60:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
  63:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  64:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  65:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*******************************************************************************
  66:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  *                 CMSIS definitions
  67:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
  68:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
  69:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup Cortex_M4
  70:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
  71:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
  72:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  73:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*  CMSIS CM4 definitions */
  74:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:.././hal/stm32f3/CMSIS/core/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  79:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  81:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  82:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if   defined ( __CC_ARM )
  83:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  87:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  92:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __GNUC__ )
  93:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  97:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __ICCARM__ )
  98:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 102:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TMS470__ )
 103:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 106:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TASKING__ )
 107:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 111:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __CSMC__ )
 112:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __packed
 113:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 117:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #else
 118:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #error Unknown compiler
 119:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 120:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 121:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
 124:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if defined ( __CC_ARM )
 125:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 128:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 129:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 131:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 132:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 133:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 134:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 135:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 136:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 140:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 141:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 143:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 144:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 145:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 146:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 147:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 148:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __GNUC__ )
 149:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 152:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 153:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 155:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 156:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 157:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 158:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 159:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 160:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __ICCARM__ )
 161:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __ARMVFP__
 162:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 164:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 165:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 167:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 168:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 169:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 170:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 171:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 172:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TMS470__ )
 173:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 176:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 177:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 179:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 180:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 181:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 182:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 183:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 184:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TASKING__ )
 185:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __FPU_VFP__
 186:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 188:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 189:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 191:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 192:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 193:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 194:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 195:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 196:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __CSMC__ )
 197:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 200:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 201:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 203:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 204:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 205:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 206:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 207:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 208:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 209:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 210:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 214:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
 215:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
 216:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 217:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 218:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 220:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 222:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 225:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
 226:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  extern "C" {
 227:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 228:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 229:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* check device defines and use defaults */
 230:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __CM4_REV
 232:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __CM4_REV               0x0000U
 233:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 235:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 236:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __FPU_PRESENT
 237:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_PRESENT             0U
 238:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 240:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 241:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __MPU_PRESENT
 242:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __MPU_PRESENT             0U
 243:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 245:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 246:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 250:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 251:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 255:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 256:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 257:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 259:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 261:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     \li to specify the access to peripheral variables.
 263:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
 265:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
 266:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #else
 268:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 270:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 273:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* following defines should be used for structure members */
 274:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 278:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group Cortex_M4 */
 279:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 280:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 281:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 282:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*******************************************************************************
 283:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  *                 Register Abstraction
 284:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   Core Register contain:
 285:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Register
 286:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core NVIC Register
 287:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core SCB Register
 288:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core SysTick Register
 289:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Debug Register
 290:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core MPU Register
 291:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core FPU Register
 292:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
 293:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 294:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
 297:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 298:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 299:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
 300:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Core Register type definitions.
 302:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 303:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 304:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 305:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 306:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 308:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 309:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 310:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 311:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 312:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } APSR_Type;
 323:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 324:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* APSR Register Definitions */
 325:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 328:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 331:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 334:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 337:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 340:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 343:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 344:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 345:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 347:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 348:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 349:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 350:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 351:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } IPSR_Type;
 356:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 357:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* IPSR Register Definitions */
 358:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 361:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 362:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 363:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 365:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 366:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 367:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 368:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 369:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } xPSR_Type;
 383:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 384:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* xPSR Register Definitions */
 385:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 388:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 391:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 394:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 397:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 400:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 403:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 406:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 409:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 412:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 413:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 414:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 416:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 417:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 418:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 419:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 420:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } CONTROL_Type;
 427:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 428:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* CONTROL Register Definitions */
 429:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 432:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 435:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 438:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 440:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 441:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 442:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
 443:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 446:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 447:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 448:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 449:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 451:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 452:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 453:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[24U];
 455:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RSERVED1[24U];
 457:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[24U];
 459:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED3[24U];
 461:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED4[56U];
 463:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED5[644U];
 465:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }  NVIC_Type;
 467:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 468:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 472:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 474:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 475:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 476:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 477:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 480:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 481:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 482:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 483:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 485:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 486:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 487:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[5U];
 507:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } SCB_Type;
 509:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 510:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB CPUID Register Definitions */
 511:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 514:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 517:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 520:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 523:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 526:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 530:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 533:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 536:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 539:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 542:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 545:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 548:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 551:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 554:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 557:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 561:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 565:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 568:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 571:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 574:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 577:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 580:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 583:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB System Control Register Definitions */
 584:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 587:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 590:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 593:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 597:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 600:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 603:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 606:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 609:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 612:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 616:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 619:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 622:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 625:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 628:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 631:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 634:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 637:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 640:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 643:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 646:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 649:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 652:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 655:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 659:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 662:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 665:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 669:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 672:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 675:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 679:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 682:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 685:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 688:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 691:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 693:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 694:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 695:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 696:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 699:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 700:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 701:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 702:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 704:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 705:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[1U];
 707:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } SCnSCB_Type;
 710:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 711:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 715:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 719:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 722:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 725:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 728:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 731:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 733:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 734:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 735:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 736:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 739:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 740:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 741:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 742:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 744:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 745:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 746:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } SysTick_Type;
 751:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 752:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 756:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 759:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 762:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 765:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Reload Register Definitions */
 766:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 769:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Current Register Definitions */
 770:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 773:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 777:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 780:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 783:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 785:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 786:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 787:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 788:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 791:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 792:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 793:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 794:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 796:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 797:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 798:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  union
 799:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 800:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[864U];
 805:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED1[15U];
 807:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[15U];
 809:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED3[29U];
 811:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED4[43U];
 815:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED5[6U];
 818:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } ITM_Type;
 831:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 832:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 836:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 840:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 843:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 846:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 849:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 852:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 855:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 858:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 861:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 864:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 868:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 872:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 876:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 880:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 883:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 886:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 888:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 889:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 890:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 894:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 895:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 896:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 897:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 899:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 900:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 901:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } DWT_Type;
 925:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 926:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Control Register Definitions */
 927:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 930:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 933:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 936:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 939:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 942:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 945:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 948:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 951:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 954:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 957:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 960:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 963:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 966:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 969:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 972:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 975:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 978:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 981:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 985:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 989:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 993:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 997:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1001:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1005:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1009:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1012:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1015:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1018:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1021:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1024:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1027:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1030:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1033:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1035:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1036:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1037:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1041:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1042:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1043:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1044:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1046:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1047:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1048:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } TPI_Type;
1073:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1074:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1078:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1082:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1086:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1089:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1092:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1095:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1099:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1102:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1106:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1110:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1113:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1116:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1119:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1122:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1125:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1128:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1132:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1136:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1139:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1142:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1145:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1148:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1151:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1154:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1158:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1162:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI DEVID Register Definitions */
1163:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1166:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1169:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1172:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1175:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1178:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1181:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1185:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1188:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1190:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1191:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1193:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1194:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1197:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1198:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1199:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1200:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1202:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1203:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1204:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } MPU_Type;
1216:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1217:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Type Register Definitions */
1218:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1221:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1224:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1227:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Control Register Definitions */
1228:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1231:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1234:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1237:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Region Number Register Definitions */
1238:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1241:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1245:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1248:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1251:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1255:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1258:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1261:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1264:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1267:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1270:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1273:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1276:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1279:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1282:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1284:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1285:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1286:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1288:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1289:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1292:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1293:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1294:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1295:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1297:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1298:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1299:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[1U];
1300:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } FPU_Type;
1306:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1307:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1311:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1314:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1317:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1320:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1323:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1326:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1329:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1332:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1335:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1339:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1343:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1346:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1349:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1352:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1356:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1359:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1362:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1365:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1368:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1371:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1374:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1377:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1381:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1384:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1387:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1390:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1392:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1393:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1394:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1395:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1396:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1399:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1400:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1401:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1402:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1404:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1405:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1406:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } CoreDebug_Type;
1411:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1412:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1416:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1419:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1422:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1425:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1428:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1431:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1434:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1437:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1440:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1443:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1446:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1449:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1453:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1456:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1460:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1463:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1466:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1469:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1472:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1475:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1478:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1481:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1484:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1487:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1490:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1493:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1496:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1498:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1499:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1500:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
1501:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1504:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1505:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1506:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1507:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] value  Value of the bit field.
1510:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return           Masked and shifted value.
1511:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
1512:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1514:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1515:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] value  Value of register.
1518:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return           Masked and shifted bit field value.
1519:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
1520:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1522:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1524:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1525:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1526:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
1527:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1530:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1531:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1532:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1542:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1551:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1555:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1556:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1560:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1561:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} */
1562:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1563:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1564:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1565:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*******************************************************************************
1566:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  *                Hardware Abstraction Layer
1567:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   Core Function Interface contains:
1568:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core NVIC Functions
1569:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core SysTick Functions
1570:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Debug Functions
1571:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Register Access Functions
1572:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
1573:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1574:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
1576:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1577:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1578:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1579:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1581:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1585:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1586:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1587:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1588:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Set Priority Grouping
1589:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            Only values from 0..7 are used.
1592:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            In case of a conflict between priority grouping and available
1593:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1596:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1598:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t reg_value;
1599:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1601:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:.././hal/stm32f3/CMSIS/core/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:.././hal/stm32f3/CMSIS/core/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1608:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1609:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1610:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1611:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Priority Grouping
1612:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1615:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
  28              		.loc 1 1616 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
1617:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
  40              		.loc 1 1617 26
  41 0004 044B     		ldr	r3, .L3
  42 0006 DB68     		ldr	r3, [r3, #12]
  43              		.loc 1 1617 11
  44 0008 1B0A     		lsrs	r3, r3, #8
  45 000a 03F00703 		and	r3, r3, #7
1618:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
  46              		.loc 1 1618 1
  47 000e 1846     		mov	r0, r3
  48 0010 BD46     		mov	sp, r7
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 13
  51              		@ sp needed
  52 0012 5DF8047B 		ldr	r7, [sp], #4
  53              	.LCFI3:
  54              		.cfi_restore 7
  55              		.cfi_def_cfa_offset 0
  56 0016 7047     		bx	lr
  57              	.L4:
  58              		.align	2
  59              	.L3:
  60 0018 00ED00E0 		.word	-536810240
  61              		.cfi_endproc
  62              	.LFE107:
  64              		.section	.text.NVIC_SetPriority,"ax",%progbits
  65              		.align	1
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	NVIC_SetPriority:
  72              	.LFB114:
1619:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1620:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1621:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1622:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Enable External Interrupt
1623:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1626:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1628:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1629:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1630:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1631:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1632:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1633:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Disable External Interrupt
1634:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1637:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1639:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1640:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1641:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1642:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1643:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1644:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Pending Interrupt
1645:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1646:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1647:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             0  Interrupt status is not pending.
1648:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             1  Interrupt status is pending.
1649:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1650:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1651:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1652:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1653:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1654:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1655:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1656:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1657:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Set Pending Interrupt
1658:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Sets the pending bit of an external interrupt.
1659:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1660:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1661:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1662:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1663:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1664:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1665:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1666:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1667:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1668:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Clear Pending Interrupt
1669:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Clears the pending bit of an external interrupt.
1670:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1671:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1672:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1673:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1674:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1675:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1676:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1677:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1678:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1679:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Active Interrupt
1680:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the active register in NVIC and returns the active bit.
1681:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1682:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             0  Interrupt status is not active.
1683:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             1  Interrupt status is active.
1684:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1685:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1686:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1687:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1688:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1689:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1690:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1691:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1692:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Set Interrupt Priority
1693:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Sets the priority of an interrupt.
1694:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \note    The priority cannot be set for every core interrupt.
1695:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1696:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]  priority  Priority to set.
1697:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1698:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1699:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
  73              		.loc 1 1699 1
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 8
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78 0000 80B4     		push	{r7}
  79              	.LCFI4:
  80              		.cfi_def_cfa_offset 4
  81              		.cfi_offset 7, -4
  82 0002 83B0     		sub	sp, sp, #12
  83              	.LCFI5:
  84              		.cfi_def_cfa_offset 16
  85 0004 00AF     		add	r7, sp, #0
  86              	.LCFI6:
  87              		.cfi_def_cfa_register 7
  88 0006 0346     		mov	r3, r0
  89 0008 3960     		str	r1, [r7]
  90 000a FB71     		strb	r3, [r7, #7]
1700:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
  91              		.loc 1 1700 6
  92 000c 97F90730 		ldrsb	r3, [r7, #7]
  93 0010 002B     		cmp	r3, #0
  94 0012 0BDA     		bge	.L6
1701:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1702:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
  95              		.loc 1 1702 57
  96 0014 3B68     		ldr	r3, [r7]
  97 0016 DAB2     		uxtb	r2, r3
  98              		.loc 1 1702 8
  99 0018 0C49     		ldr	r1, .L9
 100              		.loc 1 1702 41
 101 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 102 001c 03F00F03 		and	r3, r3, #15
 103              		.loc 1 1702 49
 104 0020 043B     		subs	r3, r3, #4
 105              		.loc 1 1702 57
 106 0022 1201     		lsls	r2, r2, #4
 107 0024 D2B2     		uxtb	r2, r2
 108              		.loc 1 1702 55
 109 0026 0B44     		add	r3, r3, r1
 110 0028 1A76     		strb	r2, [r3, #24]
1703:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1704:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   else
1705:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1707:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1708:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
 111              		.loc 1 1708 1
 112 002a 09E0     		b	.L8
 113              	.L6:
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 114              		.loc 1 1706 57
 115 002c 3B68     		ldr	r3, [r7]
 116 002e DAB2     		uxtb	r2, r3
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 117              		.loc 1 1706 9
 118 0030 0749     		ldr	r1, .L9+4
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 119              		.loc 1 1706 15
 120 0032 97F90730 		ldrsb	r3, [r7, #7]
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 121              		.loc 1 1706 57
 122 0036 1201     		lsls	r2, r2, #4
 123 0038 D2B2     		uxtb	r2, r2
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 124              		.loc 1 1706 55
 125 003a 0B44     		add	r3, r3, r1
 126 003c 83F80023 		strb	r2, [r3, #768]
 127              	.L8:
 128              		.loc 1 1708 1
 129 0040 00BF     		nop
 130 0042 0C37     		adds	r7, r7, #12
 131              	.LCFI7:
 132              		.cfi_def_cfa_offset 4
 133 0044 BD46     		mov	sp, r7
 134              	.LCFI8:
 135              		.cfi_def_cfa_register 13
 136              		@ sp needed
 137 0046 5DF8047B 		ldr	r7, [sp], #4
 138              	.LCFI9:
 139              		.cfi_restore 7
 140              		.cfi_def_cfa_offset 0
 141 004a 7047     		bx	lr
 142              	.L10:
 143              		.align	2
 144              	.L9:
 145 004c 00ED00E0 		.word	-536810240
 146 0050 00E100E0 		.word	-536813312
 147              		.cfi_endproc
 148              	.LFE114:
 150              		.section	.text.NVIC_EncodePriority,"ax",%progbits
 151              		.align	1
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu fpv4-sp-d16
 157              	NVIC_EncodePriority:
 158              	.LFB116:
1709:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1710:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1711:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1712:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Interrupt Priority
1713:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the priority of an interrupt.
1714:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1715:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            or negative to specify an internal (core) interrupt.
1716:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1717:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             Interrupt Priority.
1718:.././hal/stm32f3/CMSIS/core/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1719:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1720:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1721:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1722:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1723:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1724:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1725:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1726:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1727:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   else
1728:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1729:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1730:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1731:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1732:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1733:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1734:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1735:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Encode Priority
1736:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1737:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            preemptive priority value, and subpriority value.
1738:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            In case of a conflict between priority grouping and available
1739:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1740:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1741:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1742:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1743:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1744:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1745:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1746:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 159              		.loc 1 1746 1
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 32
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164 0000 80B4     		push	{r7}
 165              	.LCFI10:
 166              		.cfi_def_cfa_offset 4
 167              		.cfi_offset 7, -4
 168 0002 89B0     		sub	sp, sp, #36
 169              	.LCFI11:
 170              		.cfi_def_cfa_offset 40
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI12:
 173              		.cfi_def_cfa_register 7
 174 0006 F860     		str	r0, [r7, #12]
 175 0008 B960     		str	r1, [r7, #8]
 176 000a 7A60     		str	r2, [r7, #4]
1747:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 177              		.loc 1 1747 12
 178 000c FB68     		ldr	r3, [r7, #12]
 179 000e 03F00703 		and	r3, r3, #7
 180 0012 FB61     		str	r3, [r7, #28]
1748:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t PreemptPriorityBits;
1749:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t SubPriorityBits;
1750:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1751:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 181              		.loc 1 1751 31
 182 0014 FB69     		ldr	r3, [r7, #28]
 183 0016 C3F10703 		rsb	r3, r3, #7
 184              		.loc 1 1751 23
 185 001a 042B     		cmp	r3, #4
 186 001c 28BF     		it	cs
 187 001e 0423     		movcs	r3, #4
 188 0020 BB61     		str	r3, [r7, #24]
1752:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 189              		.loc 1 1752 44
 190 0022 FB69     		ldr	r3, [r7, #28]
 191 0024 0433     		adds	r3, r3, #4
 192              		.loc 1 1752 109
 193 0026 062B     		cmp	r3, #6
 194 0028 02D9     		bls	.L12
 195              		.loc 1 1752 109 is_stmt 0 discriminator 1
 196 002a FB69     		ldr	r3, [r7, #28]
 197 002c 033B     		subs	r3, r3, #3
 198 002e 00E0     		b	.L13
 199              	.L12:
 200              		.loc 1 1752 109 discriminator 2
 201 0030 0023     		movs	r3, #0
 202              	.L13:
 203              		.loc 1 1752 23 is_stmt 1 discriminator 4
 204 0032 7B61     		str	r3, [r7, #20]
1753:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1754:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   return (
1755:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 205              		.loc 1 1755 30 discriminator 4
 206 0034 4FF0FF32 		mov	r2, #-1
 207 0038 BB69     		ldr	r3, [r7, #24]
 208 003a 02FA03F3 		lsl	r3, r2, r3
 209 003e DA43     		mvns	r2, r3
 210 0040 BB68     		ldr	r3, [r7, #8]
 211 0042 1A40     		ands	r2, r2, r3
 212              		.loc 1 1755 82 discriminator 4
 213 0044 7B69     		ldr	r3, [r7, #20]
 214 0046 9A40     		lsls	r2, r2, r3
1756:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 215              		.loc 1 1756 30 discriminator 4
 216 0048 4FF0FF31 		mov	r1, #-1
 217 004c 7B69     		ldr	r3, [r7, #20]
 218 004e 01FA03F3 		lsl	r3, r1, r3
 219 0052 D943     		mvns	r1, r3
 220 0054 7B68     		ldr	r3, [r7, #4]
 221 0056 0B40     		ands	r3, r3, r1
1755:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 222              		.loc 1 1755 102 discriminator 4
 223 0058 1343     		orrs	r3, r3, r2
1757:.././hal/stm32f3/CMSIS/core/core_cm4.h ****          );
1758:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
 224              		.loc 1 1758 1 discriminator 4
 225 005a 1846     		mov	r0, r3
 226 005c 2437     		adds	r7, r7, #36
 227              	.LCFI13:
 228              		.cfi_def_cfa_offset 4
 229 005e BD46     		mov	sp, r7
 230              	.LCFI14:
 231              		.cfi_def_cfa_register 13
 232              		@ sp needed
 233 0060 5DF8047B 		ldr	r7, [sp], #4
 234              	.LCFI15:
 235              		.cfi_restore 7
 236              		.cfi_def_cfa_offset 0
 237 0064 7047     		bx	lr
 238              		.cfi_endproc
 239              	.LFE116:
 241              		.global	hal_sys_tick
 242              		.bss
 243              		.align	2
 246              	hal_sys_tick:
 247 0000 00000000 		.space	4
 248              		.global	uwTick
 249              		.align	2
 252              	uwTick:
 253 0004 00000000 		.space	4
 254              		.global	SystemCoreClock
 255              		.data
 256              		.align	2
 259              	SystemCoreClock:
 260 0000 00127A00 		.word	8000000
 261              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
 262              		.align	1
 263              		.global	HAL_NVIC_SetPriority
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu fpv4-sp-d16
 269              	HAL_NVIC_SetPriority:
 270              	.LFB126:
 271              		.file 2 ".././hal/stm32f3/stm32f3_hal_lowlevel.c"
   1:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /* This file combines several STM32F4 HAL Functions into one file. This was done
   2:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    for space reasons, to avoid having several MB of HAL functions that most people
   3:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    will not use. In addition this HAL is slightly less demanding (no interrupts),
   4:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    but less robust as doesn't implement the timeouts.
   5:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    
   6:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    The original HAL files are COPYRIGHT STMicroelectronics, as shown below:
   7:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** */
   8:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
   9:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /*
  10:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
  11:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  12:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * Redistribution and use in source and binary forms, with or without modification,
  13:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * are permitted provided that the following conditions are met:
  14:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  15:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer.
  16:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  17:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer in the documentation
  18:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      and/or other materials provided with the distribution.
  19:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  20:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      may be used to endorse or promote products derived from this software
  21:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      without specific prior written permission.
  22:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  23:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  25:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  27:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  28:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  29:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  30:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  31:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  32:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  34:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   ******************************************************************************
  35:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** */ 
  36:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  37:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  38:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3_hal.h"
  39:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3_hal_lowlevel.h"
  40:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_rcc.h"
  41:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_gpio.h"
  42:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_dma.h"
  43:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_uart.h"
  44:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_flash.h"
  45:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_cortex.h"
  46:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  47:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define assert_param(expr) ((void)0U)
  48:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t hal_sys_tick = 0;
  49:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t uwTick = 0;
  50:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t SystemCoreClock = 8000000U;
  51:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  52:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
  53:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 272              		.loc 2 53 1
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 24
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276 0000 80B5     		push	{r7, lr}
 277              	.LCFI16:
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 7, -8
 280              		.cfi_offset 14, -4
 281 0002 86B0     		sub	sp, sp, #24
 282              	.LCFI17:
 283              		.cfi_def_cfa_offset 32
 284 0004 00AF     		add	r7, sp, #0
 285              	.LCFI18:
 286              		.cfi_def_cfa_register 7
 287 0006 0346     		mov	r3, r0
 288 0008 B960     		str	r1, [r7, #8]
 289 000a 7A60     		str	r2, [r7, #4]
 290 000c FB73     		strb	r3, [r7, #15]
  54:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t prioritygroup = 0x00U;
 291              		.loc 2 54 12
 292 000e 0023     		movs	r3, #0
 293 0010 7B61     		str	r3, [r7, #20]
  55:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  56:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
  57:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  58:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  59:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  60:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   prioritygroup = NVIC_GetPriorityGrouping();
 294              		.loc 2 60 19
 295 0012 FFF7FEFF 		bl	NVIC_GetPriorityGrouping
 296 0016 7861     		str	r0, [r7, #20]
  61:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  62:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 297              		.loc 2 62 3
 298 0018 7A68     		ldr	r2, [r7, #4]
 299 001a B968     		ldr	r1, [r7, #8]
 300 001c 7869     		ldr	r0, [r7, #20]
 301 001e FFF7FEFF 		bl	NVIC_EncodePriority
 302 0022 0246     		mov	r2, r0
 303 0024 97F90F30 		ldrsb	r3, [r7, #15]
 304 0028 1146     		mov	r1, r2
 305 002a 1846     		mov	r0, r3
 306 002c FFF7FEFF 		bl	NVIC_SetPriority
  63:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 307              		.loc 2 63 1
 308 0030 00BF     		nop
 309 0032 1837     		adds	r7, r7, #24
 310              	.LCFI19:
 311              		.cfi_def_cfa_offset 8
 312 0034 BD46     		mov	sp, r7
 313              	.LCFI20:
 314              		.cfi_def_cfa_register 13
 315              		@ sp needed
 316 0036 80BD     		pop	{r7, pc}
 317              		.cfi_endproc
 318              	.LFE126:
 320              		.section	.text.HAL_InitTick,"ax",%progbits
 321              		.align	1
 322              		.global	HAL_InitTick
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu fpv4-sp-d16
 328              	HAL_InitTick:
 329              	.LFB127:
  64:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  65:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #ifndef ENABLE_TICK_TIMING
  66:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
  67:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 330              		.loc 2 67 1
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 8
 333              		@ frame_needed = 1, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 335 0000 80B4     		push	{r7}
 336              	.LCFI21:
 337              		.cfi_def_cfa_offset 4
 338              		.cfi_offset 7, -4
 339 0002 83B0     		sub	sp, sp, #12
 340              	.LCFI22:
 341              		.cfi_def_cfa_offset 16
 342 0004 00AF     		add	r7, sp, #0
 343              	.LCFI23:
 344              		.cfi_def_cfa_register 7
 345 0006 7860     		str	r0, [r7, #4]
  68:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	hal_sys_tick = 0;
 346              		.loc 2 68 15
 347 0008 044B     		ldr	r3, .L18
 348 000a 0022     		movs	r2, #0
 349 000c 1A60     		str	r2, [r3]
  69:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return HAL_OK;
 350              		.loc 2 69 9
 351 000e 0023     		movs	r3, #0
  70:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 352              		.loc 2 70 1
 353 0010 1846     		mov	r0, r3
 354 0012 0C37     		adds	r7, r7, #12
 355              	.LCFI24:
 356              		.cfi_def_cfa_offset 4
 357 0014 BD46     		mov	sp, r7
 358              	.LCFI25:
 359              		.cfi_def_cfa_register 13
 360              		@ sp needed
 361 0016 5DF8047B 		ldr	r7, [sp], #4
 362              	.LCFI26:
 363              		.cfi_restore 7
 364              		.cfi_def_cfa_offset 0
 365 001a 7047     		bx	lr
 366              	.L19:
 367              		.align	2
 368              	.L18:
 369 001c 00000000 		.word	hal_sys_tick
 370              		.cfi_endproc
 371              	.LFE127:
 373              		.section	.text.HAL_GetTick,"ax",%progbits
 374              		.align	1
 375              		.global	HAL_GetTick
 376              		.syntax unified
 377              		.thumb
 378              		.thumb_func
 379              		.fpu fpv4-sp-d16
 381              	HAL_GetTick:
 382              	.LFB128:
  71:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_GetTick(void)
  72:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 383              		.loc 2 72 1
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388 0000 80B4     		push	{r7}
 389              	.LCFI27:
 390              		.cfi_def_cfa_offset 4
 391              		.cfi_offset 7, -4
 392 0002 00AF     		add	r7, sp, #0
 393              	.LCFI28:
 394              		.cfi_def_cfa_register 7
  73:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return hal_sys_tick++;
 395              		.loc 2 73 21
 396 0004 044B     		ldr	r3, .L22
 397 0006 1B68     		ldr	r3, [r3]
 398 0008 5A1C     		adds	r2, r3, #1
 399 000a 0349     		ldr	r1, .L22
 400 000c 0A60     		str	r2, [r1]
  74:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 401              		.loc 2 74 1
 402 000e 1846     		mov	r0, r3
 403 0010 BD46     		mov	sp, r7
 404              	.LCFI29:
 405              		.cfi_def_cfa_register 13
 406              		@ sp needed
 407 0012 5DF8047B 		ldr	r7, [sp], #4
 408              	.LCFI30:
 409              		.cfi_restore 7
 410              		.cfi_def_cfa_offset 0
 411 0016 7047     		bx	lr
 412              	.L23:
 413              		.align	2
 414              	.L22:
 415 0018 00000000 		.word	hal_sys_tick
 416              		.cfi_endproc
 417              	.LFE128:
 419              		.section	.text.HAL_IncTick,"ax",%progbits
 420              		.align	1
 421              		.global	HAL_IncTick
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu fpv4-sp-d16
 427              	HAL_IncTick:
 428              	.LFB129:
  75:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_IncTick(void)
  76:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 429              		.loc 2 76 1
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434 0000 80B4     		push	{r7}
 435              	.LCFI31:
 436              		.cfi_def_cfa_offset 4
 437              		.cfi_offset 7, -4
 438 0002 00AF     		add	r7, sp, #0
 439              	.LCFI32:
 440              		.cfi_def_cfa_register 7
  77:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 441              		.loc 2 77 1
 442 0004 00BF     		nop
 443 0006 BD46     		mov	sp, r7
 444              	.LCFI33:
 445              		.cfi_def_cfa_register 13
 446              		@ sp needed
 447 0008 5DF8047B 		ldr	r7, [sp], #4
 448              	.LCFI34:
 449              		.cfi_restore 7
 450              		.cfi_def_cfa_offset 0
 451 000c 7047     		bx	lr
 452              		.cfi_endproc
 453              	.LFE129:
 455              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 456              		.align	1
 457              		.global	HAL_RCC_GetSysClockFreq
 458              		.syntax unified
 459              		.thumb
 460              		.thumb_func
 461              		.fpu fpv4-sp-d16
 463              	HAL_RCC_GetSysClockFreq:
 464              	.LFB130:
  78:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #else
  79:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
  80:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  81:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
  82:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_SYSTICK_Config(SystemCoreClock / 1000U);
  83:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  84:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*Configure the SysTick IRQ priority */
  85:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
  86:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  87:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    /* Return function status */
  88:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
  89:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  90:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** __weak uint32_t HAL_GetTick(void)
  91:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  92:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return uwTick;
  93:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  94:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  95:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** __weak void HAL_IncTick(void)
  96:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  97:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uwTick++;
  98:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  99:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif
 100:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 101:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define RCC_CFGR_HPRE_BITNUMBER           POSITION_VAL(RCC_CFGR_HPRE)
 102:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 103:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 104:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                      USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or U
 105:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 106:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 107:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 465              		.loc 2 107 1
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 1, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470 0000 80B4     		push	{r7}
 471              	.LCFI35:
 472              		.cfi_def_cfa_offset 4
 473              		.cfi_offset 7, -4
 474 0002 00AF     		add	r7, sp, #0
 475              	.LCFI36:
 476              		.cfi_def_cfa_register 7
 108:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return 7372800U;
 477              		.loc 2 108 9
 478 0004 4FF4E103 		mov	r3, #7372800
 109:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 479              		.loc 2 109 1
 480 0008 1846     		mov	r0, r3
 481 000a BD46     		mov	sp, r7
 482              	.LCFI37:
 483              		.cfi_def_cfa_register 13
 484              		@ sp needed
 485 000c 5DF8047B 		ldr	r7, [sp], #4
 486              	.LCFI38:
 487              		.cfi_restore 7
 488              		.cfi_def_cfa_offset 0
 489 0010 7047     		bx	lr
 490              		.cfi_endproc
 491              	.LFE130:
 493              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 494              		.align	1
 495              		.global	HAL_RCC_GetPCLK1Freq
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	HAL_RCC_GetPCLK1Freq:
 502              	.LFB131:
 110:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 111:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
 112:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 503              		.loc 2 112 1
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 1, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508 0000 80B4     		push	{r7}
 509              	.LCFI39:
 510              		.cfi_def_cfa_offset 4
 511              		.cfi_offset 7, -4
 512 0002 00AF     		add	r7, sp, #0
 513              	.LCFI40:
 514              		.cfi_def_cfa_register 7
 113:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return 7372800U;
 515              		.loc 2 113 9
 516 0004 4FF4E103 		mov	r3, #7372800
 114:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 517              		.loc 2 114 1
 518 0008 1846     		mov	r0, r3
 519 000a BD46     		mov	sp, r7
 520              	.LCFI41:
 521              		.cfi_def_cfa_register 13
 522              		@ sp needed
 523 000c 5DF8047B 		ldr	r7, [sp], #4
 524              	.LCFI42:
 525              		.cfi_restore 7
 526              		.cfi_def_cfa_offset 0
 527 0010 7047     		bx	lr
 528              		.cfi_endproc
 529              	.LFE131:
 531              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 532              		.align	1
 533              		.global	HAL_RCC_OscConfig
 534              		.syntax unified
 535              		.thumb
 536              		.thumb_func
 537              		.fpu fpv4-sp-d16
 539              	HAL_RCC_OscConfig:
 540              	.LFB132:
 115:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 116:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 117:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 118:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         RCC_OscInitTypeDef.
 119:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 120:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         contains the configuration information for the RCC Oscillators.
 121:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The PLL is not disabled when used as system clock.
 122:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 123:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         supported by this macro. User should request a transition to LSE Off
 124:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         first and then LSE On or LSE Bypass.
 125:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 126:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         supported by this macro. User should request a transition to HSE Off
 127:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         first and then HSE On or HSE Bypass.
 128:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 129:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 130:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 131:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 541              		.loc 2 131 1
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 512
 544              		@ frame_needed = 1, uses_anonymous_args = 0
 545 0000 80B5     		push	{r7, lr}
 546              	.LCFI43:
 547              		.cfi_def_cfa_offset 8
 548              		.cfi_offset 7, -8
 549              		.cfi_offset 14, -4
 550 0002 ADF5007D 		sub	sp, sp, #512
 551              	.LCFI44:
 552              		.cfi_def_cfa_offset 520
 553 0006 00AF     		add	r7, sp, #0
 554              	.LCFI45:
 555              		.cfi_def_cfa_register 7
 556 0008 3B1D     		adds	r3, r7, #4
 557 000a 1860     		str	r0, [r3]
 132:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    uint32_t tickstart = 0U;
 558              		.loc 2 132 13
 559 000c 0023     		movs	r3, #0
 560 000e C7F8F831 		str	r3, [r7, #504]
 133:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 134:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 135:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(RCC_OscInitStruct != NULL);
 136:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 137:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 138:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 139:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 561              		.loc 2 139 25
 562 0012 3B1D     		adds	r3, r7, #4
 563 0014 1B68     		ldr	r3, [r3]
 564 0016 1B68     		ldr	r3, [r3]
 565              		.loc 2 139 43
 566 0018 03F00103 		and	r3, r3, #1
 567              		.loc 2 139 5
 568 001c 002B     		cmp	r3, #0
 569 001e 00F06E81 		beq	.L30
 140:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 141:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 142:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 143:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 144:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 145:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 570              		.loc 2 145 9
 571 0022 B54B     		ldr	r3, .L167
 572 0024 5B68     		ldr	r3, [r3, #4]
 573 0026 03F00C03 		and	r3, r3, #12
 574              		.loc 2 145 7
 575 002a 042B     		cmp	r3, #4
 576 002c 0CD0     		beq	.L31
 146:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 577              		.loc 2 146 13
 578 002e B24B     		ldr	r3, .L167
 579 0030 5B68     		ldr	r3, [r3, #4]
 580 0032 03F00C03 		and	r3, r3, #12
 581              		.loc 2 146 8
 582 0036 082B     		cmp	r3, #8
 583 0038 5AD1     		bne	.L32
 584              		.loc 2 146 82 discriminator 1
 585 003a AF4B     		ldr	r3, .L167
 586 003c 5B68     		ldr	r3, [r3, #4]
 587 003e 03F48033 		and	r3, r3, #65536
 588              		.loc 2 146 78 discriminator 1
 589 0042 B3F5803F 		cmp	r3, #65536
 590 0046 53D1     		bne	.L32
 591              	.L31:
 592 0048 4FF40033 		mov	r3, #131072
 593 004c C7F8F431 		str	r3, [r7, #500]
 594              	.LBB150:
 595              	.LBB151:
 596              		.file 3 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h"
   1:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**************************************************************************//**
   2:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @version  V4.30
   5:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @date     20. October 2015
   6:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  ******************************************************************************/
   7:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
   9:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    All rights reserved.
  10:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      specific prior written permission.
  20:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    *
  21:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  34:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  35:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  38:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
  45:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  46:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  47:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   @{
  51:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  52:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  53:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  54:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  58:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  60:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  62:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  63:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  64:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  65:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  69:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  71:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  73:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  74:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  75:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  76:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Control Register
  77:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Control Register value
  79:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  80:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  82:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
  83:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  84:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
  86:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  87:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  88:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  89:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  90:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Control Register
  91:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  94:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  96:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  98:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  99:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 100:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 101:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               IPSR Register value
 104:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 105:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 107:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 108:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 109:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 111:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 112:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 113:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 114:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 115:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get APSR Register
 116:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               APSR Register value
 118:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 119:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 121:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 122:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 123:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 125:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 126:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 127:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 128:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 129:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 132:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \return               xPSR Register value
 133:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 134:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 136:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 137:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 138:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 140:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 141:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 142:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 143:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 144:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               PSP Register value
 147:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 148:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 150:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 151:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 152:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 154:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 155:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 156:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 157:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 158:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 162:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 164:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 166:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 167:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 168:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 169:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               MSP Register value
 172:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 173:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 175:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 176:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 177:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 179:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 180:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 181:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 182:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 183:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 186:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 188:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 190:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 192:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 193:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 194:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 195:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Priority Mask value
 198:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 199:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 201:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 202:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 203:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 205:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 206:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 207:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 208:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 209:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 213:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 215:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 217:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 218:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 219:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 221:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 222:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Enable FIQ
 223:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 226:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 228:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 230:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 231:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 232:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 233:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Disable FIQ
 234:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 237:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 239:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 241:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 242:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 243:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 244:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Base Priority
 245:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Base Priority register value
 247:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 248:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 250:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 251:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 252:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 254:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 255:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 256:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 257:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 258:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority
 259:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 262:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 264:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 266:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 267:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 268:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 269:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 274:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 276:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 278:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 279:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 280:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 281:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Fault Mask register value
 284:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 285:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 287:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 288:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 289:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 291:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 292:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 293:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 294:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 295:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 299:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 301:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 303:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 304:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 306:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 307:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 309:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 310:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get FPSCR
 311:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 314:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 316:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 318:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 319:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 321:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 323:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 324:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 325:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    return(0);
 326:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 327:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 328:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 329:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 330:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 331:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set FPSCR
 332:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 335:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 337:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 340:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 342:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 343:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 344:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 345:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 347:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 348:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 349:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 351:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 352:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   Access to dedicated instructions
 355:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   @{
 356:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** */
 357:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 358:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 365:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 368:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 369:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 370:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   No Operation
 371:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 373:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 375:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 377:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 378:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 379:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 380:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 383:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 385:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 387:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 388:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 389:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 390:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Event
 391:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 394:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 396:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 398:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 399:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 400:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 401:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Send Event
 402:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 404:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 406:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 408:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 409:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 410:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 411:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            after the instruction has been completed.
 415:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 416:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 418:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 420:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 421:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 422:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 423:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 427:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 429:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 431:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 432:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 433:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 434:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 438:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 440:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 442:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 443:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 444:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 445:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 449:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 450:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 452:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 455:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 456:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 457:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 459:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 460:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 461:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 462:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 463:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 464:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 468:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 469:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 471:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 472:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 473:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 475:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 476:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 477:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 478:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 479:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 483:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 484:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 486:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 489:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   int32_t result;
 490:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 491:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 493:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 494:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 495:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 496:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 497:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 498:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Rotated value
 503:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 504:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 506:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 508:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 509:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 510:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 511:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Breakpoint
 512:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 517:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 519:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 520:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 521:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 525:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 526:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 528:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 529:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 530:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 597              		.loc 3 531 4
 598 0050 D7F8F431 		ldr	r3, [r7, #500]
 599              		.syntax unified
 600              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 601 0054 93FAA3F3 		rbit r3, r3
 602              	@ 0 "" 2
 603              		.thumb
 604              		.syntax unified
 605 0058 C7F8F031 		str	r3, [r7, #496]
 532:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 533:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 535:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   {
 538:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     result <<= 1U;
 539:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     result |= value & 1U;
 540:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     s--;
 541:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   }
 542:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 544:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 606              		.loc 3 544 9
 607 005c D7F8F031 		ldr	r3, [r7, #496]
 608              	.LBE151:
 609              	.LBE150:
 147:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 610              		.loc 2 148 11
 611 0060 B3FA83F3 		clz	r3, r3
 612 0064 DBB2     		uxtb	r3, r3
 613 0066 5B09     		lsrs	r3, r3, #5
 614 0068 DBB2     		uxtb	r3, r3
 615 006a 43F00103 		orr	r3, r3, #1
 616 006e DBB2     		uxtb	r3, r3
 617 0070 012B     		cmp	r3, #1
 618 0072 02D1     		bne	.L34
 619              		.loc 2 148 11 is_stmt 0 discriminator 1
 620 0074 A04B     		ldr	r3, .L167
 621 0076 1B68     		ldr	r3, [r3]
 622 0078 15E0     		b	.L35
 623              	.L34:
 624 007a 4FF40033 		mov	r3, #131072
 625 007e C7F8EC31 		str	r3, [r7, #492]
 626              	.LBB152:
 627              	.LBB153:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 628              		.loc 3 531 4 is_stmt 1 discriminator 2
 629 0082 D7F8EC31 		ldr	r3, [r7, #492]
 630              		.syntax unified
 631              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 632 0086 93FAA3F3 		rbit r3, r3
 633              	@ 0 "" 2
 634              		.thumb
 635              		.syntax unified
 636 008a C7F8E831 		str	r3, [r7, #488]
 637 008e 4FF40033 		mov	r3, #131072
 638 0092 C7F8E431 		str	r3, [r7, #484]
 639              	.LBE153:
 640              	.LBE152:
 641              	.LBB154:
 642              	.LBB155:
 643 0096 D7F8E431 		ldr	r3, [r7, #484]
 644              		.syntax unified
 645              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 646 009a 93FAA3F3 		rbit r3, r3
 647              	@ 0 "" 2
 648              		.thumb
 649              		.syntax unified
 650 009e C7F8E031 		str	r3, [r7, #480]
 651              	.LBE155:
 652              	.LBE154:
 653              		.loc 2 148 11 discriminator 2
 654 00a2 954B     		ldr	r3, .L167
 655 00a4 5B6A     		ldr	r3, [r3, #36]
 656              	.L35:
 657 00a6 4FF40032 		mov	r2, #131072
 658 00aa C7F8DC21 		str	r2, [r7, #476]
 659              	.LBB156:
 660              	.LBB157:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 661              		.loc 3 531 4 discriminator 12
 662 00ae D7F8DC21 		ldr	r2, [r7, #476]
 663              		.syntax unified
 664              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 665 00b2 92FAA2F2 		rbit r2, r2
 666              	@ 0 "" 2
 667              		.thumb
 668              		.syntax unified
 669 00b6 C7F8D821 		str	r2, [r7, #472]
 670              		.loc 3 544 9 discriminator 12
 671 00ba D7F8D821 		ldr	r2, [r7, #472]
 672              	.LBE157:
 673              	.LBE156:
 674              		.loc 2 148 11 discriminator 12
 675 00be B2FA82F2 		clz	r2, r2
 676 00c2 52B2     		sxtb	r2, r2
 677 00c4 42F02002 		orr	r2, r2, #32
 678 00c8 52B2     		sxtb	r2, r2
 679 00ca D2B2     		uxtb	r2, r2
 680 00cc 02F01F02 		and	r2, r2, #31
 681 00d0 0121     		movs	r1, #1
 682 00d2 01FA02F2 		lsl	r2, r1, r2
 683 00d6 1340     		ands	r3, r3, r2
 684              		.loc 2 148 9 discriminator 12
 685 00d8 002B     		cmp	r3, #0
 686 00da 00F00F81 		beq	.L166
 687              		.loc 2 148 78 discriminator 13
 688 00de 3B1D     		adds	r3, r7, #4
 689 00e0 1B68     		ldr	r3, [r3]
 690 00e2 5B68     		ldr	r3, [r3, #4]
 691              		.loc 2 148 57 discriminator 13
 692 00e4 002B     		cmp	r3, #0
 693 00e6 40F00981 		bne	.L166
 149:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 150:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 694              		.loc 2 150 16
 695 00ea 0123     		movs	r3, #1
 696 00ec 00F06BBE 		b	.L40
 697              	.L32:
 151:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 152:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 153:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 154:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 155:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Set the new HSE configuration ---------------------------------------*/
 156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 698              		.loc 2 156 7
 699 00f0 3B1D     		adds	r3, r7, #4
 700 00f2 1B68     		ldr	r3, [r3]
 701 00f4 5B68     		ldr	r3, [r3, #4]
 702 00f6 B3F5803F 		cmp	r3, #65536
 703 00fa 06D1     		bne	.L41
 704              		.loc 2 156 7 is_stmt 0 discriminator 1
 705 00fc 7E4B     		ldr	r3, .L167
 706 00fe 1B68     		ldr	r3, [r3]
 707 0100 7D4A     		ldr	r2, .L167
 708 0102 43F48033 		orr	r3, r3, #65536
 709 0106 1360     		str	r3, [r2]
 710 0108 30E0     		b	.L42
 711              	.L41:
 712              		.loc 2 156 7 discriminator 2
 713 010a 3B1D     		adds	r3, r7, #4
 714 010c 1B68     		ldr	r3, [r3]
 715 010e 5B68     		ldr	r3, [r3, #4]
 716 0110 002B     		cmp	r3, #0
 717 0112 0CD1     		bne	.L43
 718              		.loc 2 156 7 discriminator 3
 719 0114 784B     		ldr	r3, .L167
 720 0116 1B68     		ldr	r3, [r3]
 721 0118 774A     		ldr	r2, .L167
 722 011a 23F48033 		bic	r3, r3, #65536
 723 011e 1360     		str	r3, [r2]
 724 0120 754B     		ldr	r3, .L167
 725 0122 1B68     		ldr	r3, [r3]
 726 0124 744A     		ldr	r2, .L167
 727 0126 23F48023 		bic	r3, r3, #262144
 728 012a 1360     		str	r3, [r2]
 729 012c 1EE0     		b	.L42
 730              	.L43:
 731              		.loc 2 156 7 discriminator 4
 732 012e 3B1D     		adds	r3, r7, #4
 733 0130 1B68     		ldr	r3, [r3]
 734 0132 5B68     		ldr	r3, [r3, #4]
 735 0134 B3F5A02F 		cmp	r3, #327680
 736 0138 0CD1     		bne	.L44
 737              		.loc 2 156 7 discriminator 5
 738 013a 6F4B     		ldr	r3, .L167
 739 013c 1B68     		ldr	r3, [r3]
 740 013e 6E4A     		ldr	r2, .L167
 741 0140 43F48023 		orr	r3, r3, #262144
 742 0144 1360     		str	r3, [r2]
 743 0146 6C4B     		ldr	r3, .L167
 744 0148 1B68     		ldr	r3, [r3]
 745 014a 6B4A     		ldr	r2, .L167
 746 014c 43F48033 		orr	r3, r3, #65536
 747 0150 1360     		str	r3, [r2]
 748 0152 0BE0     		b	.L42
 749              	.L44:
 750              		.loc 2 156 7 discriminator 6
 751 0154 684B     		ldr	r3, .L167
 752 0156 1B68     		ldr	r3, [r3]
 753 0158 674A     		ldr	r2, .L167
 754 015a 23F48033 		bic	r3, r3, #65536
 755 015e 1360     		str	r3, [r2]
 756 0160 654B     		ldr	r3, .L167
 757 0162 1B68     		ldr	r3, [r3]
 758 0164 644A     		ldr	r2, .L167
 759 0166 23F48023 		bic	r3, r3, #262144
 760 016a 1360     		str	r3, [r2]
 761              	.L42:
 157:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 158:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
 159:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the HSE predivision factor --------------------------------*/
 160:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 762              		.loc 2 160 7 is_stmt 1
 763 016c 624B     		ldr	r3, .L167
 764 016e DB6A     		ldr	r3, [r3, #44]
 765 0170 23F00F02 		bic	r2, r3, #15
 766 0174 3B1D     		adds	r3, r7, #4
 767 0176 1B68     		ldr	r3, [r3]
 768 0178 9B68     		ldr	r3, [r3, #8]
 769 017a 5F49     		ldr	r1, .L167
 770 017c 1343     		orrs	r3, r3, r2
 771 017e CB62     		str	r3, [r1, #44]
 161:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
 162:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 163:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        /* Check the HSE State */
 164:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 772              		.loc 2 164 27
 773 0180 3B1D     		adds	r3, r7, #4
 774 0182 1B68     		ldr	r3, [r3]
 775 0184 5B68     		ldr	r3, [r3, #4]
 776              		.loc 2 164 9
 777 0186 002B     		cmp	r3, #0
 778 0188 5AD0     		beq	.L45
 165:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 166:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 167:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 779              		.loc 2 167 21
 780 018a FFF7FEFF 		bl	HAL_GetTick
 781 018e C7F8F801 		str	r0, [r7, #504]
 168:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 169:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSE is ready */
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 782              		.loc 2 170 14
 783 0192 0AE0     		b	.L46
 784              	.L53:
 171:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 172:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 785              		.loc 2 172 15
 786 0194 FFF7FEFF 		bl	HAL_GetTick
 787 0198 0246     		mov	r2, r0
 788              		.loc 2 172 29
 789 019a D7F8F831 		ldr	r3, [r7, #504]
 790 019e D31A     		subs	r3, r2, r3
 791              		.loc 2 172 13
 792 01a0 642B     		cmp	r3, #100
 793 01a2 02D9     		bls	.L46
 173:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 174:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 794              		.loc 2 174 20
 795 01a4 0323     		movs	r3, #3
 796 01a6 00F00EBE 		b	.L40
 797              	.L46:
 798 01aa 4FF40033 		mov	r3, #131072
 799 01ae C7F8D431 		str	r3, [r7, #468]
 800              	.LBB158:
 801              	.LBB159:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 802              		.loc 3 531 4
 803 01b2 D7F8D431 		ldr	r3, [r7, #468]
 804              		.syntax unified
 805              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 806 01b6 93FAA3F3 		rbit r3, r3
 807              	@ 0 "" 2
 808              		.thumb
 809              		.syntax unified
 810 01ba C7F8D031 		str	r3, [r7, #464]
 811              		.loc 3 544 9
 812 01be D7F8D031 		ldr	r3, [r7, #464]
 813              	.LBE159:
 814              	.LBE158:
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 815              		.loc 2 170 15
 816 01c2 B3FA83F3 		clz	r3, r3
 817 01c6 DBB2     		uxtb	r3, r3
 818 01c8 5B09     		lsrs	r3, r3, #5
 819 01ca DBB2     		uxtb	r3, r3
 820 01cc 43F00103 		orr	r3, r3, #1
 821 01d0 DBB2     		uxtb	r3, r3
 822 01d2 012B     		cmp	r3, #1
 823 01d4 02D1     		bne	.L48
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 824              		.loc 2 170 15 is_stmt 0 discriminator 1
 825 01d6 484B     		ldr	r3, .L167
 826 01d8 1B68     		ldr	r3, [r3]
 827 01da 15E0     		b	.L49
 828              	.L48:
 829 01dc 4FF40033 		mov	r3, #131072
 830 01e0 C7F8CC31 		str	r3, [r7, #460]
 831              	.LBB160:
 832              	.LBB161:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 833              		.loc 3 531 4 is_stmt 1 discriminator 2
 834 01e4 D7F8CC31 		ldr	r3, [r7, #460]
 835              		.syntax unified
 836              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 837 01e8 93FAA3F3 		rbit r3, r3
 838              	@ 0 "" 2
 839              		.thumb
 840              		.syntax unified
 841 01ec C7F8C831 		str	r3, [r7, #456]
 842 01f0 4FF40033 		mov	r3, #131072
 843 01f4 C7F8C431 		str	r3, [r7, #452]
 844              	.LBE161:
 845              	.LBE160:
 846              	.LBB162:
 847              	.LBB163:
 848 01f8 D7F8C431 		ldr	r3, [r7, #452]
 849              		.syntax unified
 850              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 851 01fc 93FAA3F3 		rbit r3, r3
 852              	@ 0 "" 2
 853              		.thumb
 854              		.syntax unified
 855 0200 C7F8C031 		str	r3, [r7, #448]
 856              	.LBE163:
 857              	.LBE162:
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 858              		.loc 2 170 15 discriminator 2
 859 0204 3C4B     		ldr	r3, .L167
 860 0206 5B6A     		ldr	r3, [r3, #36]
 861              	.L49:
 862 0208 4FF40032 		mov	r2, #131072
 863 020c C7F8BC21 		str	r2, [r7, #444]
 864              	.LBB164:
 865              	.LBB165:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 866              		.loc 3 531 4 discriminator 12
 867 0210 D7F8BC21 		ldr	r2, [r7, #444]
 868              		.syntax unified
 869              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 870 0214 92FAA2F2 		rbit r2, r2
 871              	@ 0 "" 2
 872              		.thumb
 873              		.syntax unified
 874 0218 C7F8B821 		str	r2, [r7, #440]
 875              		.loc 3 544 9 discriminator 12
 876 021c D7F8B821 		ldr	r2, [r7, #440]
 877              	.LBE165:
 878              	.LBE164:
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 879              		.loc 2 170 15 discriminator 12
 880 0220 B2FA82F2 		clz	r2, r2
 881 0224 52B2     		sxtb	r2, r2
 882 0226 42F02002 		orr	r2, r2, #32
 883 022a 52B2     		sxtb	r2, r2
 884 022c D2B2     		uxtb	r2, r2
 885 022e 02F01F02 		and	r2, r2, #31
 886 0232 0121     		movs	r1, #1
 887 0234 01FA02F2 		lsl	r2, r1, r2
 888 0238 1340     		ands	r3, r3, r2
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 889              		.loc 2 170 14 discriminator 12
 890 023a 002B     		cmp	r3, #0
 891 023c AAD0     		beq	.L53
 892 023e 5EE0     		b	.L30
 893              	.L45:
 175:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 176:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 177:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 178:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 179:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 180:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 181:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 894              		.loc 2 181 21
 895 0240 FFF7FEFF 		bl	HAL_GetTick
 896 0244 C7F8F801 		str	r0, [r7, #504]
 182:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 183:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSE is disabled */
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 897              		.loc 2 184 14
 898 0248 0AE0     		b	.L54
 899              	.L61:
 185:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 186:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 900              		.loc 2 186 16
 901 024a FFF7FEFF 		bl	HAL_GetTick
 902 024e 0246     		mov	r2, r0
 903              		.loc 2 186 30
 904 0250 D7F8F831 		ldr	r3, [r7, #504]
 905 0254 D31A     		subs	r3, r2, r3
 906              		.loc 2 186 14
 907 0256 642B     		cmp	r3, #100
 908 0258 02D9     		bls	.L54
 187:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 188:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 909              		.loc 2 188 20
 910 025a 0323     		movs	r3, #3
 911 025c 00F0B3BD 		b	.L40
 912              	.L54:
 913 0260 4FF40033 		mov	r3, #131072
 914 0264 C7F8B431 		str	r3, [r7, #436]
 915              	.LBB166:
 916              	.LBB167:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 917              		.loc 3 531 4
 918 0268 D7F8B431 		ldr	r3, [r7, #436]
 919              		.syntax unified
 920              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 921 026c 93FAA3F3 		rbit r3, r3
 922              	@ 0 "" 2
 923              		.thumb
 924              		.syntax unified
 925 0270 C7F8B031 		str	r3, [r7, #432]
 926              		.loc 3 544 9
 927 0274 D7F8B031 		ldr	r3, [r7, #432]
 928              	.LBE167:
 929              	.LBE166:
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 930              		.loc 2 184 15
 931 0278 B3FA83F3 		clz	r3, r3
 932 027c DBB2     		uxtb	r3, r3
 933 027e 5B09     		lsrs	r3, r3, #5
 934 0280 DBB2     		uxtb	r3, r3
 935 0282 43F00103 		orr	r3, r3, #1
 936 0286 DBB2     		uxtb	r3, r3
 937 0288 012B     		cmp	r3, #1
 938 028a 02D1     		bne	.L56
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 939              		.loc 2 184 15 is_stmt 0 discriminator 1
 940 028c 1A4B     		ldr	r3, .L167
 941 028e 1B68     		ldr	r3, [r3]
 942 0290 15E0     		b	.L57
 943              	.L56:
 944 0292 4FF40033 		mov	r3, #131072
 945 0296 C7F8AC31 		str	r3, [r7, #428]
 946              	.LBB168:
 947              	.LBB169:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 948              		.loc 3 531 4 is_stmt 1 discriminator 2
 949 029a D7F8AC31 		ldr	r3, [r7, #428]
 950              		.syntax unified
 951              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 952 029e 93FAA3F3 		rbit r3, r3
 953              	@ 0 "" 2
 954              		.thumb
 955              		.syntax unified
 956 02a2 C7F8A831 		str	r3, [r7, #424]
 957 02a6 4FF40033 		mov	r3, #131072
 958 02aa C7F8A431 		str	r3, [r7, #420]
 959              	.LBE169:
 960              	.LBE168:
 961              	.LBB170:
 962              	.LBB171:
 963 02ae D7F8A431 		ldr	r3, [r7, #420]
 964              		.syntax unified
 965              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 966 02b2 93FAA3F3 		rbit r3, r3
 967              	@ 0 "" 2
 968              		.thumb
 969              		.syntax unified
 970 02b6 C7F8A031 		str	r3, [r7, #416]
 971              	.LBE171:
 972              	.LBE170:
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 973              		.loc 2 184 15 discriminator 2
 974 02ba 0F4B     		ldr	r3, .L167
 975 02bc 5B6A     		ldr	r3, [r3, #36]
 976              	.L57:
 977 02be 4FF40032 		mov	r2, #131072
 978 02c2 C7F89C21 		str	r2, [r7, #412]
 979              	.LBB172:
 980              	.LBB173:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 981              		.loc 3 531 4 discriminator 12
 982 02c6 D7F89C21 		ldr	r2, [r7, #412]
 983              		.syntax unified
 984              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 985 02ca 92FAA2F2 		rbit r2, r2
 986              	@ 0 "" 2
 987              		.thumb
 988              		.syntax unified
 989 02ce C7F89821 		str	r2, [r7, #408]
 990              		.loc 3 544 9 discriminator 12
 991 02d2 D7F89821 		ldr	r2, [r7, #408]
 992              	.LBE173:
 993              	.LBE172:
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 994              		.loc 2 184 15 discriminator 12
 995 02d6 B2FA82F2 		clz	r2, r2
 996 02da 52B2     		sxtb	r2, r2
 997 02dc 42F02002 		orr	r2, r2, #32
 998 02e0 52B2     		sxtb	r2, r2
 999 02e2 D2B2     		uxtb	r2, r2
 1000 02e4 02F01F02 		and	r2, r2, #31
 1001 02e8 0121     		movs	r1, #1
 1002 02ea 01FA02F2 		lsl	r2, r1, r2
 1003 02ee 1340     		ands	r3, r3, r2
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1004              		.loc 2 184 14 discriminator 12
 1005 02f0 002B     		cmp	r3, #0
 1006 02f2 AAD1     		bne	.L61
 1007 02f4 03E0     		b	.L30
 1008              	.L168:
 1009 02f6 00BF     		.align	2
 1010              	.L167:
 1011 02f8 00100240 		.word	1073876992
 1012              	.L166:
 148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1013              		.loc 2 148 9
 1014 02fc 00BF     		nop
 1015              	.L30:
 189:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 190:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 191:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 192:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 193:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 194:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 195:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 1016              		.loc 2 195 25
 1017 02fe 3B1D     		adds	r3, r7, #4
 1018 0300 1B68     		ldr	r3, [r3]
 1019 0302 1B68     		ldr	r3, [r3]
 1020              		.loc 2 195 43
 1021 0304 03F00203 		and	r3, r3, #2
 1022              		.loc 2 195 5
 1023 0308 002B     		cmp	r3, #0
 1024 030a 00F07081 		beq	.L62
 196:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 197:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 198:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 199:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 200:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 201:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 202:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 1025              		.loc 2 202 9
 1026 030e D04B     		ldr	r3, .L169
 1027 0310 5B68     		ldr	r3, [r3, #4]
 1028 0312 03F00C03 		and	r3, r3, #12
 1029              		.loc 2 202 7
 1030 0316 002B     		cmp	r3, #0
 1031 0318 0BD0     		beq	.L63
 203:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 1032              		.loc 2 203 13
 1033 031a CD4B     		ldr	r3, .L169
 1034 031c 5B68     		ldr	r3, [r3, #4]
 1035 031e 03F00C03 		and	r3, r3, #12
 1036              		.loc 2 203 8
 1037 0322 082B     		cmp	r3, #8
 1038 0324 6DD1     		bne	.L64
 1039              		.loc 2 203 82 discriminator 1
 1040 0326 CA4B     		ldr	r3, .L169
 1041 0328 5B68     		ldr	r3, [r3, #4]
 1042 032a 03F48033 		and	r3, r3, #65536
 1043              		.loc 2 203 78 discriminator 1
 1044 032e 002B     		cmp	r3, #0
 1045 0330 67D1     		bne	.L64
 1046              	.L63:
 1047 0332 0223     		movs	r3, #2
 1048 0334 C7F89431 		str	r3, [r7, #404]
 1049              	.LBB174:
 1050              	.LBB175:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1051              		.loc 3 531 4
 1052 0338 D7F89431 		ldr	r3, [r7, #404]
 1053              		.syntax unified
 1054              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1055 033c 93FAA3F3 		rbit r3, r3
 1056              	@ 0 "" 2
 1057              		.thumb
 1058              		.syntax unified
 1059 0340 C7F89031 		str	r3, [r7, #400]
 1060              		.loc 3 544 9
 1061 0344 D7F89031 		ldr	r3, [r7, #400]
 1062              	.LBE175:
 1063              	.LBE174:
 204:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 205:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* When HSI is used as system clock it will not disabled */
 206:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 1064              		.loc 2 206 11
 1065 0348 B3FA83F3 		clz	r3, r3
 1066 034c DBB2     		uxtb	r3, r3
 1067 034e 5B09     		lsrs	r3, r3, #5
 1068 0350 DBB2     		uxtb	r3, r3
 1069 0352 43F00103 		orr	r3, r3, #1
 1070 0356 DBB2     		uxtb	r3, r3
 1071 0358 012B     		cmp	r3, #1
 1072 035a 02D1     		bne	.L66
 1073              		.loc 2 206 11 is_stmt 0 discriminator 1
 1074 035c BC4B     		ldr	r3, .L169
 1075 035e 1B68     		ldr	r3, [r3]
 1076 0360 13E0     		b	.L67
 1077              	.L66:
 1078 0362 0223     		movs	r3, #2
 1079 0364 C7F88C31 		str	r3, [r7, #396]
 1080              	.LBB176:
 1081              	.LBB177:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1082              		.loc 3 531 4 is_stmt 1 discriminator 2
 1083 0368 D7F88C31 		ldr	r3, [r7, #396]
 1084              		.syntax unified
 1085              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1086 036c 93FAA3F3 		rbit r3, r3
 1087              	@ 0 "" 2
 1088              		.thumb
 1089              		.syntax unified
 1090 0370 C7F88831 		str	r3, [r7, #392]
 1091 0374 0223     		movs	r3, #2
 1092 0376 C7F88431 		str	r3, [r7, #388]
 1093              	.LBE177:
 1094              	.LBE176:
 1095              	.LBB178:
 1096              	.LBB179:
 1097 037a D7F88431 		ldr	r3, [r7, #388]
 1098              		.syntax unified
 1099              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1100 037e 93FAA3F3 		rbit r3, r3
 1101              	@ 0 "" 2
 1102              		.thumb
 1103              		.syntax unified
 1104 0382 C7F88031 		str	r3, [r7, #384]
 1105              	.LBE179:
 1106              	.LBE178:
 1107              		.loc 2 206 11 discriminator 2
 1108 0386 B24B     		ldr	r3, .L169
 1109 0388 5B6A     		ldr	r3, [r3, #36]
 1110              	.L67:
 1111 038a 0222     		movs	r2, #2
 1112 038c C7F87C21 		str	r2, [r7, #380]
 1113              	.LBB180:
 1114              	.LBB181:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1115              		.loc 3 531 4 discriminator 12
 1116 0390 D7F87C21 		ldr	r2, [r7, #380]
 1117              		.syntax unified
 1118              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1119 0394 92FAA2F2 		rbit r2, r2
 1120              	@ 0 "" 2
 1121              		.thumb
 1122              		.syntax unified
 1123 0398 C7F87821 		str	r2, [r7, #376]
 1124              		.loc 3 544 9 discriminator 12
 1125 039c D7F87821 		ldr	r2, [r7, #376]
 1126              	.LBE181:
 1127              	.LBE180:
 1128              		.loc 2 206 11 discriminator 12
 1129 03a0 B2FA82F2 		clz	r2, r2
 1130 03a4 52B2     		sxtb	r2, r2
 1131 03a6 42F02002 		orr	r2, r2, #32
 1132 03aa 52B2     		sxtb	r2, r2
 1133 03ac D2B2     		uxtb	r2, r2
 1134 03ae 02F01F02 		and	r2, r2, #31
 1135 03b2 0121     		movs	r1, #1
 1136 03b4 01FA02F2 		lsl	r2, r1, r2
 1137 03b8 1340     		ands	r3, r3, r2
 1138              		.loc 2 206 9 discriminator 12
 1139 03ba 002B     		cmp	r3, #0
 1140 03bc 07D0     		beq	.L71
 1141              		.loc 2 206 78 discriminator 13
 1142 03be 3B1D     		adds	r3, r7, #4
 1143 03c0 1B68     		ldr	r3, [r3]
 1144 03c2 1B69     		ldr	r3, [r3, #16]
 1145              		.loc 2 206 57 discriminator 13
 1146 03c4 012B     		cmp	r3, #1
 1147 03c6 02D0     		beq	.L71
 207:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 208:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 1148              		.loc 2 208 16
 1149 03c8 0123     		movs	r3, #1
 1150 03ca 00F0FCBC 		b	.L40
 1151              	.L71:
 209:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 210:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Otherwise, just the calibration is allowed */
 211:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 212:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 213:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 214:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 1152              		.loc 2 214 9
 1153 03ce A04B     		ldr	r3, .L169
 1154 03d0 1B68     		ldr	r3, [r3]
 1155 03d2 23F0F802 		bic	r2, r3, #248
 1156 03d6 3B1D     		adds	r3, r7, #4
 1157 03d8 1B68     		ldr	r3, [r3]
 1158 03da 5969     		ldr	r1, [r3, #20]
 1159 03dc F823     		movs	r3, #248
 1160 03de C7F87431 		str	r3, [r7, #372]
 1161              	.LBB182:
 1162              	.LBB183:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1163              		.loc 3 531 4
 1164 03e2 D7F87431 		ldr	r3, [r7, #372]
 1165              		.syntax unified
 1166              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1167 03e6 93FAA3F3 		rbit r3, r3
 1168              	@ 0 "" 2
 1169              		.thumb
 1170              		.syntax unified
 1171 03ea C7F87031 		str	r3, [r7, #368]
 1172              		.loc 3 544 9
 1173 03ee D7F87031 		ldr	r3, [r7, #368]
 1174              	.LBE183:
 1175              	.LBE182:
 1176              		.loc 2 214 9
 1177 03f2 B3FA83F3 		clz	r3, r3
 1178 03f6 01FA03F3 		lsl	r3, r1, r3
 1179 03fa 9549     		ldr	r1, .L169
 1180 03fc 1343     		orrs	r3, r3, r2
 1181 03fe 0B60     		str	r3, [r1]
 206:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1182              		.loc 2 206 9
 1183 0400 F5E0     		b	.L62
 1184              	.L64:
 215:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 216:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 217:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 218:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 219:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSI State */
 220:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 1185              		.loc 2 220 27
 1186 0402 3B1D     		adds	r3, r7, #4
 1187 0404 1B68     		ldr	r3, [r3]
 1188 0406 1B69     		ldr	r3, [r3, #16]
 1189              		.loc 2 220 9
 1190 0408 002B     		cmp	r3, #0
 1191 040a 00F08580 		beq	.L73
 1192 040e 0123     		movs	r3, #1
 1193 0410 C7F86C31 		str	r3, [r7, #364]
 1194              	.LBB184:
 1195              	.LBB185:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1196              		.loc 3 531 4
 1197 0414 D7F86C31 		ldr	r3, [r7, #364]
 1198              		.syntax unified
 1199              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1200 0418 93FAA3F3 		rbit r3, r3
 1201              	@ 0 "" 2
 1202              		.thumb
 1203              		.syntax unified
 1204 041c C7F86831 		str	r3, [r7, #360]
 1205              		.loc 3 544 9
 1206 0420 D7F86831 		ldr	r3, [r7, #360]
 1207              	.LBE185:
 1208              	.LBE184:
 221:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 222:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        /* Enable the Internal High Speed oscillator (HSI). */
 223:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_ENABLE();
 1209              		.loc 2 223 9
 1210 0424 B3FA83F3 		clz	r3, r3
 1211 0428 03F18453 		add	r3, r3, #276824064
 1212 042c 03F58413 		add	r3, r3, #1081344
 1213 0430 9B00     		lsls	r3, r3, #2
 1214 0432 1A46     		mov	r2, r3
 1215 0434 0123     		movs	r3, #1
 1216 0436 1360     		str	r3, [r2]
 224:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 225:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 226:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 1217              		.loc 2 226 21
 1218 0438 FFF7FEFF 		bl	HAL_GetTick
 1219 043c C7F8F801 		str	r0, [r7, #504]
 227:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 228:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSI is ready */
 229:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1220              		.loc 2 229 14
 1221 0440 0AE0     		b	.L75
 1222              	.L82:
 230:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 231:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 1223              		.loc 2 231 15
 1224 0442 FFF7FEFF 		bl	HAL_GetTick
 1225 0446 0246     		mov	r2, r0
 1226              		.loc 2 231 29
 1227 0448 D7F8F831 		ldr	r3, [r7, #504]
 1228 044c D31A     		subs	r3, r2, r3
 1229              		.loc 2 231 13
 1230 044e 022B     		cmp	r3, #2
 1231 0450 02D9     		bls	.L75
 232:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 233:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 1232              		.loc 2 233 20
 1233 0452 0323     		movs	r3, #3
 1234 0454 00F0B7BC 		b	.L40
 1235              	.L75:
 1236 0458 0223     		movs	r3, #2
 1237 045a C7F86431 		str	r3, [r7, #356]
 1238              	.LBB186:
 1239              	.LBB187:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1240              		.loc 3 531 4
 1241 045e D7F86431 		ldr	r3, [r7, #356]
 1242              		.syntax unified
 1243              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1244 0462 93FAA3F3 		rbit r3, r3
 1245              	@ 0 "" 2
 1246              		.thumb
 1247              		.syntax unified
 1248 0466 C7F86031 		str	r3, [r7, #352]
 1249              		.loc 3 544 9
 1250 046a D7F86031 		ldr	r3, [r7, #352]
 1251              	.LBE187:
 1252              	.LBE186:
 229:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1253              		.loc 2 229 15
 1254 046e B3FA83F3 		clz	r3, r3
 1255 0472 DBB2     		uxtb	r3, r3
 1256 0474 5B09     		lsrs	r3, r3, #5
 1257 0476 DBB2     		uxtb	r3, r3
 1258 0478 43F00103 		orr	r3, r3, #1
 1259 047c DBB2     		uxtb	r3, r3
 1260 047e 012B     		cmp	r3, #1
 1261 0480 02D1     		bne	.L77
 229:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1262              		.loc 2 229 15 is_stmt 0 discriminator 1
 1263 0482 734B     		ldr	r3, .L169
 1264 0484 1B68     		ldr	r3, [r3]
 1265 0486 13E0     		b	.L78
 1266              	.L77:
 1267 0488 0223     		movs	r3, #2
 1268 048a C7F85C31 		str	r3, [r7, #348]
 1269              	.LBB188:
 1270              	.LBB189:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1271              		.loc 3 531 4 is_stmt 1 discriminator 2
 1272 048e D7F85C31 		ldr	r3, [r7, #348]
 1273              		.syntax unified
 1274              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1275 0492 93FAA3F3 		rbit r3, r3
 1276              	@ 0 "" 2
 1277              		.thumb
 1278              		.syntax unified
 1279 0496 C7F85831 		str	r3, [r7, #344]
 1280 049a 0223     		movs	r3, #2
 1281 049c C7F85431 		str	r3, [r7, #340]
 1282              	.LBE189:
 1283              	.LBE188:
 1284              	.LBB190:
 1285              	.LBB191:
 1286 04a0 D7F85431 		ldr	r3, [r7, #340]
 1287              		.syntax unified
 1288              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1289 04a4 93FAA3F3 		rbit r3, r3
 1290              	@ 0 "" 2
 1291              		.thumb
 1292              		.syntax unified
 1293 04a8 C7F85031 		str	r3, [r7, #336]
 1294              	.LBE191:
 1295              	.LBE190:
 229:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1296              		.loc 2 229 15 discriminator 2
 1297 04ac 684B     		ldr	r3, .L169
 1298 04ae 5B6A     		ldr	r3, [r3, #36]
 1299              	.L78:
 1300 04b0 0222     		movs	r2, #2
 1301 04b2 C7F84C21 		str	r2, [r7, #332]
 1302              	.LBB192:
 1303              	.LBB193:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1304              		.loc 3 531 4 discriminator 12
 1305 04b6 D7F84C21 		ldr	r2, [r7, #332]
 1306              		.syntax unified
 1307              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1308 04ba 92FAA2F2 		rbit r2, r2
 1309              	@ 0 "" 2
 1310              		.thumb
 1311              		.syntax unified
 1312 04be C7F84821 		str	r2, [r7, #328]
 1313              		.loc 3 544 9 discriminator 12
 1314 04c2 D7F84821 		ldr	r2, [r7, #328]
 1315              	.LBE193:
 1316              	.LBE192:
 229:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1317              		.loc 2 229 15 discriminator 12
 1318 04c6 B2FA82F2 		clz	r2, r2
 1319 04ca 52B2     		sxtb	r2, r2
 1320 04cc 42F02002 		orr	r2, r2, #32
 1321 04d0 52B2     		sxtb	r2, r2
 1322 04d2 D2B2     		uxtb	r2, r2
 1323 04d4 02F01F02 		and	r2, r2, #31
 1324 04d8 0121     		movs	r1, #1
 1325 04da 01FA02F2 		lsl	r2, r1, r2
 1326 04de 1340     		ands	r3, r3, r2
 229:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1327              		.loc 2 229 14 discriminator 12
 1328 04e0 002B     		cmp	r3, #0
 1329 04e2 AED0     		beq	.L82
 234:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 235:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 236:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                 
 237:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 238:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 1330              		.loc 2 238 9
 1331 04e4 5A4B     		ldr	r3, .L169
 1332 04e6 1B68     		ldr	r3, [r3]
 1333 04e8 23F0F802 		bic	r2, r3, #248
 1334 04ec 3B1D     		adds	r3, r7, #4
 1335 04ee 1B68     		ldr	r3, [r3]
 1336 04f0 5969     		ldr	r1, [r3, #20]
 1337 04f2 F823     		movs	r3, #248
 1338 04f4 C7F84431 		str	r3, [r7, #324]
 1339              	.LBB194:
 1340              	.LBB195:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1341              		.loc 3 531 4
 1342 04f8 D7F84431 		ldr	r3, [r7, #324]
 1343              		.syntax unified
 1344              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1345 04fc 93FAA3F3 		rbit r3, r3
 1346              	@ 0 "" 2
 1347              		.thumb
 1348              		.syntax unified
 1349 0500 C7F84031 		str	r3, [r7, #320]
 1350              		.loc 3 544 9
 1351 0504 D7F84031 		ldr	r3, [r7, #320]
 1352              	.LBE195:
 1353              	.LBE194:
 1354              		.loc 2 238 9
 1355 0508 B3FA83F3 		clz	r3, r3
 1356 050c 01FA03F3 		lsl	r3, r1, r3
 1357 0510 4F49     		ldr	r1, .L169
 1358 0512 1343     		orrs	r3, r3, r2
 1359 0514 0B60     		str	r3, [r1]
 1360 0516 6AE0     		b	.L62
 1361              	.L73:
 1362 0518 0123     		movs	r3, #1
 1363 051a C7F83C31 		str	r3, [r7, #316]
 1364              	.LBB196:
 1365              	.LBB197:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1366              		.loc 3 531 4
 1367 051e D7F83C31 		ldr	r3, [r7, #316]
 1368              		.syntax unified
 1369              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1370 0522 93FAA3F3 		rbit r3, r3
 1371              	@ 0 "" 2
 1372              		.thumb
 1373              		.syntax unified
 1374 0526 C7F83831 		str	r3, [r7, #312]
 1375              		.loc 3 544 9
 1376 052a D7F83831 		ldr	r3, [r7, #312]
 1377              	.LBE197:
 1378              	.LBE196:
 239:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 240:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 241:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 242:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 243:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_DISABLE();
 1379              		.loc 2 243 9
 1380 052e B3FA83F3 		clz	r3, r3
 1381 0532 03F18453 		add	r3, r3, #276824064
 1382 0536 03F58413 		add	r3, r3, #1081344
 1383 053a 9B00     		lsls	r3, r3, #2
 1384 053c 1A46     		mov	r2, r3
 1385 053e 0023     		movs	r3, #0
 1386 0540 1360     		str	r3, [r2]
 244:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 245:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 246:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 1387              		.loc 2 246 21
 1388 0542 FFF7FEFF 		bl	HAL_GetTick
 1389 0546 C7F8F801 		str	r0, [r7, #504]
 247:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 248:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSI is disabled */
 249:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 1390              		.loc 2 249 14
 1391 054a 0AE0     		b	.L85
 1392              	.L92:
 250:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 251:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 1393              		.loc 2 251 15
 1394 054c FFF7FEFF 		bl	HAL_GetTick
 1395 0550 0246     		mov	r2, r0
 1396              		.loc 2 251 29
 1397 0552 D7F8F831 		ldr	r3, [r7, #504]
 1398 0556 D31A     		subs	r3, r2, r3
 1399              		.loc 2 251 13
 1400 0558 022B     		cmp	r3, #2
 1401 055a 02D9     		bls	.L85
 252:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 253:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 1402              		.loc 2 253 20
 1403 055c 0323     		movs	r3, #3
 1404 055e 00F032BC 		b	.L40
 1405              	.L85:
 1406 0562 0223     		movs	r3, #2
 1407 0564 C7F83431 		str	r3, [r7, #308]
 1408              	.LBB198:
 1409              	.LBB199:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1410              		.loc 3 531 4
 1411 0568 D7F83431 		ldr	r3, [r7, #308]
 1412              		.syntax unified
 1413              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1414 056c 93FAA3F3 		rbit r3, r3
 1415              	@ 0 "" 2
 1416              		.thumb
 1417              		.syntax unified
 1418 0570 C7F83031 		str	r3, [r7, #304]
 1419              		.loc 3 544 9
 1420 0574 D7F83031 		ldr	r3, [r7, #304]
 1421              	.LBE199:
 1422              	.LBE198:
 249:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1423              		.loc 2 249 15
 1424 0578 B3FA83F3 		clz	r3, r3
 1425 057c DBB2     		uxtb	r3, r3
 1426 057e 5B09     		lsrs	r3, r3, #5
 1427 0580 DBB2     		uxtb	r3, r3
 1428 0582 43F00103 		orr	r3, r3, #1
 1429 0586 DBB2     		uxtb	r3, r3
 1430 0588 012B     		cmp	r3, #1
 1431 058a 02D1     		bne	.L87
 249:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1432              		.loc 2 249 15 is_stmt 0 discriminator 1
 1433 058c 304B     		ldr	r3, .L169
 1434 058e 1B68     		ldr	r3, [r3]
 1435 0590 13E0     		b	.L88
 1436              	.L87:
 1437 0592 0223     		movs	r3, #2
 1438 0594 C7F82C31 		str	r3, [r7, #300]
 1439              	.LBB200:
 1440              	.LBB201:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1441              		.loc 3 531 4 is_stmt 1 discriminator 2
 1442 0598 D7F82C31 		ldr	r3, [r7, #300]
 1443              		.syntax unified
 1444              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1445 059c 93FAA3F3 		rbit r3, r3
 1446              	@ 0 "" 2
 1447              		.thumb
 1448              		.syntax unified
 1449 05a0 C7F82831 		str	r3, [r7, #296]
 1450 05a4 0223     		movs	r3, #2
 1451 05a6 C7F82431 		str	r3, [r7, #292]
 1452              	.LBE201:
 1453              	.LBE200:
 1454              	.LBB202:
 1455              	.LBB203:
 1456 05aa D7F82431 		ldr	r3, [r7, #292]
 1457              		.syntax unified
 1458              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1459 05ae 93FAA3F3 		rbit r3, r3
 1460              	@ 0 "" 2
 1461              		.thumb
 1462              		.syntax unified
 1463 05b2 C7F82031 		str	r3, [r7, #288]
 1464              	.LBE203:
 1465              	.LBE202:
 249:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1466              		.loc 2 249 15 discriminator 2
 1467 05b6 264B     		ldr	r3, .L169
 1468 05b8 5B6A     		ldr	r3, [r3, #36]
 1469              	.L88:
 1470 05ba 0222     		movs	r2, #2
 1471 05bc C7F81C21 		str	r2, [r7, #284]
 1472              	.LBB204:
 1473              	.LBB205:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1474              		.loc 3 531 4 discriminator 12
 1475 05c0 D7F81C21 		ldr	r2, [r7, #284]
 1476              		.syntax unified
 1477              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1478 05c4 92FAA2F2 		rbit r2, r2
 1479              	@ 0 "" 2
 1480              		.thumb
 1481              		.syntax unified
 1482 05c8 C7F81821 		str	r2, [r7, #280]
 1483              		.loc 3 544 9 discriminator 12
 1484 05cc D7F81821 		ldr	r2, [r7, #280]
 1485              	.LBE205:
 1486              	.LBE204:
 249:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1487              		.loc 2 249 15 discriminator 12
 1488 05d0 B2FA82F2 		clz	r2, r2
 1489 05d4 52B2     		sxtb	r2, r2
 1490 05d6 42F02002 		orr	r2, r2, #32
 1491 05da 52B2     		sxtb	r2, r2
 1492 05dc D2B2     		uxtb	r2, r2
 1493 05de 02F01F02 		and	r2, r2, #31
 1494 05e2 0121     		movs	r1, #1
 1495 05e4 01FA02F2 		lsl	r2, r1, r2
 1496 05e8 1340     		ands	r3, r3, r2
 249:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1497              		.loc 2 249 14 discriminator 12
 1498 05ea 002B     		cmp	r3, #0
 1499 05ec AED1     		bne	.L92
 1500              	.L62:
 254:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 255:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 256:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 257:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 258:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 259:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------ LSI Configuration -------------------------*/ 
 260:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 1501              		.loc 2 260 25
 1502 05ee 3B1D     		adds	r3, r7, #4
 1503 05f0 1B68     		ldr	r3, [r3]
 1504 05f2 1B68     		ldr	r3, [r3]
 1505              		.loc 2 260 43
 1506 05f4 03F00803 		and	r3, r3, #8
 1507              		.loc 2 260 5
 1508 05f8 002B     		cmp	r3, #0
 1509 05fa 00F0D880 		beq	.L93
 261:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 262:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 263:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 264:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 265:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSI State */
 266:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 1510              		.loc 2 266 25
 1511 05fe 3B1D     		adds	r3, r7, #4
 1512 0600 1B68     		ldr	r3, [r3]
 1513 0602 9B69     		ldr	r3, [r3, #24]
 1514              		.loc 2 266 7
 1515 0604 002B     		cmp	r3, #0
 1516 0606 67D0     		beq	.L94
 1517 0608 0123     		movs	r3, #1
 1518 060a C7F81431 		str	r3, [r7, #276]
 1519              	.LBB206:
 1520              	.LBB207:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1521              		.loc 3 531 4
 1522 060e D7F81431 		ldr	r3, [r7, #276]
 1523              		.syntax unified
 1524              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1525 0612 93FAA3F3 		rbit r3, r3
 1526              	@ 0 "" 2
 1527              		.thumb
 1528              		.syntax unified
 1529 0616 C7F81031 		str	r3, [r7, #272]
 1530              		.loc 3 544 9
 1531 061a D7F81031 		ldr	r3, [r7, #272]
 1532              	.LBE207:
 1533              	.LBE206:
 267:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 268:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 269:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_LSI_ENABLE();
 1534              		.loc 2 269 7
 1535 061e B3FA83F3 		clz	r3, r3
 1536 0622 1A46     		mov	r2, r3
 1537 0624 0B4B     		ldr	r3, .L169+4
 1538 0626 1344     		add	r3, r3, r2
 1539 0628 9B00     		lsls	r3, r3, #2
 1540 062a 1A46     		mov	r2, r3
 1541 062c 0123     		movs	r3, #1
 1542 062e 1360     		str	r3, [r2]
 270:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 271:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 272:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 1543              		.loc 2 272 19
 1544 0630 FFF7FEFF 		bl	HAL_GetTick
 1545 0634 C7F8F801 		str	r0, [r7, #504]
 273:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 274:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSI is ready */  
 275:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 1546              		.loc 2 275 12
 1547 0638 0EE0     		b	.L96
 1548              	.L101:
 276:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 277:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 1549              		.loc 2 277 13
 1550 063a FFF7FEFF 		bl	HAL_GetTick
 1551 063e 0246     		mov	r2, r0
 1552              		.loc 2 277 27
 1553 0640 D7F8F831 		ldr	r3, [r7, #504]
 1554 0644 D31A     		subs	r3, r2, r3
 1555              		.loc 2 277 11
 1556 0646 022B     		cmp	r3, #2
 1557 0648 06D9     		bls	.L96
 278:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 279:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 1558              		.loc 2 279 18
 1559 064a 0323     		movs	r3, #3
 1560 064c BBE3     		b	.L40
 1561              	.L170:
 1562 064e 00BF     		.align	2
 1563              	.L169:
 1564 0650 00100240 		.word	1073876992
 1565 0654 20819010 		.word	277905696
 1566              	.L96:
 1567 0658 0223     		movs	r3, #2
 1568 065a C7F80C31 		str	r3, [r7, #268]
 1569              	.LBB208:
 1570              	.LBB209:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1571              		.loc 3 531 4
 1572 065e D7F80C31 		ldr	r3, [r7, #268]
 1573              		.syntax unified
 1574              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1575 0662 93FAA3F3 		rbit r3, r3
 1576              	@ 0 "" 2
 1577              		.thumb
 1578              		.syntax unified
 1579 0666 C7F80831 		str	r3, [r7, #264]
 1580 066a 0223     		movs	r3, #2
 1581 066c C7F80431 		str	r3, [r7, #260]
 1582              	.LBE209:
 1583              	.LBE208:
 1584              	.LBB210:
 1585              	.LBB211:
 1586 0670 D7F80431 		ldr	r3, [r7, #260]
 1587              		.syntax unified
 1588              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1589 0674 93FAA3F2 		rbit r2, r3
 1590              	@ 0 "" 2
 1591              		.thumb
 1592              		.syntax unified
 1593 0678 07F58073 		add	r3, r7, #256
 1594 067c 1A60     		str	r2, [r3]
 1595 067e 07F1FC03 		add	r3, r7, #252
 1596 0682 0222     		movs	r2, #2
 1597 0684 1A60     		str	r2, [r3]
 1598              	.LBE211:
 1599              	.LBE210:
 1600              	.LBB212:
 1601              	.LBB213:
 1602 0686 07F1FC03 		add	r3, r7, #252
 1603 068a 1B68     		ldr	r3, [r3]
 1604              		.syntax unified
 1605              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1606 068c 93FAA3F2 		rbit r2, r3
 1607              	@ 0 "" 2
 1608              		.thumb
 1609              		.syntax unified
 1610 0690 07F1F803 		add	r3, r7, #248
 1611 0694 1A60     		str	r2, [r3]
 1612              	.LBE213:
 1613              	.LBE212:
 275:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1614              		.loc 2 275 13
 1615 0696 A54B     		ldr	r3, .L171
 1616 0698 5A6A     		ldr	r2, [r3, #36]
 1617 069a 07F1F403 		add	r3, r7, #244
 1618 069e 0221     		movs	r1, #2
 1619 06a0 1960     		str	r1, [r3]
 1620              	.LBB214:
 1621              	.LBB215:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1622              		.loc 3 531 4
 1623 06a2 07F1F403 		add	r3, r7, #244
 1624 06a6 1B68     		ldr	r3, [r3]
 1625              		.syntax unified
 1626              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1627 06a8 93FAA3F1 		rbit r1, r3
 1628              	@ 0 "" 2
 1629              		.thumb
 1630              		.syntax unified
 1631 06ac 07F1F003 		add	r3, r7, #240
 1632 06b0 1960     		str	r1, [r3]
 1633              		.loc 3 544 9
 1634 06b2 07F1F003 		add	r3, r7, #240
 1635 06b6 1B68     		ldr	r3, [r3]
 1636              	.LBE215:
 1637              	.LBE214:
 275:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1638              		.loc 2 275 13
 1639 06b8 B3FA83F3 		clz	r3, r3
 1640 06bc 5BB2     		sxtb	r3, r3
 1641 06be 43F06003 		orr	r3, r3, #96
 1642 06c2 5BB2     		sxtb	r3, r3
 1643 06c4 DBB2     		uxtb	r3, r3
 1644 06c6 03F01F03 		and	r3, r3, #31
 1645 06ca 0121     		movs	r1, #1
 1646 06cc 01FA03F3 		lsl	r3, r1, r3
 1647 06d0 1340     		ands	r3, r3, r2
 275:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1648              		.loc 2 275 12
 1649 06d2 002B     		cmp	r3, #0
 1650 06d4 B1D0     		beq	.L101
 1651 06d6 6AE0     		b	.L93
 1652              	.L94:
 1653 06d8 07F1EC03 		add	r3, r7, #236
 1654 06dc 0122     		movs	r2, #1
 1655 06de 1A60     		str	r2, [r3]
 1656              	.LBB216:
 1657              	.LBB217:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1658              		.loc 3 531 4
 1659 06e0 07F1EC03 		add	r3, r7, #236
 1660 06e4 1B68     		ldr	r3, [r3]
 1661              		.syntax unified
 1662              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1663 06e6 93FAA3F2 		rbit r2, r3
 1664              	@ 0 "" 2
 1665              		.thumb
 1666              		.syntax unified
 1667 06ea 07F1E803 		add	r3, r7, #232
 1668 06ee 1A60     		str	r2, [r3]
 1669              		.loc 3 544 9
 1670 06f0 07F1E803 		add	r3, r7, #232
 1671 06f4 1B68     		ldr	r3, [r3]
 1672              	.LBE217:
 1673              	.LBE216:
 280:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 281:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 282:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 283:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 284:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 285:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 286:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_LSI_DISABLE();
 1674              		.loc 2 286 7
 1675 06f6 B3FA83F3 		clz	r3, r3
 1676 06fa 1A46     		mov	r2, r3
 1677 06fc 8C4B     		ldr	r3, .L171+4
 1678 06fe 1344     		add	r3, r3, r2
 1679 0700 9B00     		lsls	r3, r3, #2
 1680 0702 1A46     		mov	r2, r3
 1681 0704 0023     		movs	r3, #0
 1682 0706 1360     		str	r3, [r2]
 287:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 288:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 289:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 1683              		.loc 2 289 19
 1684 0708 FFF7FEFF 		bl	HAL_GetTick
 1685 070c C7F8F801 		str	r0, [r7, #504]
 290:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 291:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSI is disabled */  
 292:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 1686              		.loc 2 292 12
 1687 0710 09E0     		b	.L103
 1688              	.L108:
 293:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 294:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 1689              		.loc 2 294 13
 1690 0712 FFF7FEFF 		bl	HAL_GetTick
 1691 0716 0246     		mov	r2, r0
 1692              		.loc 2 294 27
 1693 0718 D7F8F831 		ldr	r3, [r7, #504]
 1694 071c D31A     		subs	r3, r2, r3
 1695              		.loc 2 294 11
 1696 071e 022B     		cmp	r3, #2
 1697 0720 01D9     		bls	.L103
 295:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 296:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 1698              		.loc 2 296 18
 1699 0722 0323     		movs	r3, #3
 1700 0724 4FE3     		b	.L40
 1701              	.L103:
 1702 0726 07F1E403 		add	r3, r7, #228
 1703 072a 0222     		movs	r2, #2
 1704 072c 1A60     		str	r2, [r3]
 1705              	.LBB218:
 1706              	.LBB219:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1707              		.loc 3 531 4
 1708 072e 07F1E403 		add	r3, r7, #228
 1709 0732 1B68     		ldr	r3, [r3]
 1710              		.syntax unified
 1711              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1712 0734 93FAA3F2 		rbit r2, r3
 1713              	@ 0 "" 2
 1714              		.thumb
 1715              		.syntax unified
 1716 0738 07F1E003 		add	r3, r7, #224
 1717 073c 1A60     		str	r2, [r3]
 1718 073e 07F1DC03 		add	r3, r7, #220
 1719 0742 0222     		movs	r2, #2
 1720 0744 1A60     		str	r2, [r3]
 1721              	.LBE219:
 1722              	.LBE218:
 1723              	.LBB220:
 1724              	.LBB221:
 1725 0746 07F1DC03 		add	r3, r7, #220
 1726 074a 1B68     		ldr	r3, [r3]
 1727              		.syntax unified
 1728              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1729 074c 93FAA3F2 		rbit r2, r3
 1730              	@ 0 "" 2
 1731              		.thumb
 1732              		.syntax unified
 1733 0750 07F1D803 		add	r3, r7, #216
 1734 0754 1A60     		str	r2, [r3]
 1735 0756 07F1D403 		add	r3, r7, #212
 1736 075a 0222     		movs	r2, #2
 1737 075c 1A60     		str	r2, [r3]
 1738              	.LBE221:
 1739              	.LBE220:
 1740              	.LBB222:
 1741              	.LBB223:
 1742 075e 07F1D403 		add	r3, r7, #212
 1743 0762 1B68     		ldr	r3, [r3]
 1744              		.syntax unified
 1745              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1746 0764 93FAA3F2 		rbit r2, r3
 1747              	@ 0 "" 2
 1748              		.thumb
 1749              		.syntax unified
 1750 0768 07F1D003 		add	r3, r7, #208
 1751 076c 1A60     		str	r2, [r3]
 1752              	.LBE223:
 1753              	.LBE222:
 292:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1754              		.loc 2 292 13
 1755 076e 6F4B     		ldr	r3, .L171
 1756 0770 5A6A     		ldr	r2, [r3, #36]
 1757 0772 07F1CC03 		add	r3, r7, #204
 1758 0776 0221     		movs	r1, #2
 1759 0778 1960     		str	r1, [r3]
 1760              	.LBB224:
 1761              	.LBB225:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1762              		.loc 3 531 4
 1763 077a 07F1CC03 		add	r3, r7, #204
 1764 077e 1B68     		ldr	r3, [r3]
 1765              		.syntax unified
 1766              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1767 0780 93FAA3F1 		rbit r1, r3
 1768              	@ 0 "" 2
 1769              		.thumb
 1770              		.syntax unified
 1771 0784 07F1C803 		add	r3, r7, #200
 1772 0788 1960     		str	r1, [r3]
 1773              		.loc 3 544 9
 1774 078a 07F1C803 		add	r3, r7, #200
 1775 078e 1B68     		ldr	r3, [r3]
 1776              	.LBE225:
 1777              	.LBE224:
 292:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1778              		.loc 2 292 13
 1779 0790 B3FA83F3 		clz	r3, r3
 1780 0794 5BB2     		sxtb	r3, r3
 1781 0796 43F06003 		orr	r3, r3, #96
 1782 079a 5BB2     		sxtb	r3, r3
 1783 079c DBB2     		uxtb	r3, r3
 1784 079e 03F01F03 		and	r3, r3, #31
 1785 07a2 0121     		movs	r1, #1
 1786 07a4 01FA03F3 		lsl	r3, r1, r3
 1787 07a8 1340     		ands	r3, r3, r2
 292:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1788              		.loc 2 292 12
 1789 07aa 002B     		cmp	r3, #0
 1790 07ac B1D1     		bne	.L108
 1791              	.L93:
 297:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 298:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 299:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 300:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 301:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 302:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 1792              		.loc 2 302 25
 1793 07ae 3B1D     		adds	r3, r7, #4
 1794 07b0 1B68     		ldr	r3, [r3]
 1795 07b2 1B68     		ldr	r3, [r3]
 1796              		.loc 2 302 43
 1797 07b4 03F00403 		and	r3, r3, #4
 1798              		.loc 2 302 5
 1799 07b8 002B     		cmp	r3, #0
 1800 07ba 00F05981 		beq	.L109
 1801              	.LBB226:
 303:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 304:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     FlagStatus       pwrclkchanged = RESET;
 1802              		.loc 2 304 22
 1803 07be 0023     		movs	r3, #0
 1804 07c0 87F8FF31 		strb	r3, [r7, #511]
 305:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 306:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 307:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 308:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 309:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Update LSE configuration in Backup Domain control register    */
 310:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Requires to enable write access to Backup Domain of necessary */
 311:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 1805              		.loc 2 311 8
 1806 07c4 594B     		ldr	r3, .L171
 1807 07c6 DB69     		ldr	r3, [r3, #28]
 1808 07c8 03F08053 		and	r3, r3, #268435456
 1809              		.loc 2 311 7
 1810 07cc 002B     		cmp	r3, #0
 1811 07ce 12D1     		bne	.L110
 1812              	.LBB227:
 312:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 313:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 1813              		.loc 2 313 7
 1814 07d0 564B     		ldr	r3, .L171
 1815 07d2 DB69     		ldr	r3, [r3, #28]
 1816 07d4 554A     		ldr	r2, .L171
 1817 07d6 43F08053 		orr	r3, r3, #268435456
 1818 07da D361     		str	r3, [r2, #28]
 1819 07dc 534B     		ldr	r3, .L171
 1820 07de DB69     		ldr	r3, [r3, #28]
 1821 07e0 03F08052 		and	r2, r3, #268435456
 1822 07e4 07F10C03 		add	r3, r7, #12
 1823 07e8 1A60     		str	r2, [r3]
 1824 07ea 07F10C03 		add	r3, r7, #12
 1825 07ee 1B68     		ldr	r3, [r3]
 1826              	.LBE227:
 314:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       pwrclkchanged = SET;
 1827              		.loc 2 314 21
 1828 07f0 0123     		movs	r3, #1
 1829 07f2 87F8FF31 		strb	r3, [r7, #511]
 1830              	.L110:
 315:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 316:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 317:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 1831              		.loc 2 317 8
 1832 07f6 4F4B     		ldr	r3, .L171+8
 1833 07f8 1B68     		ldr	r3, [r3]
 1834 07fa 03F48073 		and	r3, r3, #256
 1835              		.loc 2 317 7
 1836 07fe 002B     		cmp	r3, #0
 1837 0800 1AD1     		bne	.L111
 318:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 319:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Enable write access to Backup domain */
 320:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 1838              		.loc 2 320 7
 1839 0802 4C4B     		ldr	r3, .L171+8
 1840 0804 1B68     		ldr	r3, [r3]
 1841 0806 4B4A     		ldr	r2, .L171+8
 1842 0808 43F48073 		orr	r3, r3, #256
 1843 080c 1360     		str	r3, [r2]
 321:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 322:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait for Backup domain Write protection disable */
 323:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 1844              		.loc 2 323 19
 1845 080e FFF7FEFF 		bl	HAL_GetTick
 1846 0812 C7F8F801 		str	r0, [r7, #504]
 324:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 325:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 1847              		.loc 2 325 12
 1848 0816 09E0     		b	.L112
 1849              	.L113:
 326:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 327:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 1850              		.loc 2 327 13
 1851 0818 FFF7FEFF 		bl	HAL_GetTick
 1852 081c 0246     		mov	r2, r0
 1853              		.loc 2 327 27
 1854 081e D7F8F831 		ldr	r3, [r7, #504]
 1855 0822 D31A     		subs	r3, r2, r3
 1856              		.loc 2 327 11
 1857 0824 642B     		cmp	r3, #100
 1858 0826 01D9     		bls	.L112
 328:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 329:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 1859              		.loc 2 329 18
 1860 0828 0323     		movs	r3, #3
 1861 082a CCE2     		b	.L40
 1862              	.L112:
 325:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1863              		.loc 2 325 13
 1864 082c 414B     		ldr	r3, .L171+8
 1865 082e 1B68     		ldr	r3, [r3]
 1866 0830 03F48073 		and	r3, r3, #256
 325:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1867              		.loc 2 325 12
 1868 0834 002B     		cmp	r3, #0
 1869 0836 EFD0     		beq	.L113
 1870              	.L111:
 330:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 331:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 332:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 333:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 334:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Set the new LSE configuration -----------------------------------------*/
 335:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 1871              		.loc 2 335 5
 1872 0838 3B1D     		adds	r3, r7, #4
 1873 083a 1B68     		ldr	r3, [r3]
 1874 083c DB68     		ldr	r3, [r3, #12]
 1875 083e 012B     		cmp	r3, #1
 1876 0840 06D1     		bne	.L114
 1877              		.loc 2 335 5 is_stmt 0 discriminator 1
 1878 0842 3A4B     		ldr	r3, .L171
 1879 0844 1B6A     		ldr	r3, [r3, #32]
 1880 0846 394A     		ldr	r2, .L171
 1881 0848 43F00103 		orr	r3, r3, #1
 1882 084c 1362     		str	r3, [r2, #32]
 1883 084e 2FE0     		b	.L115
 1884              	.L114:
 1885              		.loc 2 335 5 discriminator 2
 1886 0850 3B1D     		adds	r3, r7, #4
 1887 0852 1B68     		ldr	r3, [r3]
 1888 0854 DB68     		ldr	r3, [r3, #12]
 1889 0856 002B     		cmp	r3, #0
 1890 0858 0CD1     		bne	.L116
 1891              		.loc 2 335 5 discriminator 3
 1892 085a 344B     		ldr	r3, .L171
 1893 085c 1B6A     		ldr	r3, [r3, #32]
 1894 085e 334A     		ldr	r2, .L171
 1895 0860 23F00103 		bic	r3, r3, #1
 1896 0864 1362     		str	r3, [r2, #32]
 1897 0866 314B     		ldr	r3, .L171
 1898 0868 1B6A     		ldr	r3, [r3, #32]
 1899 086a 304A     		ldr	r2, .L171
 1900 086c 23F00403 		bic	r3, r3, #4
 1901 0870 1362     		str	r3, [r2, #32]
 1902 0872 1DE0     		b	.L115
 1903              	.L116:
 1904              		.loc 2 335 5 discriminator 4
 1905 0874 3B1D     		adds	r3, r7, #4
 1906 0876 1B68     		ldr	r3, [r3]
 1907 0878 DB68     		ldr	r3, [r3, #12]
 1908 087a 052B     		cmp	r3, #5
 1909 087c 0CD1     		bne	.L117
 1910              		.loc 2 335 5 discriminator 5
 1911 087e 2B4B     		ldr	r3, .L171
 1912 0880 1B6A     		ldr	r3, [r3, #32]
 1913 0882 2A4A     		ldr	r2, .L171
 1914 0884 43F00403 		orr	r3, r3, #4
 1915 0888 1362     		str	r3, [r2, #32]
 1916 088a 284B     		ldr	r3, .L171
 1917 088c 1B6A     		ldr	r3, [r3, #32]
 1918 088e 274A     		ldr	r2, .L171
 1919 0890 43F00103 		orr	r3, r3, #1
 1920 0894 1362     		str	r3, [r2, #32]
 1921 0896 0BE0     		b	.L115
 1922              	.L117:
 1923              		.loc 2 335 5 discriminator 6
 1924 0898 244B     		ldr	r3, .L171
 1925 089a 1B6A     		ldr	r3, [r3, #32]
 1926 089c 234A     		ldr	r2, .L171
 1927 089e 23F00103 		bic	r3, r3, #1
 1928 08a2 1362     		str	r3, [r2, #32]
 1929 08a4 214B     		ldr	r3, .L171
 1930 08a6 1B6A     		ldr	r3, [r3, #32]
 1931 08a8 204A     		ldr	r2, .L171
 1932 08aa 23F00403 		bic	r3, r3, #4
 1933 08ae 1362     		str	r3, [r2, #32]
 1934              	.L115:
 336:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 337:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 1935              		.loc 2 337 25 is_stmt 1
 1936 08b0 3B1D     		adds	r3, r7, #4
 1937 08b2 1B68     		ldr	r3, [r3]
 1938 08b4 DB68     		ldr	r3, [r3, #12]
 1939              		.loc 2 337 7
 1940 08b6 002B     		cmp	r3, #0
 1941 08b8 6BD0     		beq	.L118
 338:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 339:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 340:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 1942              		.loc 2 340 19
 1943 08ba FFF7FEFF 		bl	HAL_GetTick
 1944 08be C7F8F801 		str	r0, [r7, #504]
 341:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 342:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSE is ready */  
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 1945              		.loc 2 343 12
 1946 08c2 0BE0     		b	.L119
 1947              	.L126:
 344:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 345:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 1948              		.loc 2 345 13
 1949 08c4 FFF7FEFF 		bl	HAL_GetTick
 1950 08c8 0246     		mov	r2, r0
 1951              		.loc 2 345 27
 1952 08ca D7F8F831 		ldr	r3, [r7, #504]
 1953 08ce D31A     		subs	r3, r2, r3
 1954              		.loc 2 345 11
 1955 08d0 41F28832 		movw	r2, #5000
 1956 08d4 9342     		cmp	r3, r2
 1957 08d6 01D9     		bls	.L119
 346:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 347:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 1958              		.loc 2 347 18
 1959 08d8 0323     		movs	r3, #3
 1960 08da 74E2     		b	.L40
 1961              	.L119:
 1962 08dc 07F1C403 		add	r3, r7, #196
 1963 08e0 0222     		movs	r2, #2
 1964 08e2 1A60     		str	r2, [r3]
 1965              	.LBB228:
 1966              	.LBB229:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 1967              		.loc 3 531 4
 1968 08e4 07F1C403 		add	r3, r7, #196
 1969 08e8 1B68     		ldr	r3, [r3]
 1970              		.syntax unified
 1971              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1972 08ea 93FAA3F2 		rbit r2, r3
 1973              	@ 0 "" 2
 1974              		.thumb
 1975              		.syntax unified
 1976 08ee 07F1C003 		add	r3, r7, #192
 1977 08f2 1A60     		str	r2, [r3]
 1978 08f4 07F1BC03 		add	r3, r7, #188
 1979 08f8 0222     		movs	r2, #2
 1980 08fa 1A60     		str	r2, [r3]
 1981              	.LBE229:
 1982              	.LBE228:
 1983              	.LBB230:
 1984              	.LBB231:
 1985 08fc 07F1BC03 		add	r3, r7, #188
 1986 0900 1B68     		ldr	r3, [r3]
 1987              		.syntax unified
 1988              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1989 0902 93FAA3F2 		rbit r2, r3
 1990              	@ 0 "" 2
 1991              		.thumb
 1992              		.syntax unified
 1993 0906 07F1B803 		add	r3, r7, #184
 1994 090a 1A60     		str	r2, [r3]
 1995              		.loc 3 544 9
 1996 090c 07F1B803 		add	r3, r7, #184
 1997 0910 1B68     		ldr	r3, [r3]
 1998              	.LBE231:
 1999              	.LBE230:
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2000              		.loc 2 343 13
 2001 0912 B3FA83F3 		clz	r3, r3
 2002 0916 DBB2     		uxtb	r3, r3
 2003 0918 5B09     		lsrs	r3, r3, #5
 2004 091a DBB2     		uxtb	r3, r3
 2005 091c 43F00203 		orr	r3, r3, #2
 2006 0920 DBB2     		uxtb	r3, r3
 2007 0922 022B     		cmp	r3, #2
 2008 0924 08D1     		bne	.L122
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2009              		.loc 2 343 13 is_stmt 0 discriminator 4
 2010 0926 014B     		ldr	r3, .L171
 2011 0928 1B6A     		ldr	r3, [r3, #32]
 2012 092a 13E0     		b	.L123
 2013              	.L172:
 2014              		.align	2
 2015              	.L171:
 2016 092c 00100240 		.word	1073876992
 2017 0930 20819010 		.word	277905696
 2018 0934 00700040 		.word	1073770496
 2019              	.L122:
 2020 0938 07F1B403 		add	r3, r7, #180
 2021 093c 0222     		movs	r2, #2
 2022 093e 1A60     		str	r2, [r3]
 2023              	.LBB232:
 2024              	.LBB233:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2025              		.loc 3 531 4 is_stmt 1 discriminator 5
 2026 0940 07F1B403 		add	r3, r7, #180
 2027 0944 1B68     		ldr	r3, [r3]
 2028              		.syntax unified
 2029              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2030 0946 93FAA3F2 		rbit r2, r3
 2031              	@ 0 "" 2
 2032              		.thumb
 2033              		.syntax unified
 2034 094a 07F1B003 		add	r3, r7, #176
 2035 094e 1A60     		str	r2, [r3]
 2036              	.LBE233:
 2037              	.LBE232:
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2038              		.loc 2 343 13 discriminator 5
 2039 0950 BB4B     		ldr	r3, .L173
 2040 0952 5B6A     		ldr	r3, [r3, #36]
 2041              	.L123:
 2042 0954 07F1AC02 		add	r2, r7, #172
 2043 0958 0221     		movs	r1, #2
 2044 095a 1160     		str	r1, [r2]
 2045              	.LBB234:
 2046              	.LBB235:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2047              		.loc 3 531 4 discriminator 11
 2048 095c 07F1AC02 		add	r2, r7, #172
 2049 0960 1268     		ldr	r2, [r2]
 2050              		.syntax unified
 2051              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2052 0962 92FAA2F1 		rbit r1, r2
 2053              	@ 0 "" 2
 2054              		.thumb
 2055              		.syntax unified
 2056 0966 07F1A802 		add	r2, r7, #168
 2057 096a 1160     		str	r1, [r2]
 2058              		.loc 3 544 9 discriminator 11
 2059 096c 07F1A802 		add	r2, r7, #168
 2060 0970 1268     		ldr	r2, [r2]
 2061              	.LBE235:
 2062              	.LBE234:
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2063              		.loc 2 343 13 discriminator 11
 2064 0972 B2FA82F2 		clz	r2, r2
 2065 0976 52B2     		sxtb	r2, r2
 2066 0978 42F04002 		orr	r2, r2, #64
 2067 097c 52B2     		sxtb	r2, r2
 2068 097e D2B2     		uxtb	r2, r2
 2069 0980 02F01F02 		and	r2, r2, #31
 2070 0984 0121     		movs	r1, #1
 2071 0986 01FA02F2 		lsl	r2, r1, r2
 2072 098a 1340     		ands	r3, r3, r2
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2073              		.loc 2 343 12 discriminator 11
 2074 098c 002B     		cmp	r3, #0
 2075 098e 99D0     		beq	.L126
 2076 0990 64E0     		b	.L127
 2077              	.L118:
 348:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 349:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 350:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 351:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 352:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 353:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 354:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 2078              		.loc 2 354 19
 2079 0992 FFF7FEFF 		bl	HAL_GetTick
 2080 0996 C7F8F801 		str	r0, [r7, #504]
 355:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 356:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSE is disabled */  
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 2081              		.loc 2 357 12
 2082 099a 0BE0     		b	.L128
 2083              	.L135:
 358:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 359:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 2084              		.loc 2 359 13
 2085 099c FFF7FEFF 		bl	HAL_GetTick
 2086 09a0 0246     		mov	r2, r0
 2087              		.loc 2 359 27
 2088 09a2 D7F8F831 		ldr	r3, [r7, #504]
 2089 09a6 D31A     		subs	r3, r2, r3
 2090              		.loc 2 359 11
 2091 09a8 41F28832 		movw	r2, #5000
 2092 09ac 9342     		cmp	r3, r2
 2093 09ae 01D9     		bls	.L128
 360:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 361:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 2094              		.loc 2 361 18
 2095 09b0 0323     		movs	r3, #3
 2096 09b2 08E2     		b	.L40
 2097              	.L128:
 2098 09b4 07F1A403 		add	r3, r7, #164
 2099 09b8 0222     		movs	r2, #2
 2100 09ba 1A60     		str	r2, [r3]
 2101              	.LBB236:
 2102              	.LBB237:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2103              		.loc 3 531 4
 2104 09bc 07F1A403 		add	r3, r7, #164
 2105 09c0 1B68     		ldr	r3, [r3]
 2106              		.syntax unified
 2107              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2108 09c2 93FAA3F2 		rbit r2, r3
 2109              	@ 0 "" 2
 2110              		.thumb
 2111              		.syntax unified
 2112 09c6 07F1A003 		add	r3, r7, #160
 2113 09ca 1A60     		str	r2, [r3]
 2114 09cc 07F19C03 		add	r3, r7, #156
 2115 09d0 0222     		movs	r2, #2
 2116 09d2 1A60     		str	r2, [r3]
 2117              	.LBE237:
 2118              	.LBE236:
 2119              	.LBB238:
 2120              	.LBB239:
 2121 09d4 07F19C03 		add	r3, r7, #156
 2122 09d8 1B68     		ldr	r3, [r3]
 2123              		.syntax unified
 2124              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2125 09da 93FAA3F2 		rbit r2, r3
 2126              	@ 0 "" 2
 2127              		.thumb
 2128              		.syntax unified
 2129 09de 07F19803 		add	r3, r7, #152
 2130 09e2 1A60     		str	r2, [r3]
 2131              		.loc 3 544 9
 2132 09e4 07F19803 		add	r3, r7, #152
 2133 09e8 1B68     		ldr	r3, [r3]
 2134              	.LBE239:
 2135              	.LBE238:
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2136              		.loc 2 357 13
 2137 09ea B3FA83F3 		clz	r3, r3
 2138 09ee DBB2     		uxtb	r3, r3
 2139 09f0 5B09     		lsrs	r3, r3, #5
 2140 09f2 DBB2     		uxtb	r3, r3
 2141 09f4 43F00203 		orr	r3, r3, #2
 2142 09f8 DBB2     		uxtb	r3, r3
 2143 09fa 022B     		cmp	r3, #2
 2144 09fc 02D1     		bne	.L131
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2145              		.loc 2 357 13 is_stmt 0 discriminator 4
 2146 09fe 904B     		ldr	r3, .L173
 2147 0a00 1B6A     		ldr	r3, [r3, #32]
 2148 0a02 0DE0     		b	.L132
 2149              	.L131:
 2150 0a04 07F19403 		add	r3, r7, #148
 2151 0a08 0222     		movs	r2, #2
 2152 0a0a 1A60     		str	r2, [r3]
 2153              	.LBB240:
 2154              	.LBB241:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2155              		.loc 3 531 4 is_stmt 1 discriminator 5
 2156 0a0c 07F19403 		add	r3, r7, #148
 2157 0a10 1B68     		ldr	r3, [r3]
 2158              		.syntax unified
 2159              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2160 0a12 93FAA3F2 		rbit r2, r3
 2161              	@ 0 "" 2
 2162              		.thumb
 2163              		.syntax unified
 2164 0a16 07F19003 		add	r3, r7, #144
 2165 0a1a 1A60     		str	r2, [r3]
 2166              	.LBE241:
 2167              	.LBE240:
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2168              		.loc 2 357 13 discriminator 5
 2169 0a1c 884B     		ldr	r3, .L173
 2170 0a1e 5B6A     		ldr	r3, [r3, #36]
 2171              	.L132:
 2172 0a20 07F18C02 		add	r2, r7, #140
 2173 0a24 0221     		movs	r1, #2
 2174 0a26 1160     		str	r1, [r2]
 2175              	.LBB242:
 2176              	.LBB243:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2177              		.loc 3 531 4 discriminator 11
 2178 0a28 07F18C02 		add	r2, r7, #140
 2179 0a2c 1268     		ldr	r2, [r2]
 2180              		.syntax unified
 2181              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2182 0a2e 92FAA2F1 		rbit r1, r2
 2183              	@ 0 "" 2
 2184              		.thumb
 2185              		.syntax unified
 2186 0a32 07F18802 		add	r2, r7, #136
 2187 0a36 1160     		str	r1, [r2]
 2188              		.loc 3 544 9 discriminator 11
 2189 0a38 07F18802 		add	r2, r7, #136
 2190 0a3c 1268     		ldr	r2, [r2]
 2191              	.LBE243:
 2192              	.LBE242:
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2193              		.loc 2 357 13 discriminator 11
 2194 0a3e B2FA82F2 		clz	r2, r2
 2195 0a42 52B2     		sxtb	r2, r2
 2196 0a44 42F04002 		orr	r2, r2, #64
 2197 0a48 52B2     		sxtb	r2, r2
 2198 0a4a D2B2     		uxtb	r2, r2
 2199 0a4c 02F01F02 		and	r2, r2, #31
 2200 0a50 0121     		movs	r1, #1
 2201 0a52 01FA02F2 		lsl	r2, r1, r2
 2202 0a56 1340     		ands	r3, r3, r2
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2203              		.loc 2 357 12 discriminator 11
 2204 0a58 002B     		cmp	r3, #0
 2205 0a5a 9FD1     		bne	.L135
 2206              	.L127:
 362:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 363:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 364:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 365:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 366:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Require to disable power clock if necessary */
 367:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(pwrclkchanged == SET)
 2207              		.loc 2 367 7
 2208 0a5c 97F8FF31 		ldrb	r3, [r7, #511]	@ zero_extendqisi2
 2209 0a60 012B     		cmp	r3, #1
 2210 0a62 05D1     		bne	.L109
 368:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 369:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 2211              		.loc 2 369 7
 2212 0a64 764B     		ldr	r3, .L173
 2213 0a66 DB69     		ldr	r3, [r3, #28]
 2214 0a68 754A     		ldr	r2, .L173
 2215 0a6a 23F08053 		bic	r3, r3, #268435456
 2216 0a6e D361     		str	r3, [r2, #28]
 2217              	.L109:
 2218              	.LBE226:
 370:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 371:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 372:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 373:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 374:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 375:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 376:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 2219              		.loc 2 376 30
 2220 0a70 3B1D     		adds	r3, r7, #4
 2221 0a72 1B68     		ldr	r3, [r3]
 2222 0a74 DB69     		ldr	r3, [r3, #28]
 2223              		.loc 2 376 6
 2224 0a76 002B     		cmp	r3, #0
 2225 0a78 00F0A481 		beq	.L136
 377:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 378:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check if the PLL is used as system clock or not */
 379:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 2226              		.loc 2 379 8
 2227 0a7c 704B     		ldr	r3, .L173
 2228 0a7e 5B68     		ldr	r3, [r3, #4]
 2229 0a80 03F00C03 		and	r3, r3, #12
 2230              		.loc 2 379 7
 2231 0a84 082B     		cmp	r3, #8
 2232 0a86 00F09B81 		beq	.L137
 380:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     { 
 381:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 2233              		.loc 2 381 33
 2234 0a8a 3B1D     		adds	r3, r7, #4
 2235 0a8c 1B68     		ldr	r3, [r3]
 2236 0a8e DB69     		ldr	r3, [r3, #28]
 2237              		.loc 2 381 9
 2238 0a90 022B     		cmp	r3, #2
 2239 0a92 40F01381 		bne	.L138
 2240 0a96 07F18403 		add	r3, r7, #132
 2241 0a9a 4FF08072 		mov	r2, #16777216
 2242 0a9e 1A60     		str	r2, [r3]
 2243              	.LBB244:
 2244              	.LBB245:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2245              		.loc 3 531 4
 2246 0aa0 07F18403 		add	r3, r7, #132
 2247 0aa4 1B68     		ldr	r3, [r3]
 2248              		.syntax unified
 2249              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2250 0aa6 93FAA3F2 		rbit r2, r3
 2251              	@ 0 "" 2
 2252              		.thumb
 2253              		.syntax unified
 2254 0aaa 07F18003 		add	r3, r7, #128
 2255 0aae 1A60     		str	r2, [r3]
 2256              		.loc 3 544 9
 2257 0ab0 07F18003 		add	r3, r7, #128
 2258 0ab4 1B68     		ldr	r3, [r3]
 2259              	.LBE245:
 2260              	.LBE244:
 382:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 383:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the parameters */
 384:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 385:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 386:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
 387:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 388:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif
 389:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 390:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the main PLL. */
 391:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 2261              		.loc 2 391 9
 2262 0ab6 B3FA83F3 		clz	r3, r3
 2263 0aba 03F18453 		add	r3, r3, #276824064
 2264 0abe 03F58413 		add	r3, r3, #1081344
 2265 0ac2 9B00     		lsls	r3, r3, #2
 2266 0ac4 1A46     		mov	r2, r3
 2267 0ac6 0023     		movs	r3, #0
 2268 0ac8 1360     		str	r3, [r2]
 392:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 393:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 394:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 2269              		.loc 2 394 21
 2270 0aca FFF7FEFF 		bl	HAL_GetTick
 2271 0ace C7F8F801 		str	r0, [r7, #504]
 395:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 396:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is disabled */
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 2272              		.loc 2 397 14
 2273 0ad2 09E0     		b	.L140
 2274              	.L147:
 398:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 399:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 2275              		.loc 2 399 15
 2276 0ad4 FFF7FEFF 		bl	HAL_GetTick
 2277 0ad8 0246     		mov	r2, r0
 2278              		.loc 2 399 29
 2279 0ada D7F8F831 		ldr	r3, [r7, #504]
 2280 0ade D31A     		subs	r3, r2, r3
 2281              		.loc 2 399 13
 2282 0ae0 022B     		cmp	r3, #2
 2283 0ae2 01D9     		bls	.L140
 400:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 401:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 2284              		.loc 2 401 20
 2285 0ae4 0323     		movs	r3, #3
 2286 0ae6 6EE1     		b	.L40
 2287              	.L140:
 2288 0ae8 07F17C03 		add	r3, r7, #124
 2289 0aec 4FF00072 		mov	r2, #33554432
 2290 0af0 1A60     		str	r2, [r3]
 2291              	.LBB246:
 2292              	.LBB247:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2293              		.loc 3 531 4
 2294 0af2 07F17C03 		add	r3, r7, #124
 2295 0af6 1B68     		ldr	r3, [r3]
 2296              		.syntax unified
 2297              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2298 0af8 93FAA3F2 		rbit r2, r3
 2299              	@ 0 "" 2
 2300              		.thumb
 2301              		.syntax unified
 2302 0afc 07F17803 		add	r3, r7, #120
 2303 0b00 1A60     		str	r2, [r3]
 2304              		.loc 3 544 9
 2305 0b02 07F17803 		add	r3, r7, #120
 2306 0b06 1B68     		ldr	r3, [r3]
 2307              	.LBE247:
 2308              	.LBE246:
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2309              		.loc 2 397 15
 2310 0b08 B3FA83F3 		clz	r3, r3
 2311 0b0c DBB2     		uxtb	r3, r3
 2312 0b0e 5B09     		lsrs	r3, r3, #5
 2313 0b10 DBB2     		uxtb	r3, r3
 2314 0b12 43F00103 		orr	r3, r3, #1
 2315 0b16 DBB2     		uxtb	r3, r3
 2316 0b18 012B     		cmp	r3, #1
 2317 0b1a 02D1     		bne	.L142
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2318              		.loc 2 397 15 is_stmt 0 discriminator 1
 2319 0b1c 484B     		ldr	r3, .L173
 2320 0b1e 1B68     		ldr	r3, [r3]
 2321 0b20 1BE0     		b	.L143
 2322              	.L142:
 2323 0b22 07F17403 		add	r3, r7, #116
 2324 0b26 4FF00072 		mov	r2, #33554432
 2325 0b2a 1A60     		str	r2, [r3]
 2326              	.LBB248:
 2327              	.LBB249:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2328              		.loc 3 531 4 is_stmt 1 discriminator 2
 2329 0b2c 07F17403 		add	r3, r7, #116
 2330 0b30 1B68     		ldr	r3, [r3]
 2331              		.syntax unified
 2332              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2333 0b32 93FAA3F2 		rbit r2, r3
 2334              	@ 0 "" 2
 2335              		.thumb
 2336              		.syntax unified
 2337 0b36 07F17003 		add	r3, r7, #112
 2338 0b3a 1A60     		str	r2, [r3]
 2339 0b3c 07F16C03 		add	r3, r7, #108
 2340 0b40 4FF00072 		mov	r2, #33554432
 2341 0b44 1A60     		str	r2, [r3]
 2342              	.LBE249:
 2343              	.LBE248:
 2344              	.LBB250:
 2345              	.LBB251:
 2346 0b46 07F16C03 		add	r3, r7, #108
 2347 0b4a 1B68     		ldr	r3, [r3]
 2348              		.syntax unified
 2349              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2350 0b4c 93FAA3F2 		rbit r2, r3
 2351              	@ 0 "" 2
 2352              		.thumb
 2353              		.syntax unified
 2354 0b50 07F16803 		add	r3, r7, #104
 2355 0b54 1A60     		str	r2, [r3]
 2356              	.LBE251:
 2357              	.LBE250:
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2358              		.loc 2 397 15 discriminator 2
 2359 0b56 3A4B     		ldr	r3, .L173
 2360 0b58 5B6A     		ldr	r3, [r3, #36]
 2361              	.L143:
 2362 0b5a 07F16402 		add	r2, r7, #100
 2363 0b5e 4FF00071 		mov	r1, #33554432
 2364 0b62 1160     		str	r1, [r2]
 2365              	.LBB252:
 2366              	.LBB253:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2367              		.loc 3 531 4 discriminator 12
 2368 0b64 07F16402 		add	r2, r7, #100
 2369 0b68 1268     		ldr	r2, [r2]
 2370              		.syntax unified
 2371              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2372 0b6a 92FAA2F1 		rbit r1, r2
 2373              	@ 0 "" 2
 2374              		.thumb
 2375              		.syntax unified
 2376 0b6e 07F16002 		add	r2, r7, #96
 2377 0b72 1160     		str	r1, [r2]
 2378              		.loc 3 544 9 discriminator 12
 2379 0b74 07F16002 		add	r2, r7, #96
 2380 0b78 1268     		ldr	r2, [r2]
 2381              	.LBE253:
 2382              	.LBE252:
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2383              		.loc 2 397 15 discriminator 12
 2384 0b7a B2FA82F2 		clz	r2, r2
 2385 0b7e 52B2     		sxtb	r2, r2
 2386 0b80 42F02002 		orr	r2, r2, #32
 2387 0b84 52B2     		sxtb	r2, r2
 2388 0b86 D2B2     		uxtb	r2, r2
 2389 0b88 02F01F02 		and	r2, r2, #31
 2390 0b8c 0121     		movs	r1, #1
 2391 0b8e 01FA02F2 		lsl	r2, r1, r2
 2392 0b92 1340     		ands	r3, r3, r2
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2393              		.loc 2 397 14 discriminator 12
 2394 0b94 002B     		cmp	r3, #0
 2395 0b96 9DD1     		bne	.L147
 402:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 403:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 404:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 405:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
 406:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the main PLL clock source, predivider and multiplication factor. */
 407:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 408:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                              RCC_OscInitStruct->PLL.PREDIV,
 409:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 410:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #else
 411:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the main PLL clock source and multiplication factor. */
 412:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 2396              		.loc 2 412 7
 2397 0b98 294B     		ldr	r3, .L173
 2398 0b9a 5B68     		ldr	r3, [r3, #4]
 2399 0b9c 23F47412 		bic	r2, r3, #3997696
 2400 0ba0 3B1D     		adds	r3, r7, #4
 2401 0ba2 1B68     		ldr	r3, [r3]
 2402 0ba4 596A     		ldr	r1, [r3, #36]
 2403 0ba6 3B1D     		adds	r3, r7, #4
 2404 0ba8 1B68     		ldr	r3, [r3]
 2405 0baa 1B6A     		ldr	r3, [r3, #32]
 2406 0bac 0B43     		orrs	r3, r3, r1
 2407 0bae 2449     		ldr	r1, .L173
 2408 0bb0 1343     		orrs	r3, r3, r2
 2409 0bb2 4B60     		str	r3, [r1, #4]
 2410 0bb4 07F15C03 		add	r3, r7, #92
 2411 0bb8 4FF08072 		mov	r2, #16777216
 2412 0bbc 1A60     		str	r2, [r3]
 2413              	.LBB254:
 2414              	.LBB255:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2415              		.loc 3 531 4
 2416 0bbe 07F15C03 		add	r3, r7, #92
 2417 0bc2 1B68     		ldr	r3, [r3]
 2418              		.syntax unified
 2419              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2420 0bc4 93FAA3F2 		rbit r2, r3
 2421              	@ 0 "" 2
 2422              		.thumb
 2423              		.syntax unified
 2424 0bc8 07F15803 		add	r3, r7, #88
 2425 0bcc 1A60     		str	r2, [r3]
 2426              		.loc 3 544 9
 2427 0bce 07F15803 		add	r3, r7, #88
 2428 0bd2 1B68     		ldr	r3, [r3]
 2429              	.LBE255:
 2430              	.LBE254:
 413:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                            RCC_OscInitStruct->PLL.PLLMUL);
 414:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
 415:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Enable the main PLL. */
 416:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_ENABLE();
 2431              		.loc 2 416 9
 2432 0bd4 B3FA83F3 		clz	r3, r3
 2433 0bd8 03F18453 		add	r3, r3, #276824064
 2434 0bdc 03F58413 		add	r3, r3, #1081344
 2435 0be0 9B00     		lsls	r3, r3, #2
 2436 0be2 1A46     		mov	r2, r3
 2437 0be4 0123     		movs	r3, #1
 2438 0be6 1360     		str	r3, [r2]
 417:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 418:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 419:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 2439              		.loc 2 419 21
 2440 0be8 FFF7FEFF 		bl	HAL_GetTick
 2441 0bec C7F8F801 		str	r0, [r7, #504]
 420:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 421:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is ready */
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 2442              		.loc 2 422 14
 2443 0bf0 09E0     		b	.L149
 2444              	.L156:
 423:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 424:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 2445              		.loc 2 424 15
 2446 0bf2 FFF7FEFF 		bl	HAL_GetTick
 2447 0bf6 0246     		mov	r2, r0
 2448              		.loc 2 424 29
 2449 0bf8 D7F8F831 		ldr	r3, [r7, #504]
 2450 0bfc D31A     		subs	r3, r2, r3
 2451              		.loc 2 424 13
 2452 0bfe 022B     		cmp	r3, #2
 2453 0c00 01D9     		bls	.L149
 425:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 426:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 2454              		.loc 2 426 20
 2455 0c02 0323     		movs	r3, #3
 2456 0c04 DFE0     		b	.L40
 2457              	.L149:
 2458 0c06 07F15403 		add	r3, r7, #84
 2459 0c0a 4FF00072 		mov	r2, #33554432
 2460 0c0e 1A60     		str	r2, [r3]
 2461              	.LBB256:
 2462              	.LBB257:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2463              		.loc 3 531 4
 2464 0c10 07F15403 		add	r3, r7, #84
 2465 0c14 1B68     		ldr	r3, [r3]
 2466              		.syntax unified
 2467              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2468 0c16 93FAA3F2 		rbit r2, r3
 2469              	@ 0 "" 2
 2470              		.thumb
 2471              		.syntax unified
 2472 0c1a 07F15003 		add	r3, r7, #80
 2473 0c1e 1A60     		str	r2, [r3]
 2474              		.loc 3 544 9
 2475 0c20 07F15003 		add	r3, r7, #80
 2476 0c24 1B68     		ldr	r3, [r3]
 2477              	.LBE257:
 2478              	.LBE256:
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2479              		.loc 2 422 15
 2480 0c26 B3FA83F3 		clz	r3, r3
 2481 0c2a DBB2     		uxtb	r3, r3
 2482 0c2c 5B09     		lsrs	r3, r3, #5
 2483 0c2e DBB2     		uxtb	r3, r3
 2484 0c30 43F00103 		orr	r3, r3, #1
 2485 0c34 DBB2     		uxtb	r3, r3
 2486 0c36 012B     		cmp	r3, #1
 2487 0c38 04D1     		bne	.L151
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2488              		.loc 2 422 15 is_stmt 0 discriminator 1
 2489 0c3a 014B     		ldr	r3, .L173
 2490 0c3c 1B68     		ldr	r3, [r3]
 2491 0c3e 1DE0     		b	.L152
 2492              	.L174:
 2493              		.align	2
 2494              	.L173:
 2495 0c40 00100240 		.word	1073876992
 2496              	.L151:
 2497 0c44 07F14C03 		add	r3, r7, #76
 2498 0c48 4FF00072 		mov	r2, #33554432
 2499 0c4c 1A60     		str	r2, [r3]
 2500              	.LBB258:
 2501              	.LBB259:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2502              		.loc 3 531 4 is_stmt 1 discriminator 2
 2503 0c4e 07F14C03 		add	r3, r7, #76
 2504 0c52 1B68     		ldr	r3, [r3]
 2505              		.syntax unified
 2506              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2507 0c54 93FAA3F2 		rbit r2, r3
 2508              	@ 0 "" 2
 2509              		.thumb
 2510              		.syntax unified
 2511 0c58 07F14803 		add	r3, r7, #72
 2512 0c5c 1A60     		str	r2, [r3]
 2513 0c5e 07F14403 		add	r3, r7, #68
 2514 0c62 4FF00072 		mov	r2, #33554432
 2515 0c66 1A60     		str	r2, [r3]
 2516              	.LBE259:
 2517              	.LBE258:
 2518              	.LBB260:
 2519              	.LBB261:
 2520 0c68 07F14403 		add	r3, r7, #68
 2521 0c6c 1B68     		ldr	r3, [r3]
 2522              		.syntax unified
 2523              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2524 0c6e 93FAA3F2 		rbit r2, r3
 2525              	@ 0 "" 2
 2526              		.thumb
 2527              		.syntax unified
 2528 0c72 07F14003 		add	r3, r7, #64
 2529 0c76 1A60     		str	r2, [r3]
 2530              	.LBE261:
 2531              	.LBE260:
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2532              		.loc 2 422 15 discriminator 2
 2533 0c78 554B     		ldr	r3, .L175
 2534 0c7a 5B6A     		ldr	r3, [r3, #36]
 2535              	.L152:
 2536 0c7c 07F13C02 		add	r2, r7, #60
 2537 0c80 4FF00071 		mov	r1, #33554432
 2538 0c84 1160     		str	r1, [r2]
 2539              	.LBB262:
 2540              	.LBB263:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2541              		.loc 3 531 4 discriminator 12
 2542 0c86 07F13C02 		add	r2, r7, #60
 2543 0c8a 1268     		ldr	r2, [r2]
 2544              		.syntax unified
 2545              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2546 0c8c 92FAA2F1 		rbit r1, r2
 2547              	@ 0 "" 2
 2548              		.thumb
 2549              		.syntax unified
 2550 0c90 07F13802 		add	r2, r7, #56
 2551 0c94 1160     		str	r1, [r2]
 2552              		.loc 3 544 9 discriminator 12
 2553 0c96 07F13802 		add	r2, r7, #56
 2554 0c9a 1268     		ldr	r2, [r2]
 2555              	.LBE263:
 2556              	.LBE262:
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2557              		.loc 2 422 15 discriminator 12
 2558 0c9c B2FA82F2 		clz	r2, r2
 2559 0ca0 52B2     		sxtb	r2, r2
 2560 0ca2 42F02002 		orr	r2, r2, #32
 2561 0ca6 52B2     		sxtb	r2, r2
 2562 0ca8 D2B2     		uxtb	r2, r2
 2563 0caa 02F01F02 		and	r2, r2, #31
 2564 0cae 0121     		movs	r1, #1
 2565 0cb0 01FA02F2 		lsl	r2, r1, r2
 2566 0cb4 1340     		ands	r3, r3, r2
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2567              		.loc 2 422 14 discriminator 12
 2568 0cb6 002B     		cmp	r3, #0
 2569 0cb8 9BD0     		beq	.L156
 2570 0cba 83E0     		b	.L136
 2571              	.L138:
 2572 0cbc 07F13403 		add	r3, r7, #52
 2573 0cc0 4FF08072 		mov	r2, #16777216
 2574 0cc4 1A60     		str	r2, [r3]
 2575              	.LBB264:
 2576              	.LBB265:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2577              		.loc 3 531 4
 2578 0cc6 07F13403 		add	r3, r7, #52
 2579 0cca 1B68     		ldr	r3, [r3]
 2580              		.syntax unified
 2581              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2582 0ccc 93FAA3F2 		rbit r2, r3
 2583              	@ 0 "" 2
 2584              		.thumb
 2585              		.syntax unified
 2586 0cd0 07F13003 		add	r3, r7, #48
 2587 0cd4 1A60     		str	r2, [r3]
 2588              		.loc 3 544 9
 2589 0cd6 07F13003 		add	r3, r7, #48
 2590 0cda 1B68     		ldr	r3, [r3]
 2591              	.LBE265:
 2592              	.LBE264:
 427:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 428:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 429:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 430:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 431:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 432:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the main PLL. */
 433:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 2593              		.loc 2 433 9
 2594 0cdc B3FA83F3 		clz	r3, r3
 2595 0ce0 03F18453 		add	r3, r3, #276824064
 2596 0ce4 03F58413 		add	r3, r3, #1081344
 2597 0ce8 9B00     		lsls	r3, r3, #2
 2598 0cea 1A46     		mov	r2, r3
 2599 0cec 0023     		movs	r3, #0
 2600 0cee 1360     		str	r3, [r2]
 434:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 435:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 436:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 2601              		.loc 2 436 21
 2602 0cf0 FFF7FEFF 		bl	HAL_GetTick
 2603 0cf4 C7F8F801 		str	r0, [r7, #504]
 437:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 438:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is disabled */  
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 2604              		.loc 2 439 14
 2605 0cf8 09E0     		b	.L158
 2606              	.L165:
 440:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 441:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 2607              		.loc 2 441 15
 2608 0cfa FFF7FEFF 		bl	HAL_GetTick
 2609 0cfe 0246     		mov	r2, r0
 2610              		.loc 2 441 29
 2611 0d00 D7F8F831 		ldr	r3, [r7, #504]
 2612 0d04 D31A     		subs	r3, r2, r3
 2613              		.loc 2 441 13
 2614 0d06 022B     		cmp	r3, #2
 2615 0d08 01D9     		bls	.L158
 442:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 443:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 2616              		.loc 2 443 20
 2617 0d0a 0323     		movs	r3, #3
 2618 0d0c 5BE0     		b	.L40
 2619              	.L158:
 2620 0d0e 07F12C03 		add	r3, r7, #44
 2621 0d12 4FF00072 		mov	r2, #33554432
 2622 0d16 1A60     		str	r2, [r3]
 2623              	.LBB266:
 2624              	.LBB267:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2625              		.loc 3 531 4
 2626 0d18 07F12C03 		add	r3, r7, #44
 2627 0d1c 1B68     		ldr	r3, [r3]
 2628              		.syntax unified
 2629              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2630 0d1e 93FAA3F2 		rbit r2, r3
 2631              	@ 0 "" 2
 2632              		.thumb
 2633              		.syntax unified
 2634 0d22 07F12803 		add	r3, r7, #40
 2635 0d26 1A60     		str	r2, [r3]
 2636              		.loc 3 544 9
 2637 0d28 07F12803 		add	r3, r7, #40
 2638 0d2c 1B68     		ldr	r3, [r3]
 2639              	.LBE267:
 2640              	.LBE266:
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2641              		.loc 2 439 15
 2642 0d2e B3FA83F3 		clz	r3, r3
 2643 0d32 DBB2     		uxtb	r3, r3
 2644 0d34 5B09     		lsrs	r3, r3, #5
 2645 0d36 DBB2     		uxtb	r3, r3
 2646 0d38 43F00103 		orr	r3, r3, #1
 2647 0d3c DBB2     		uxtb	r3, r3
 2648 0d3e 012B     		cmp	r3, #1
 2649 0d40 02D1     		bne	.L160
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2650              		.loc 2 439 15 is_stmt 0 discriminator 1
 2651 0d42 234B     		ldr	r3, .L175
 2652 0d44 1B68     		ldr	r3, [r3]
 2653 0d46 1BE0     		b	.L161
 2654              	.L160:
 2655 0d48 07F12403 		add	r3, r7, #36
 2656 0d4c 4FF00072 		mov	r2, #33554432
 2657 0d50 1A60     		str	r2, [r3]
 2658              	.LBB268:
 2659              	.LBB269:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2660              		.loc 3 531 4 is_stmt 1 discriminator 2
 2661 0d52 07F12403 		add	r3, r7, #36
 2662 0d56 1B68     		ldr	r3, [r3]
 2663              		.syntax unified
 2664              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2665 0d58 93FAA3F2 		rbit r2, r3
 2666              	@ 0 "" 2
 2667              		.thumb
 2668              		.syntax unified
 2669 0d5c 07F12003 		add	r3, r7, #32
 2670 0d60 1A60     		str	r2, [r3]
 2671 0d62 07F11C03 		add	r3, r7, #28
 2672 0d66 4FF00072 		mov	r2, #33554432
 2673 0d6a 1A60     		str	r2, [r3]
 2674              	.LBE269:
 2675              	.LBE268:
 2676              	.LBB270:
 2677              	.LBB271:
 2678 0d6c 07F11C03 		add	r3, r7, #28
 2679 0d70 1B68     		ldr	r3, [r3]
 2680              		.syntax unified
 2681              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2682 0d72 93FAA3F2 		rbit r2, r3
 2683              	@ 0 "" 2
 2684              		.thumb
 2685              		.syntax unified
 2686 0d76 07F11803 		add	r3, r7, #24
 2687 0d7a 1A60     		str	r2, [r3]
 2688              	.LBE271:
 2689              	.LBE270:
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2690              		.loc 2 439 15 discriminator 2
 2691 0d7c 144B     		ldr	r3, .L175
 2692 0d7e 5B6A     		ldr	r3, [r3, #36]
 2693              	.L161:
 2694 0d80 07F11402 		add	r2, r7, #20
 2695 0d84 4FF00071 		mov	r1, #33554432
 2696 0d88 1160     		str	r1, [r2]
 2697              	.LBB272:
 2698              	.LBB273:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2699              		.loc 3 531 4 discriminator 12
 2700 0d8a 07F11402 		add	r2, r7, #20
 2701 0d8e 1268     		ldr	r2, [r2]
 2702              		.syntax unified
 2703              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2704 0d90 92FAA2F1 		rbit r1, r2
 2705              	@ 0 "" 2
 2706              		.thumb
 2707              		.syntax unified
 2708 0d94 07F11002 		add	r2, r7, #16
 2709 0d98 1160     		str	r1, [r2]
 2710              		.loc 3 544 9 discriminator 12
 2711 0d9a 07F11002 		add	r2, r7, #16
 2712 0d9e 1268     		ldr	r2, [r2]
 2713              	.LBE273:
 2714              	.LBE272:
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2715              		.loc 2 439 15 discriminator 12
 2716 0da0 B2FA82F2 		clz	r2, r2
 2717 0da4 52B2     		sxtb	r2, r2
 2718 0da6 42F02002 		orr	r2, r2, #32
 2719 0daa 52B2     		sxtb	r2, r2
 2720 0dac D2B2     		uxtb	r2, r2
 2721 0dae 02F01F02 		and	r2, r2, #31
 2722 0db2 0121     		movs	r1, #1
 2723 0db4 01FA02F2 		lsl	r2, r1, r2
 2724 0db8 1340     		ands	r3, r3, r2
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 2725              		.loc 2 439 14 discriminator 12
 2726 0dba 002B     		cmp	r3, #0
 2727 0dbc 9DD1     		bne	.L165
 2728 0dbe 01E0     		b	.L136
 2729              	.L137:
 444:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 445:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 446:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 447:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 448:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 449:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 450:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 2730              		.loc 2 450 14
 2731 0dc0 0123     		movs	r3, #1
 2732 0dc2 00E0     		b	.L40
 2733              	.L136:
 451:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 452:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 453:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 454:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 2734              		.loc 2 454 10
 2735 0dc4 0023     		movs	r3, #0
 2736              	.L40:
 455:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2737              		.loc 2 455 1
 2738 0dc6 1846     		mov	r0, r3
 2739 0dc8 07F50077 		add	r7, r7, #512
 2740              	.LCFI46:
 2741              		.cfi_def_cfa_offset 8
 2742 0dcc BD46     		mov	sp, r7
 2743              	.LCFI47:
 2744              		.cfi_def_cfa_register 13
 2745              		@ sp needed
 2746 0dce 80BD     		pop	{r7, pc}
 2747              	.L176:
 2748              		.align	2
 2749              	.L175:
 2750 0dd0 00100240 		.word	1073876992
 2751              		.cfi_endproc
 2752              	.LFE132:
 2754              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 2755              		.align	1
 2756              		.global	HAL_RCC_ClockConfig
 2757              		.syntax unified
 2758              		.thumb
 2759              		.thumb_func
 2760              		.fpu fpv4-sp-d16
 2762              	HAL_RCC_ClockConfig:
 2763              	.LFB133:
 456:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 457:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 458:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 459:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 460:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         parameters in the RCC_ClkInitStruct.
 461:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 462:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         contains the configuration information for the RCC peripheral.
 463:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  FLatency FLASH Latency                   
 464:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *          The value of this parameter depend on device used within the same series
 465:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 466:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 467:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 468:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 469:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 470:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         of failure of the HSE used directly or indirectly as system clock
 471:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         (if the Clock Security System CSS is enabled).
 472:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *           
 473:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   A switch from one clock source to another occurs only if the target
 474:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
 475:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         If a clock source which is not yet ready is selected, the switch will
 476:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         occur when the clock source will be ready. 
 477:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 478:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         currently used as system clock source.
 479:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 480:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 481:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 482:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2764              		.loc 2 482 1
 2765              		.cfi_startproc
 2766              		@ args = 0, pretend = 0, frame = 112
 2767              		@ frame_needed = 1, uses_anonymous_args = 0
 2768 0000 80B5     		push	{r7, lr}
 2769              	.LCFI48:
 2770              		.cfi_def_cfa_offset 8
 2771              		.cfi_offset 7, -8
 2772              		.cfi_offset 14, -4
 2773 0002 9CB0     		sub	sp, sp, #112
 2774              	.LCFI49:
 2775              		.cfi_def_cfa_offset 120
 2776 0004 00AF     		add	r7, sp, #0
 2777              	.LCFI50:
 2778              		.cfi_def_cfa_register 7
 2779 0006 7860     		str	r0, [r7, #4]
 2780 0008 3960     		str	r1, [r7]
 483:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 2781              		.loc 2 483 12
 2782 000a 0023     		movs	r3, #0
 2783 000c FB66     		str	r3, [r7, #108]
 484:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 485:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 486:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(RCC_ClkInitStruct != NULL);
 487:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 488:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 489:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 490:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 491:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   must be correctly programmed according to the frequency of the CPU clock 
 492:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     (HCLK) of the device. */
 493:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 494:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 495:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 2784              		.loc 2 495 23
 2785 000e A74B     		ldr	r3, .L214
 2786 0010 1B68     		ldr	r3, [r3]
 2787              		.loc 2 495 29
 2788 0012 03F00703 		and	r3, r3, #7
 2789              		.loc 2 495 5
 2790 0016 3A68     		ldr	r2, [r7]
 2791 0018 9A42     		cmp	r2, r3
 2792 001a 10D9     		bls	.L178
 496:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 497:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 498:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 2793              		.loc 2 498 5
 2794 001c A34B     		ldr	r3, .L214
 2795 001e 1B68     		ldr	r3, [r3]
 2796 0020 23F00702 		bic	r2, r3, #7
 2797 0024 A149     		ldr	r1, .L214
 2798 0026 3B68     		ldr	r3, [r7]
 2799 0028 1343     		orrs	r3, r3, r2
 2800 002a 0B60     		str	r3, [r1]
 499:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 500:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 501:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 502:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 2801              		.loc 2 502 14
 2802 002c 9F4B     		ldr	r3, .L214
 2803 002e 1B68     		ldr	r3, [r3]
 2804              		.loc 2 502 20
 2805 0030 03F00703 		and	r3, r3, #7
 2806              		.loc 2 502 7
 2807 0034 3A68     		ldr	r2, [r7]
 2808 0036 9A42     		cmp	r2, r3
 2809 0038 01D0     		beq	.L178
 503:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 504:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 2810              		.loc 2 504 14
 2811 003a 0123     		movs	r3, #1
 2812 003c 5AE1     		b	.L179
 2813              	.L178:
 505:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 506:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 507:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 508:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 509:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 2814              		.loc 2 509 25
 2815 003e 7B68     		ldr	r3, [r7, #4]
 2816 0040 1B68     		ldr	r3, [r3]
 2817              		.loc 2 509 38
 2818 0042 03F00203 		and	r3, r3, #2
 2819              		.loc 2 509 5
 2820 0046 002B     		cmp	r3, #0
 2821 0048 08D0     		beq	.L180
 510:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 511:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 512:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 2822              		.loc 2 512 5
 2823 004a 994B     		ldr	r3, .L214+4
 2824 004c 5B68     		ldr	r3, [r3, #4]
 2825 004e 23F0F002 		bic	r2, r3, #240
 2826 0052 7B68     		ldr	r3, [r7, #4]
 2827 0054 9B68     		ldr	r3, [r3, #8]
 2828 0056 9649     		ldr	r1, .L214+4
 2829 0058 1343     		orrs	r3, r3, r2
 2830 005a 4B60     		str	r3, [r1, #4]
 2831              	.L180:
 513:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 514:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 515:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 516:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 2832              		.loc 2 516 25
 2833 005c 7B68     		ldr	r3, [r7, #4]
 2834 005e 1B68     		ldr	r3, [r3]
 2835              		.loc 2 516 38
 2836 0060 03F00103 		and	r3, r3, #1
 2837              		.loc 2 516 5
 2838 0064 002B     		cmp	r3, #0
 2839 0066 00F00981 		beq	.L181
 517:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 518:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 519:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 520:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* HSE is selected as System Clock Source */
 521:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 2840              		.loc 2 521 25
 2841 006a 7B68     		ldr	r3, [r7, #4]
 2842 006c 5B68     		ldr	r3, [r3, #4]
 2843              		.loc 2 521 7
 2844 006e 012B     		cmp	r3, #1
 2845 0070 3DD1     		bne	.L182
 2846 0072 4FF40033 		mov	r3, #131072
 2847 0076 BB66     		str	r3, [r7, #104]
 2848              	.LBB274:
 2849              	.LBB275:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2850              		.loc 3 531 4
 2851 0078 BB6E     		ldr	r3, [r7, #104]
 2852              		.syntax unified
 2853              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2854 007a 93FAA3F3 		rbit r3, r3
 2855              	@ 0 "" 2
 2856              		.thumb
 2857              		.syntax unified
 2858 007e 7B66     		str	r3, [r7, #100]
 2859              		.loc 3 544 9
 2860 0080 7B6E     		ldr	r3, [r7, #100]
 2861              	.LBE275:
 2862              	.LBE274:
 522:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 523:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSE ready flag */  
 524:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 2863              		.loc 2 524 10
 2864 0082 B3FA83F3 		clz	r3, r3
 2865 0086 DBB2     		uxtb	r3, r3
 2866 0088 5B09     		lsrs	r3, r3, #5
 2867 008a DBB2     		uxtb	r3, r3
 2868 008c 43F00103 		orr	r3, r3, #1
 2869 0090 DBB2     		uxtb	r3, r3
 2870 0092 012B     		cmp	r3, #1
 2871 0094 02D1     		bne	.L184
 2872              		.loc 2 524 10 is_stmt 0 discriminator 1
 2873 0096 864B     		ldr	r3, .L214+4
 2874 0098 1B68     		ldr	r3, [r3]
 2875 009a 0FE0     		b	.L185
 2876              	.L184:
 2877 009c 4FF40033 		mov	r3, #131072
 2878 00a0 3B66     		str	r3, [r7, #96]
 2879              	.LBB276:
 2880              	.LBB277:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2881              		.loc 3 531 4 is_stmt 1 discriminator 2
 2882 00a2 3B6E     		ldr	r3, [r7, #96]
 2883              		.syntax unified
 2884              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2885 00a4 93FAA3F3 		rbit r3, r3
 2886              	@ 0 "" 2
 2887              		.thumb
 2888              		.syntax unified
 2889 00a8 FB65     		str	r3, [r7, #92]
 2890 00aa 4FF40033 		mov	r3, #131072
 2891 00ae BB65     		str	r3, [r7, #88]
 2892              	.LBE277:
 2893              	.LBE276:
 2894              	.LBB278:
 2895              	.LBB279:
 2896 00b0 BB6D     		ldr	r3, [r7, #88]
 2897              		.syntax unified
 2898              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2899 00b2 93FAA3F3 		rbit r3, r3
 2900              	@ 0 "" 2
 2901              		.thumb
 2902              		.syntax unified
 2903 00b6 7B65     		str	r3, [r7, #84]
 2904              	.LBE279:
 2905              	.LBE278:
 2906              		.loc 2 524 10 discriminator 2
 2907 00b8 7D4B     		ldr	r3, .L214+4
 2908 00ba 5B6A     		ldr	r3, [r3, #36]
 2909              	.L185:
 2910 00bc 4FF40032 		mov	r2, #131072
 2911 00c0 3A65     		str	r2, [r7, #80]
 2912              	.LBB280:
 2913              	.LBB281:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2914              		.loc 3 531 4 discriminator 12
 2915 00c2 3A6D     		ldr	r2, [r7, #80]
 2916              		.syntax unified
 2917              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2918 00c4 92FAA2F2 		rbit r2, r2
 2919              	@ 0 "" 2
 2920              		.thumb
 2921              		.syntax unified
 2922 00c8 FA64     		str	r2, [r7, #76]
 2923              		.loc 3 544 9 discriminator 12
 2924 00ca FA6C     		ldr	r2, [r7, #76]
 2925              	.LBE281:
 2926              	.LBE280:
 2927              		.loc 2 524 10 discriminator 12
 2928 00cc B2FA82F2 		clz	r2, r2
 2929 00d0 52B2     		sxtb	r2, r2
 2930 00d2 42F02002 		orr	r2, r2, #32
 2931 00d6 52B2     		sxtb	r2, r2
 2932 00d8 D2B2     		uxtb	r2, r2
 2933 00da 02F01F02 		and	r2, r2, #31
 2934 00de 0121     		movs	r1, #1
 2935 00e0 01FA02F2 		lsl	r2, r1, r2
 2936 00e4 1340     		ands	r3, r3, r2
 2937              		.loc 2 524 9 discriminator 12
 2938 00e6 002B     		cmp	r3, #0
 2939 00e8 7DD1     		bne	.L189
 525:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 526:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 2940              		.loc 2 526 16
 2941 00ea 0123     		movs	r3, #1
 2942 00ec 02E1     		b	.L179
 2943              	.L182:
 527:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 528:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 529:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* PLL is selected as System Clock Source */
 530:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 2944              		.loc 2 530 30
 2945 00ee 7B68     		ldr	r3, [r7, #4]
 2946 00f0 5B68     		ldr	r3, [r3, #4]
 2947              		.loc 2 530 12
 2948 00f2 022B     		cmp	r3, #2
 2949 00f4 3DD1     		bne	.L190
 2950 00f6 4FF00073 		mov	r3, #33554432
 2951 00fa BB64     		str	r3, [r7, #72]
 2952              	.LBB282:
 2953              	.LBB283:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2954              		.loc 3 531 4
 2955 00fc BB6C     		ldr	r3, [r7, #72]
 2956              		.syntax unified
 2957              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2958 00fe 93FAA3F3 		rbit r3, r3
 2959              	@ 0 "" 2
 2960              		.thumb
 2961              		.syntax unified
 2962 0102 7B64     		str	r3, [r7, #68]
 2963              		.loc 3 544 9
 2964 0104 7B6C     		ldr	r3, [r7, #68]
 2965              	.LBE283:
 2966              	.LBE282:
 531:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 532:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the PLL ready flag */  
 533:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 2967              		.loc 2 533 10
 2968 0106 B3FA83F3 		clz	r3, r3
 2969 010a DBB2     		uxtb	r3, r3
 2970 010c 5B09     		lsrs	r3, r3, #5
 2971 010e DBB2     		uxtb	r3, r3
 2972 0110 43F00103 		orr	r3, r3, #1
 2973 0114 DBB2     		uxtb	r3, r3
 2974 0116 012B     		cmp	r3, #1
 2975 0118 02D1     		bne	.L192
 2976              		.loc 2 533 10 is_stmt 0 discriminator 1
 2977 011a 654B     		ldr	r3, .L214+4
 2978 011c 1B68     		ldr	r3, [r3]
 2979 011e 0FE0     		b	.L193
 2980              	.L192:
 2981 0120 4FF00073 		mov	r3, #33554432
 2982 0124 3B64     		str	r3, [r7, #64]
 2983              	.LBB284:
 2984              	.LBB285:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 2985              		.loc 3 531 4 is_stmt 1 discriminator 2
 2986 0126 3B6C     		ldr	r3, [r7, #64]
 2987              		.syntax unified
 2988              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 2989 0128 93FAA3F3 		rbit r3, r3
 2990              	@ 0 "" 2
 2991              		.thumb
 2992              		.syntax unified
 2993 012c FB63     		str	r3, [r7, #60]
 2994 012e 4FF00073 		mov	r3, #33554432
 2995 0132 BB63     		str	r3, [r7, #56]
 2996              	.LBE285:
 2997              	.LBE284:
 2998              	.LBB286:
 2999              	.LBB287:
 3000 0134 BB6B     		ldr	r3, [r7, #56]
 3001              		.syntax unified
 3002              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3003 0136 93FAA3F3 		rbit r3, r3
 3004              	@ 0 "" 2
 3005              		.thumb
 3006              		.syntax unified
 3007 013a 7B63     		str	r3, [r7, #52]
 3008              	.LBE287:
 3009              	.LBE286:
 3010              		.loc 2 533 10 discriminator 2
 3011 013c 5C4B     		ldr	r3, .L214+4
 3012 013e 5B6A     		ldr	r3, [r3, #36]
 3013              	.L193:
 3014 0140 4FF00072 		mov	r2, #33554432
 3015 0144 3A63     		str	r2, [r7, #48]
 3016              	.LBB288:
 3017              	.LBB289:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3018              		.loc 3 531 4 discriminator 12
 3019 0146 3A6B     		ldr	r2, [r7, #48]
 3020              		.syntax unified
 3021              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3022 0148 92FAA2F2 		rbit r2, r2
 3023              	@ 0 "" 2
 3024              		.thumb
 3025              		.syntax unified
 3026 014c FA62     		str	r2, [r7, #44]
 3027              		.loc 3 544 9 discriminator 12
 3028 014e FA6A     		ldr	r2, [r7, #44]
 3029              	.LBE289:
 3030              	.LBE288:
 3031              		.loc 2 533 10 discriminator 12
 3032 0150 B2FA82F2 		clz	r2, r2
 3033 0154 52B2     		sxtb	r2, r2
 3034 0156 42F02002 		orr	r2, r2, #32
 3035 015a 52B2     		sxtb	r2, r2
 3036 015c D2B2     		uxtb	r2, r2
 3037 015e 02F01F02 		and	r2, r2, #31
 3038 0162 0121     		movs	r1, #1
 3039 0164 01FA02F2 		lsl	r2, r1, r2
 3040 0168 1340     		ands	r3, r3, r2
 3041              		.loc 2 533 9 discriminator 12
 3042 016a 002B     		cmp	r3, #0
 3043 016c 3BD1     		bne	.L189
 534:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 535:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 3044              		.loc 2 535 16
 3045 016e 0123     		movs	r3, #1
 3046 0170 C0E0     		b	.L179
 3047              	.L190:
 3048 0172 0223     		movs	r3, #2
 3049 0174 BB62     		str	r3, [r7, #40]
 3050              	.LBB290:
 3051              	.LBB291:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3052              		.loc 3 531 4
 3053 0176 BB6A     		ldr	r3, [r7, #40]
 3054              		.syntax unified
 3055              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3056 0178 93FAA3F3 		rbit r3, r3
 3057              	@ 0 "" 2
 3058              		.thumb
 3059              		.syntax unified
 3060 017c 7B62     		str	r3, [r7, #36]
 3061              		.loc 3 544 9
 3062 017e 7B6A     		ldr	r3, [r7, #36]
 3063              	.LBE291:
 3064              	.LBE290:
 536:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 537:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 538:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* HSI is selected as System Clock Source */
 539:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 540:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 541:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSI ready flag */  
 542:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 3065              		.loc 2 542 10
 3066 0180 B3FA83F3 		clz	r3, r3
 3067 0184 DBB2     		uxtb	r3, r3
 3068 0186 5B09     		lsrs	r3, r3, #5
 3069 0188 DBB2     		uxtb	r3, r3
 3070 018a 43F00103 		orr	r3, r3, #1
 3071 018e DBB2     		uxtb	r3, r3
 3072 0190 012B     		cmp	r3, #1
 3073 0192 02D1     		bne	.L198
 3074              		.loc 2 542 10 is_stmt 0 discriminator 1
 3075 0194 464B     		ldr	r3, .L214+4
 3076 0196 1B68     		ldr	r3, [r3]
 3077 0198 0DE0     		b	.L199
 3078              	.L198:
 3079 019a 0223     		movs	r3, #2
 3080 019c 3B62     		str	r3, [r7, #32]
 3081              	.LBB292:
 3082              	.LBB293:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3083              		.loc 3 531 4 is_stmt 1 discriminator 2
 3084 019e 3B6A     		ldr	r3, [r7, #32]
 3085              		.syntax unified
 3086              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3087 01a0 93FAA3F3 		rbit r3, r3
 3088              	@ 0 "" 2
 3089              		.thumb
 3090              		.syntax unified
 3091 01a4 FB61     		str	r3, [r7, #28]
 3092 01a6 0223     		movs	r3, #2
 3093 01a8 BB61     		str	r3, [r7, #24]
 3094              	.LBE293:
 3095              	.LBE292:
 3096              	.LBB294:
 3097              	.LBB295:
 3098 01aa BB69     		ldr	r3, [r7, #24]
 3099              		.syntax unified
 3100              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3101 01ac 93FAA3F3 		rbit r3, r3
 3102              	@ 0 "" 2
 3103              		.thumb
 3104              		.syntax unified
 3105 01b0 7B61     		str	r3, [r7, #20]
 3106              	.LBE295:
 3107              	.LBE294:
 3108              		.loc 2 542 10 discriminator 2
 3109 01b2 3F4B     		ldr	r3, .L214+4
 3110 01b4 5B6A     		ldr	r3, [r3, #36]
 3111              	.L199:
 3112 01b6 0222     		movs	r2, #2
 3113 01b8 3A61     		str	r2, [r7, #16]
 3114              	.LBB296:
 3115              	.LBB297:
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 3116              		.loc 3 531 4 discriminator 12
 3117 01ba 3A69     		ldr	r2, [r7, #16]
 3118              		.syntax unified
 3119              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 3120 01bc 92FAA2F2 		rbit r2, r2
 3121              	@ 0 "" 2
 3122              		.thumb
 3123              		.syntax unified
 3124 01c0 FA60     		str	r2, [r7, #12]
 3125              		.loc 3 544 9 discriminator 12
 3126 01c2 FA68     		ldr	r2, [r7, #12]
 3127              	.LBE297:
 3128              	.LBE296:
 3129              		.loc 2 542 10 discriminator 12
 3130 01c4 B2FA82F2 		clz	r2, r2
 3131 01c8 52B2     		sxtb	r2, r2
 3132 01ca 42F02002 		orr	r2, r2, #32
 3133 01ce 52B2     		sxtb	r2, r2
 3134 01d0 D2B2     		uxtb	r2, r2
 3135 01d2 02F01F02 		and	r2, r2, #31
 3136 01d6 0121     		movs	r1, #1
 3137 01d8 01FA02F2 		lsl	r2, r1, r2
 3138 01dc 1340     		ands	r3, r3, r2
 3139              		.loc 2 542 9 discriminator 12
 3140 01de 002B     		cmp	r3, #0
 3141 01e0 01D1     		bne	.L189
 543:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 544:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 3142              		.loc 2 544 16
 3143 01e2 0123     		movs	r3, #1
 3144 01e4 86E0     		b	.L179
 3145              	.L189:
 545:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 546:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 547:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 3146              		.loc 2 547 5
 3147 01e6 324B     		ldr	r3, .L214+4
 3148 01e8 5B68     		ldr	r3, [r3, #4]
 3149 01ea 23F00302 		bic	r2, r3, #3
 3150 01ee 7B68     		ldr	r3, [r7, #4]
 3151 01f0 5B68     		ldr	r3, [r3, #4]
 3152 01f2 2F49     		ldr	r1, .L214+4
 3153 01f4 1343     		orrs	r3, r3, r2
 3154 01f6 4B60     		str	r3, [r1, #4]
 548:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 549:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Get Start Tick */
 550:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 3155              		.loc 2 550 17
 3156 01f8 FFF7FEFF 		bl	HAL_GetTick
 3157 01fc F866     		str	r0, [r7, #108]
 551:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 552:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 3158              		.loc 2 552 25
 3159 01fe 7B68     		ldr	r3, [r7, #4]
 3160 0200 5B68     		ldr	r3, [r3, #4]
 3161              		.loc 2 552 7
 3162 0202 012B     		cmp	r3, #1
 3163 0204 12D1     		bne	.L203
 553:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 554:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 3164              		.loc 2 554 13
 3165 0206 0AE0     		b	.L204
 3166              	.L205:
 555:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 556:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 3167              		.loc 2 556 13
 3168 0208 FFF7FEFF 		bl	HAL_GetTick
 3169 020c 0246     		mov	r2, r0
 3170              		.loc 2 556 27
 3171 020e FB6E     		ldr	r3, [r7, #108]
 3172 0210 D31A     		subs	r3, r2, r3
 3173              		.loc 2 556 11
 3174 0212 41F28832 		movw	r2, #5000
 3175 0216 9342     		cmp	r3, r2
 3176 0218 01D9     		bls	.L204
 557:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 558:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 3177              		.loc 2 558 18
 3178 021a 0323     		movs	r3, #3
 3179 021c 6AE0     		b	.L179
 3180              	.L204:
 554:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3181              		.loc 2 554 14
 3182 021e 244B     		ldr	r3, .L214+4
 3183 0220 5B68     		ldr	r3, [r3, #4]
 3184 0222 03F00C03 		and	r3, r3, #12
 554:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3185              		.loc 2 554 13
 3186 0226 042B     		cmp	r3, #4
 3187 0228 EED1     		bne	.L205
 3188 022a 27E0     		b	.L181
 3189              	.L203:
 559:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 560:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 561:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 562:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 3190              		.loc 2 562 30
 3191 022c 7B68     		ldr	r3, [r7, #4]
 3192 022e 5B68     		ldr	r3, [r3, #4]
 3193              		.loc 2 562 12
 3194 0230 022B     		cmp	r3, #2
 3195 0232 1DD1     		bne	.L209
 563:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 564:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 3196              		.loc 2 564 13
 3197 0234 0AE0     		b	.L207
 3198              	.L208:
 565:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 566:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 3199              		.loc 2 566 13
 3200 0236 FFF7FEFF 		bl	HAL_GetTick
 3201 023a 0246     		mov	r2, r0
 3202              		.loc 2 566 27
 3203 023c FB6E     		ldr	r3, [r7, #108]
 3204 023e D31A     		subs	r3, r2, r3
 3205              		.loc 2 566 11
 3206 0240 41F28832 		movw	r2, #5000
 3207 0244 9342     		cmp	r3, r2
 3208 0246 01D9     		bls	.L207
 567:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 568:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 3209              		.loc 2 568 18
 3210 0248 0323     		movs	r3, #3
 3211 024a 53E0     		b	.L179
 3212              	.L207:
 564:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3213              		.loc 2 564 14
 3214 024c 184B     		ldr	r3, .L214+4
 3215 024e 5B68     		ldr	r3, [r3, #4]
 3216 0250 03F00C03 		and	r3, r3, #12
 564:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3217              		.loc 2 564 13
 3218 0254 082B     		cmp	r3, #8
 3219 0256 EED1     		bne	.L208
 3220 0258 10E0     		b	.L181
 3221              	.L210:
 569:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 570:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 571:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 572:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 573:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 574:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 575:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 576:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 3222              		.loc 2 576 13
 3223 025a FFF7FEFF 		bl	HAL_GetTick
 3224 025e 0246     		mov	r2, r0
 3225              		.loc 2 576 27
 3226 0260 FB6E     		ldr	r3, [r7, #108]
 3227 0262 D31A     		subs	r3, r2, r3
 3228              		.loc 2 576 11
 3229 0264 41F28832 		movw	r2, #5000
 3230 0268 9342     		cmp	r3, r2
 3231 026a 01D9     		bls	.L209
 577:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 578:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 3232              		.loc 2 578 18
 3233 026c 0323     		movs	r3, #3
 3234 026e 41E0     		b	.L179
 3235              	.L209:
 574:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3236              		.loc 2 574 14
 3237 0270 0F4B     		ldr	r3, .L214+4
 3238 0272 5B68     		ldr	r3, [r3, #4]
 3239 0274 03F00C03 		and	r3, r3, #12
 574:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 3240              		.loc 2 574 13
 3241 0278 002B     		cmp	r3, #0
 3242 027a EED1     		bne	.L210
 3243              	.L181:
 579:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 580:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 581:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }      
 582:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }    
 583:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 584:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 3244              		.loc 2 584 23
 3245 027c 0B4B     		ldr	r3, .L214
 3246 027e 1B68     		ldr	r3, [r3]
 3247              		.loc 2 584 29
 3248 0280 03F00703 		and	r3, r3, #7
 3249              		.loc 2 584 5
 3250 0284 3A68     		ldr	r2, [r7]
 3251 0286 9A42     		cmp	r2, r3
 3252 0288 14D2     		bcs	.L211
 585:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 586:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 587:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 3253              		.loc 2 587 5
 3254 028a 084B     		ldr	r3, .L214
 3255 028c 1B68     		ldr	r3, [r3]
 3256 028e 23F00702 		bic	r2, r3, #7
 3257 0292 0649     		ldr	r1, .L214
 3258 0294 3B68     		ldr	r3, [r7]
 3259 0296 1343     		orrs	r3, r3, r2
 3260 0298 0B60     		str	r3, [r1]
 588:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 589:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 590:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 591:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 3261              		.loc 2 591 14
 3262 029a 044B     		ldr	r3, .L214
 3263 029c 1B68     		ldr	r3, [r3]
 3264              		.loc 2 591 20
 3265 029e 03F00703 		and	r3, r3, #7
 3266              		.loc 2 591 7
 3267 02a2 3A68     		ldr	r2, [r7]
 3268 02a4 9A42     		cmp	r2, r3
 3269 02a6 05D0     		beq	.L211
 592:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 593:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 3270              		.loc 2 593 14
 3271 02a8 0123     		movs	r3, #1
 3272 02aa 23E0     		b	.L179
 3273              	.L215:
 3274              		.align	2
 3275              	.L214:
 3276 02ac 00200240 		.word	1073881088
 3277 02b0 00100240 		.word	1073876992
 3278              	.L211:
 594:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 595:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }    
 596:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 597:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 598:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 3279              		.loc 2 598 25
 3280 02b4 7B68     		ldr	r3, [r7, #4]
 3281 02b6 1B68     		ldr	r3, [r3]
 3282              		.loc 2 598 38
 3283 02b8 03F00403 		and	r3, r3, #4
 3284              		.loc 2 598 5
 3285 02bc 002B     		cmp	r3, #0
 3286 02be 08D0     		beq	.L212
 599:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 600:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 601:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 3287              		.loc 2 601 5
 3288 02c0 0E4B     		ldr	r3, .L216
 3289 02c2 5B68     		ldr	r3, [r3, #4]
 3290 02c4 23F4E062 		bic	r2, r3, #1792
 3291 02c8 7B68     		ldr	r3, [r7, #4]
 3292 02ca DB68     		ldr	r3, [r3, #12]
 3293 02cc 0B49     		ldr	r1, .L216
 3294 02ce 1343     		orrs	r3, r3, r2
 3295 02d0 4B60     		str	r3, [r1, #4]
 3296              	.L212:
 602:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 603:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 604:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 605:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 3297              		.loc 2 605 25
 3298 02d2 7B68     		ldr	r3, [r7, #4]
 3299 02d4 1B68     		ldr	r3, [r3]
 3300              		.loc 2 605 38
 3301 02d6 03F00803 		and	r3, r3, #8
 3302              		.loc 2 605 5
 3303 02da 002B     		cmp	r3, #0
 3304 02dc 09D0     		beq	.L213
 606:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 607:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 608:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 3305              		.loc 2 608 5
 3306 02de 074B     		ldr	r3, .L216
 3307 02e0 5B68     		ldr	r3, [r3, #4]
 3308 02e2 23F46052 		bic	r2, r3, #14336
 3309 02e6 7B68     		ldr	r3, [r7, #4]
 3310 02e8 1B69     		ldr	r3, [r3, #16]
 3311 02ea DB00     		lsls	r3, r3, #3
 3312 02ec 0349     		ldr	r1, .L216
 3313 02ee 1343     		orrs	r3, r3, r2
 3314 02f0 4B60     		str	r3, [r1, #4]
 3315              	.L213:
 609:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 610:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 611:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Update the SystemCoreClock global variable */
 612:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_
 613:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 614:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the source of time base considering new system clocks settings*/
 615:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   //HAL_InitTick (TICK_INT_PRIORITY);
 616:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 617:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 3316              		.loc 2 617 10
 3317 02f2 0023     		movs	r3, #0
 3318              	.L179:
 618:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 3319              		.loc 2 618 1
 3320 02f4 1846     		mov	r0, r3
 3321 02f6 7037     		adds	r7, r7, #112
 3322              	.LCFI51:
 3323              		.cfi_def_cfa_offset 8
 3324 02f8 BD46     		mov	sp, r7
 3325              	.LCFI52:
 3326              		.cfi_def_cfa_register 13
 3327              		@ sp needed
 3328 02fa 80BD     		pop	{r7, pc}
 3329              	.L217:
 3330              		.align	2
 3331              	.L216:
 3332 02fc 00100240 		.word	1073876992
 3333              		.cfi_endproc
 3334              	.LFE133:
 3336              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 3337              		.align	1
 3338              		.global	HAL_RCC_GetPCLK2Freq
 3339              		.syntax unified
 3340              		.thumb
 3341              		.thumb_func
 3342              		.fpu fpv4-sp-d16
 3344              	HAL_RCC_GetPCLK2Freq:
 3345              	.LFB134:
 619:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 620:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 621:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Returns the PCLK2 frequency
 622:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
 623:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
 624:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval PCLK2 frequency
 625:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 626:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
 627:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 3346              		.loc 2 627 1
 3347              		.cfi_startproc
 3348              		@ args = 0, pretend = 0, frame = 0
 3349              		@ frame_needed = 1, uses_anonymous_args = 0
 3350              		@ link register save eliminated.
 3351 0000 80B4     		push	{r7}
 3352              	.LCFI53:
 3353              		.cfi_def_cfa_offset 4
 3354              		.cfi_offset 7, -4
 3355 0002 00AF     		add	r7, sp, #0
 3356              	.LCFI54:
 3357              		.cfi_def_cfa_register 7
 628:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 629:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_C
 630:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   // return 7372800;
 631:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return 10000000;
 3358              		.loc 2 631 10
 3359 0004 024B     		ldr	r3, .L220
 632:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 3360              		.loc 2 632 1
 3361 0006 1846     		mov	r0, r3
 3362 0008 BD46     		mov	sp, r7
 3363              	.LCFI55:
 3364              		.cfi_def_cfa_register 13
 3365              		@ sp needed
 3366 000a 5DF8047B 		ldr	r7, [sp], #4
 3367              	.LCFI56:
 3368              		.cfi_restore 7
 3369              		.cfi_def_cfa_offset 0
 3370 000e 7047     		bx	lr
 3371              	.L221:
 3372              		.align	2
 3373              	.L220:
 3374 0010 80969800 		.word	10000000
 3375              		.cfi_endproc
 3376              	.LFE134:
 3378              		.section	.text.HAL_GPIO_Init,"ax",%progbits
 3379              		.align	1
 3380              		.global	HAL_GPIO_Init
 3381              		.syntax unified
 3382              		.thumb
 3383              		.thumb_func
 3384              		.fpu fpv4-sp-d16
 3386              	HAL_GPIO_Init:
 3387              	.LFB135:
 633:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 634:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 635:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 636:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE             (0x00000003U)
 637:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define EXTI_MODE             (0x10000000U)
 638:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE_IT          (0x00010000U)
 639:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE_EVT         (0x00020000U)
 640:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define RISING_EDGE           (0x00100000U)
 641:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define FALLING_EDGE          (0x00200000U)
 642:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_OUTPUT_TYPE      (0x00000010U)
 643:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 644:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_NUMBER           (16U)
 645:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 646:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define __HAL_RCC_GPIOA_CLK_ENABLE()   do { \
 647:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         __IO uint32_t tmpreg; \
 648:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);\
 649:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         /* Delay after an RCC peripheral clock enabling */ \
 650:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);\
 651:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         UNUSED(tmpreg); \
 652:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                       } while(0U)
 653:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 654:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 655:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 656:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initialize the GPIOx peripheral according to the specified parameters in the GPIO_Init.
 657:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family devices
 658:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 659:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         the configuration information for the specified GPIO peripheral.
 660:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval None
 661:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 662:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
 663:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 3388              		.loc 2 663 1
 3389              		.cfi_startproc
 3390              		@ args = 0, pretend = 0, frame = 24
 3391              		@ frame_needed = 1, uses_anonymous_args = 0
 3392              		@ link register save eliminated.
 3393 0000 80B4     		push	{r7}
 3394              	.LCFI57:
 3395              		.cfi_def_cfa_offset 4
 3396              		.cfi_offset 7, -4
 3397 0002 87B0     		sub	sp, sp, #28
 3398              	.LCFI58:
 3399              		.cfi_def_cfa_offset 32
 3400 0004 00AF     		add	r7, sp, #0
 3401              	.LCFI59:
 3402              		.cfi_def_cfa_register 7
 3403 0006 7860     		str	r0, [r7, #4]
 3404 0008 3960     		str	r1, [r7]
 664:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t position = 0x00U;
 3405              		.loc 2 664 12
 3406 000a 0023     		movs	r3, #0
 3407 000c 7B61     		str	r3, [r7, #20]
 665:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t iocurrent = 0x00U;
 3408              		.loc 2 665 12
 3409 000e 0023     		movs	r3, #0
 3410 0010 FB60     		str	r3, [r7, #12]
 666:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t temp = 0x00U;
 3411              		.loc 2 666 12
 3412 0012 0023     		movs	r3, #0
 3413 0014 3B61     		str	r3, [r7, #16]
 667:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 668:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 669:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 670:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 671:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 672:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 673:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 674:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the port pins */
 675:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   while (((GPIO_Init->Pin) >> position) != RESET)
 3414              		.loc 2 675 9
 3415 0016 54E1     		b	.L223
 3416              	.L243:
 676:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 677:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Get current io position */
 678:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     iocurrent = (GPIO_Init->Pin) & (1U << position);
 3417              		.loc 2 678 27
 3418 0018 3B68     		ldr	r3, [r7]
 3419 001a 1A68     		ldr	r2, [r3]
 3420              		.loc 2 678 40
 3421 001c 0121     		movs	r1, #1
 3422 001e 7B69     		ldr	r3, [r7, #20]
 3423 0020 01FA03F3 		lsl	r3, r1, r3
 3424              		.loc 2 678 15
 3425 0024 1340     		ands	r3, r3, r2
 3426 0026 FB60     		str	r3, [r7, #12]
 679:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 680:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(iocurrent)
 3427              		.loc 2 680 7
 3428 0028 FB68     		ldr	r3, [r7, #12]
 3429 002a 002B     		cmp	r3, #0
 3430 002c 00F04681 		beq	.L224
 681:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 682:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /*--------------------- GPIO Mode Configuration ------------------------*/
 683:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* In case of Alternate function mode selection */
 684:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 3431              		.loc 2 684 20
 3432 0030 3B68     		ldr	r3, [r7]
 3433 0032 5B68     		ldr	r3, [r3, #4]
 3434              		.loc 2 684 9
 3435 0034 022B     		cmp	r3, #2
 3436 0036 03D0     		beq	.L225
 3437              		.loc 2 684 60 discriminator 1
 3438 0038 3B68     		ldr	r3, [r7]
 3439 003a 5B68     		ldr	r3, [r3, #4]
 3440              		.loc 2 684 47 discriminator 1
 3441 003c 122B     		cmp	r3, #18
 3442 003e 23D1     		bne	.L226
 3443              	.L225:
 685:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 686:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the Alternate function parameters */
 687:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 688:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 689:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 690:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure Alternate function mapped with the current IO */
 691:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->AFR[position >> 3];
 3444              		.loc 2 691 36
 3445 0040 7B69     		ldr	r3, [r7, #20]
 3446 0042 DA08     		lsrs	r2, r3, #3
 3447              		.loc 2 691 14
 3448 0044 7B68     		ldr	r3, [r7, #4]
 3449 0046 0832     		adds	r2, r2, #8
 3450 0048 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3451 004c 3B61     		str	r3, [r7, #16]
 692:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 3452              		.loc 2 692 28
 3453 004e 7B69     		ldr	r3, [r7, #20]
 3454 0050 03F00703 		and	r3, r3, #7
 3455              		.loc 2 692 57
 3456 0054 9B00     		lsls	r3, r3, #2
 3457              		.loc 2 692 24
 3458 0056 0F22     		movs	r2, #15
 3459 0058 02FA03F3 		lsl	r3, r2, r3
 3460              		.loc 2 692 17
 3461 005c DB43     		mvns	r3, r3
 3462              		.loc 2 692 14
 3463 005e 3A69     		ldr	r2, [r7, #16]
 3464 0060 1340     		ands	r3, r3, r2
 3465 0062 3B61     		str	r3, [r7, #16]
 693:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 3466              		.loc 2 693 38
 3467 0064 3B68     		ldr	r3, [r7]
 3468 0066 1A69     		ldr	r2, [r3, #16]
 3469              		.loc 2 693 75
 3470 0068 7B69     		ldr	r3, [r7, #20]
 3471 006a 03F00703 		and	r3, r3, #7
 3472              		.loc 2 693 84
 3473 006e 9B00     		lsls	r3, r3, #2
 3474              		.loc 2 693 51
 3475 0070 02FA03F3 		lsl	r3, r2, r3
 3476              		.loc 2 693 14
 3477 0074 3A69     		ldr	r2, [r7, #16]
 3478 0076 1343     		orrs	r3, r3, r2
 3479 0078 3B61     		str	r3, [r7, #16]
 694:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->AFR[position >> 3] = temp;
 3480              		.loc 2 694 29
 3481 007a 7B69     		ldr	r3, [r7, #20]
 3482 007c DA08     		lsrs	r2, r3, #3
 3483              		.loc 2 694 35
 3484 007e 7B68     		ldr	r3, [r7, #4]
 3485 0080 0832     		adds	r2, r2, #8
 3486 0082 3969     		ldr	r1, [r7, #16]
 3487 0084 43F82210 		str	r1, [r3, r2, lsl #2]
 3488              	.L226:
 695:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 696:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 697:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
 698:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp = GPIOx->MODER;
 3489              		.loc 2 698 12
 3490 0088 7B68     		ldr	r3, [r7, #4]
 3491 008a 1B68     		ldr	r3, [r3]
 3492 008c 3B61     		str	r3, [r7, #16]
 699:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 3493              		.loc 2 699 48
 3494 008e 7B69     		ldr	r3, [r7, #20]
 3495 0090 5B00     		lsls	r3, r3, #1
 3496              		.loc 2 699 35
 3497 0092 0322     		movs	r2, #3
 3498 0094 02FA03F3 		lsl	r3, r2, r3
 3499              		.loc 2 699 15
 3500 0098 DB43     		mvns	r3, r3
 3501              		.loc 2 699 12
 3502 009a 3A69     		ldr	r2, [r7, #16]
 3503 009c 1340     		ands	r3, r3, r2
 3504 009e 3B61     		str	r3, [r7, #16]
 700:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 3505              		.loc 2 700 26
 3506 00a0 3B68     		ldr	r3, [r7]
 3507 00a2 5B68     		ldr	r3, [r3, #4]
 3508              		.loc 2 700 33
 3509 00a4 03F00302 		and	r2, r3, #3
 3510              		.loc 2 700 59
 3511 00a8 7B69     		ldr	r3, [r7, #20]
 3512 00aa 5B00     		lsls	r3, r3, #1
 3513              		.loc 2 700 46
 3514 00ac 02FA03F3 		lsl	r3, r2, r3
 3515              		.loc 2 700 12
 3516 00b0 3A69     		ldr	r2, [r7, #16]
 3517 00b2 1343     		orrs	r3, r3, r2
 3518 00b4 3B61     		str	r3, [r7, #16]
 701:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->MODER = temp;
 3519              		.loc 2 701 20
 3520 00b6 7B68     		ldr	r3, [r7, #4]
 3521 00b8 3A69     		ldr	r2, [r7, #16]
 3522 00ba 1A60     		str	r2, [r3]
 702:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 703:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* In case of Output or Alternate function mode selection */
 704:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 3523              		.loc 2 704 20
 3524 00bc 3B68     		ldr	r3, [r7]
 3525 00be 5B68     		ldr	r3, [r3, #4]
 3526              		.loc 2 704 9
 3527 00c0 012B     		cmp	r3, #1
 3528 00c2 0BD0     		beq	.L227
 3529              		.loc 2 704 64 discriminator 1
 3530 00c4 3B68     		ldr	r3, [r7]
 3531 00c6 5B68     		ldr	r3, [r3, #4]
 3532              		.loc 2 704 51 discriminator 1
 3533 00c8 022B     		cmp	r3, #2
 3534 00ca 07D0     		beq	.L227
 705:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 3535              		.loc 2 705 20 discriminator 2
 3536 00cc 3B68     		ldr	r3, [r7]
 3537 00ce 5B68     		ldr	r3, [r3, #4]
 704:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 3538              		.loc 2 704 91 discriminator 2
 3539 00d0 112B     		cmp	r3, #17
 3540 00d2 03D0     		beq	.L227
 3541              		.loc 2 705 64
 3542 00d4 3B68     		ldr	r3, [r7]
 3543 00d6 5B68     		ldr	r3, [r3, #4]
 3544              		.loc 2 705 51
 3545 00d8 122B     		cmp	r3, #18
 3546 00da 30D1     		bne	.L228
 3547              	.L227:
 706:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 707:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the Speed parameter */
 708:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 709:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the IO Speed */
 710:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->OSPEEDR;
 3548              		.loc 2 710 14
 3549 00dc 7B68     		ldr	r3, [r7, #4]
 3550 00de 9B68     		ldr	r3, [r3, #8]
 3551 00e0 3B61     		str	r3, [r7, #16]
 711:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 3552              		.loc 2 711 55
 3553 00e2 7B69     		ldr	r3, [r7, #20]
 3554 00e4 5B00     		lsls	r3, r3, #1
 3555              		.loc 2 711 42
 3556 00e6 0322     		movs	r2, #3
 3557 00e8 02FA03F3 		lsl	r3, r2, r3
 3558              		.loc 2 711 17
 3559 00ec DB43     		mvns	r3, r3
 3560              		.loc 2 711 14
 3561 00ee 3A69     		ldr	r2, [r7, #16]
 3562 00f0 1340     		ands	r3, r3, r2
 3563 00f2 3B61     		str	r3, [r7, #16]
 712:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_Init->Speed << (position * 2U));
 3564              		.loc 2 712 27
 3565 00f4 3B68     		ldr	r3, [r7]
 3566 00f6 DA68     		ldr	r2, [r3, #12]
 3567              		.loc 2 712 48
 3568 00f8 7B69     		ldr	r3, [r7, #20]
 3569 00fa 5B00     		lsls	r3, r3, #1
 3570              		.loc 2 712 35
 3571 00fc 02FA03F3 		lsl	r3, r2, r3
 3572              		.loc 2 712 14
 3573 0100 3A69     		ldr	r2, [r7, #16]
 3574 0102 1343     		orrs	r3, r3, r2
 3575 0104 3B61     		str	r3, [r7, #16]
 713:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OSPEEDR = temp;
 3576              		.loc 2 713 24
 3577 0106 7B68     		ldr	r3, [r7, #4]
 3578 0108 3A69     		ldr	r2, [r7, #16]
 3579 010a 9A60     		str	r2, [r3, #8]
 714:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 715:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the IO Output Type */
 716:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->OTYPER;
 3580              		.loc 2 716 14
 3581 010c 7B68     		ldr	r3, [r7, #4]
 3582 010e 5B68     		ldr	r3, [r3, #4]
 3583 0110 3B61     		str	r3, [r7, #16]
 717:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 3584              		.loc 2 717 36
 3585 0112 0122     		movs	r2, #1
 3586 0114 7B69     		ldr	r3, [r7, #20]
 3587 0116 02FA03F3 		lsl	r3, r2, r3
 3588              		.loc 2 717 17
 3589 011a DB43     		mvns	r3, r3
 3590              		.loc 2 717 14
 3591 011c 3A69     		ldr	r2, [r7, #16]
 3592 011e 1340     		ands	r3, r3, r2
 3593 0120 3B61     		str	r3, [r7, #16]
 718:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 3594              		.loc 2 718 29
 3595 0122 3B68     		ldr	r3, [r7]
 3596 0124 5B68     		ldr	r3, [r3, #4]
 3597              		.loc 2 718 56
 3598 0126 1B09     		lsrs	r3, r3, #4
 3599 0128 03F00102 		and	r2, r3, #1
 3600              		.loc 2 718 63
 3601 012c 7B69     		ldr	r3, [r7, #20]
 3602 012e 02FA03F3 		lsl	r3, r2, r3
 3603              		.loc 2 718 14
 3604 0132 3A69     		ldr	r2, [r7, #16]
 3605 0134 1343     		orrs	r3, r3, r2
 3606 0136 3B61     		str	r3, [r7, #16]
 719:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OTYPER = temp;
 3607              		.loc 2 719 23
 3608 0138 7B68     		ldr	r3, [r7, #4]
 3609 013a 3A69     		ldr	r2, [r7, #16]
 3610 013c 5A60     		str	r2, [r3, #4]
 3611              	.L228:
 720:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 721:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 722:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Activate the Pull-up or Pull down resistor for the current IO */
 723:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp = GPIOx->PUPDR;
 3612              		.loc 2 723 12
 3613 013e 7B68     		ldr	r3, [r7, #4]
 3614 0140 DB68     		ldr	r3, [r3, #12]
 3615 0142 3B61     		str	r3, [r7, #16]
 724:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 3616              		.loc 2 724 48
 3617 0144 7B69     		ldr	r3, [r7, #20]
 3618 0146 5B00     		lsls	r3, r3, #1
 3619              		.loc 2 724 35
 3620 0148 0322     		movs	r2, #3
 3621 014a 02FA03F3 		lsl	r3, r2, r3
 3622              		.loc 2 724 15
 3623 014e DB43     		mvns	r3, r3
 3624              		.loc 2 724 12
 3625 0150 3A69     		ldr	r2, [r7, #16]
 3626 0152 1340     		ands	r3, r3, r2
 3627 0154 3B61     		str	r3, [r7, #16]
 725:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Pull) << (position * 2U));
 3628              		.loc 2 725 26
 3629 0156 3B68     		ldr	r3, [r7]
 3630 0158 9A68     		ldr	r2, [r3, #8]
 3631              		.loc 2 725 47
 3632 015a 7B69     		ldr	r3, [r7, #20]
 3633 015c 5B00     		lsls	r3, r3, #1
 3634              		.loc 2 725 34
 3635 015e 02FA03F3 		lsl	r3, r2, r3
 3636              		.loc 2 725 12
 3637 0162 3A69     		ldr	r2, [r7, #16]
 3638 0164 1343     		orrs	r3, r3, r2
 3639 0166 3B61     		str	r3, [r7, #16]
 726:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->PUPDR = temp;
 3640              		.loc 2 726 20
 3641 0168 7B68     		ldr	r3, [r7, #4]
 3642 016a 3A69     		ldr	r2, [r7, #16]
 3643 016c DA60     		str	r2, [r3, #12]
 727:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 728:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /*--------------------- EXTI Mode Configuration ------------------------*/
 729:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the External Interrupt or event for the current IO */
 730:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 3644              		.loc 2 730 20
 3645 016e 3B68     		ldr	r3, [r7]
 3646 0170 5B68     		ldr	r3, [r3, #4]
 3647              		.loc 2 730 27
 3648 0172 03F08053 		and	r3, r3, #268435456
 3649              		.loc 2 730 9
 3650 0176 002B     		cmp	r3, #0
 3651 0178 00F0A080 		beq	.L224
 3652              	.LBB298:
 731:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 732:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Enable SYSCFG Clock */
 733:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_SYSCFG_CLK_ENABLE();
 3653              		.loc 2 733 9
 3654 017c 584B     		ldr	r3, .L244
 3655 017e 9B69     		ldr	r3, [r3, #24]
 3656 0180 574A     		ldr	r2, .L244
 3657 0182 43F00103 		orr	r3, r3, #1
 3658 0186 9361     		str	r3, [r2, #24]
 3659 0188 554B     		ldr	r3, .L244
 3660 018a 9B69     		ldr	r3, [r3, #24]
 3661 018c 03F00103 		and	r3, r3, #1
 3662 0190 BB60     		str	r3, [r7, #8]
 3663 0192 BB68     		ldr	r3, [r7, #8]
 3664              	.LBE298:
 734:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 735:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = SYSCFG->EXTICR[position >> 2];
 3665              		.loc 2 735 22
 3666 0194 534A     		ldr	r2, .L244+4
 3667              		.loc 2 735 40
 3668 0196 7B69     		ldr	r3, [r7, #20]
 3669 0198 9B08     		lsrs	r3, r3, #2
 3670              		.loc 2 735 14
 3671 019a 0233     		adds	r3, r3, #2
 3672 019c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3673 01a0 3B61     		str	r3, [r7, #16]
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 3674              		.loc 2 736 46
 3675 01a2 7B69     		ldr	r3, [r7, #20]
 3676 01a4 03F00303 		and	r3, r3, #3
 3677              		.loc 2 736 34
 3678 01a8 9B00     		lsls	r3, r3, #2
 3679              		.loc 2 736 27
 3680 01aa 0F22     		movs	r2, #15
 3681 01ac 02FA03F3 		lsl	r3, r2, r3
 3682              		.loc 2 736 17
 3683 01b0 DB43     		mvns	r3, r3
 3684              		.loc 2 736 14
 3685 01b2 3A69     		ldr	r2, [r7, #16]
 3686 01b4 1340     		ands	r3, r3, r2
 3687 01b6 3B61     		str	r3, [r7, #16]
 737:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 3688              		.loc 2 737 18
 3689 01b8 7B68     		ldr	r3, [r7, #4]
 3690 01ba B3F1904F 		cmp	r3, #1207959552
 3691 01be 19D0     		beq	.L229
 3692              		.loc 2 737 18 is_stmt 0 discriminator 1
 3693 01c0 7B68     		ldr	r3, [r7, #4]
 3694 01c2 494A     		ldr	r2, .L244+8
 3695 01c4 9342     		cmp	r3, r2
 3696 01c6 13D0     		beq	.L230
 3697              		.loc 2 737 18 discriminator 3
 3698 01c8 7B68     		ldr	r3, [r7, #4]
 3699 01ca 484A     		ldr	r2, .L244+12
 3700 01cc 9342     		cmp	r3, r2
 3701 01ce 0DD0     		beq	.L231
 3702              		.loc 2 737 18 discriminator 5
 3703 01d0 7B68     		ldr	r3, [r7, #4]
 3704 01d2 474A     		ldr	r2, .L244+16
 3705 01d4 9342     		cmp	r3, r2
 3706 01d6 07D0     		beq	.L232
 3707              		.loc 2 737 18 discriminator 7
 3708 01d8 7B68     		ldr	r3, [r7, #4]
 3709 01da 464A     		ldr	r2, .L244+20
 3710 01dc 9342     		cmp	r3, r2
 3711 01de 01D1     		bne	.L233
 3712              		.loc 2 737 18 discriminator 9
 3713 01e0 0423     		movs	r3, #4
 3714 01e2 08E0     		b	.L238
 3715              	.L233:
 3716              		.loc 2 737 18 discriminator 10
 3717 01e4 0523     		movs	r3, #5
 3718 01e6 06E0     		b	.L238
 3719              	.L232:
 3720              		.loc 2 737 18 discriminator 8
 3721 01e8 0323     		movs	r3, #3
 3722 01ea 04E0     		b	.L238
 3723              	.L231:
 3724              		.loc 2 737 18 discriminator 6
 3725 01ec 0223     		movs	r3, #2
 3726 01ee 02E0     		b	.L238
 3727              	.L230:
 3728              		.loc 2 737 18 discriminator 4
 3729 01f0 0123     		movs	r3, #1
 3730 01f2 00E0     		b	.L238
 3731              	.L229:
 3732              		.loc 2 737 18 discriminator 2
 3733 01f4 0023     		movs	r3, #0
 3734              	.L238:
 3735              		.loc 2 737 59 is_stmt 1 discriminator 20
 3736 01f6 7A69     		ldr	r2, [r7, #20]
 3737 01f8 02F00302 		and	r2, r2, #3
 3738              		.loc 2 737 47 discriminator 20
 3739 01fc 9200     		lsls	r2, r2, #2
 3740              		.loc 2 737 40 discriminator 20
 3741 01fe 9340     		lsls	r3, r3, r2
 3742              		.loc 2 737 14 discriminator 20
 3743 0200 3A69     		ldr	r2, [r7, #16]
 3744 0202 1343     		orrs	r3, r3, r2
 3745 0204 3B61     		str	r3, [r7, #16]
 738:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 3746              		.loc 2 738 15 discriminator 20
 3747 0206 3749     		ldr	r1, .L244+4
 3748              		.loc 2 738 33 discriminator 20
 3749 0208 7B69     		ldr	r3, [r7, #20]
 3750 020a 9B08     		lsrs	r3, r3, #2
 3751              		.loc 2 738 39 discriminator 20
 3752 020c 0233     		adds	r3, r3, #2
 3753 020e 3A69     		ldr	r2, [r7, #16]
 3754 0210 41F82320 		str	r2, [r1, r3, lsl #2]
 739:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 740:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Clear EXTI line configuration */
 741:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->IMR;
 3755              		.loc 2 741 20 discriminator 20
 3756 0214 384B     		ldr	r3, .L244+24
 3757              		.loc 2 741 14 discriminator 20
 3758 0216 1B68     		ldr	r3, [r3]
 3759 0218 3B61     		str	r3, [r7, #16]
 742:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 3760              		.loc 2 742 17 discriminator 20
 3761 021a FB68     		ldr	r3, [r7, #12]
 3762 021c DB43     		mvns	r3, r3
 3763              		.loc 2 742 14 discriminator 20
 3764 021e 3A69     		ldr	r2, [r7, #16]
 3765 0220 1340     		ands	r3, r3, r2
 3766 0222 3B61     		str	r3, [r7, #16]
 743:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 3767              		.loc 2 743 22 discriminator 20
 3768 0224 3B68     		ldr	r3, [r7]
 3769 0226 5B68     		ldr	r3, [r3, #4]
 3770              		.loc 2 743 29 discriminator 20
 3771 0228 03F48033 		and	r3, r3, #65536
 3772              		.loc 2 743 11 discriminator 20
 3773 022c 002B     		cmp	r3, #0
 3774 022e 03D0     		beq	.L239
 744:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 745:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 3775              		.loc 2 745 16
 3776 0230 3A69     		ldr	r2, [r7, #16]
 3777 0232 FB68     		ldr	r3, [r7, #12]
 3778 0234 1343     		orrs	r3, r3, r2
 3779 0236 3B61     		str	r3, [r7, #16]
 3780              	.L239:
 746:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 747:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->IMR = temp;
 3781              		.loc 2 747 13
 3782 0238 2F4A     		ldr	r2, .L244+24
 3783              		.loc 2 747 19
 3784 023a 3B69     		ldr	r3, [r7, #16]
 3785 023c 1360     		str	r3, [r2]
 748:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 749:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->EMR;
 3786              		.loc 2 749 20
 3787 023e 2E4B     		ldr	r3, .L244+24
 3788              		.loc 2 749 14
 3789 0240 5B68     		ldr	r3, [r3, #4]
 3790 0242 3B61     		str	r3, [r7, #16]
 750:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 3791              		.loc 2 750 17
 3792 0244 FB68     		ldr	r3, [r7, #12]
 3793 0246 DB43     		mvns	r3, r3
 3794              		.loc 2 750 14
 3795 0248 3A69     		ldr	r2, [r7, #16]
 3796 024a 1340     		ands	r3, r3, r2
 3797 024c 3B61     		str	r3, [r7, #16]
 751:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 3798              		.loc 2 751 22
 3799 024e 3B68     		ldr	r3, [r7]
 3800 0250 5B68     		ldr	r3, [r3, #4]
 3801              		.loc 2 751 29
 3802 0252 03F40033 		and	r3, r3, #131072
 3803              		.loc 2 751 11
 3804 0256 002B     		cmp	r3, #0
 3805 0258 03D0     		beq	.L240
 752:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 753:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 3806              		.loc 2 753 16
 3807 025a 3A69     		ldr	r2, [r7, #16]
 3808 025c FB68     		ldr	r3, [r7, #12]
 3809 025e 1343     		orrs	r3, r3, r2
 3810 0260 3B61     		str	r3, [r7, #16]
 3811              	.L240:
 754:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 755:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->EMR = temp;
 3812              		.loc 2 755 13
 3813 0262 254A     		ldr	r2, .L244+24
 3814              		.loc 2 755 19
 3815 0264 3B69     		ldr	r3, [r7, #16]
 3816 0266 5360     		str	r3, [r2, #4]
 756:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 757:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Clear Rising Falling edge configuration */
 758:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->RTSR;
 3817              		.loc 2 758 20
 3818 0268 234B     		ldr	r3, .L244+24
 3819              		.loc 2 758 14
 3820 026a 9B68     		ldr	r3, [r3, #8]
 3821 026c 3B61     		str	r3, [r7, #16]
 759:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 3822              		.loc 2 759 17
 3823 026e FB68     		ldr	r3, [r7, #12]
 3824 0270 DB43     		mvns	r3, r3
 3825              		.loc 2 759 14
 3826 0272 3A69     		ldr	r2, [r7, #16]
 3827 0274 1340     		ands	r3, r3, r2
 3828 0276 3B61     		str	r3, [r7, #16]
 760:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 3829              		.loc 2 760 22
 3830 0278 3B68     		ldr	r3, [r7]
 3831 027a 5B68     		ldr	r3, [r3, #4]
 3832              		.loc 2 760 29
 3833 027c 03F48013 		and	r3, r3, #1048576
 3834              		.loc 2 760 11
 3835 0280 002B     		cmp	r3, #0
 3836 0282 03D0     		beq	.L241
 761:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 762:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 3837              		.loc 2 762 16
 3838 0284 3A69     		ldr	r2, [r7, #16]
 3839 0286 FB68     		ldr	r3, [r7, #12]
 3840 0288 1343     		orrs	r3, r3, r2
 3841 028a 3B61     		str	r3, [r7, #16]
 3842              	.L241:
 763:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 764:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->RTSR = temp;
 3843              		.loc 2 764 13
 3844 028c 1A4A     		ldr	r2, .L244+24
 3845              		.loc 2 764 20
 3846 028e 3B69     		ldr	r3, [r7, #16]
 3847 0290 9360     		str	r3, [r2, #8]
 765:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 766:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->FTSR;
 3848              		.loc 2 766 20
 3849 0292 194B     		ldr	r3, .L244+24
 3850              		.loc 2 766 14
 3851 0294 DB68     		ldr	r3, [r3, #12]
 3852 0296 3B61     		str	r3, [r7, #16]
 767:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 3853              		.loc 2 767 17
 3854 0298 FB68     		ldr	r3, [r7, #12]
 3855 029a DB43     		mvns	r3, r3
 3856              		.loc 2 767 14
 3857 029c 3A69     		ldr	r2, [r7, #16]
 3858 029e 1340     		ands	r3, r3, r2
 3859 02a0 3B61     		str	r3, [r7, #16]
 768:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 3860              		.loc 2 768 22
 3861 02a2 3B68     		ldr	r3, [r7]
 3862 02a4 5B68     		ldr	r3, [r3, #4]
 3863              		.loc 2 768 29
 3864 02a6 03F40013 		and	r3, r3, #2097152
 3865              		.loc 2 768 11
 3866 02aa 002B     		cmp	r3, #0
 3867 02ac 03D0     		beq	.L242
 769:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 770:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 3868              		.loc 2 770 16
 3869 02ae 3A69     		ldr	r2, [r7, #16]
 3870 02b0 FB68     		ldr	r3, [r7, #12]
 3871 02b2 1343     		orrs	r3, r3, r2
 3872 02b4 3B61     		str	r3, [r7, #16]
 3873              	.L242:
 771:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 772:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->FTSR = temp;
 3874              		.loc 2 772 13
 3875 02b6 104A     		ldr	r2, .L244+24
 3876              		.loc 2 772 20
 3877 02b8 3B69     		ldr	r3, [r7, #16]
 3878 02ba D360     		str	r3, [r2, #12]
 3879              	.L224:
 773:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 774:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 775:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 776:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     position++;
 3880              		.loc 2 776 13
 3881 02bc 7B69     		ldr	r3, [r7, #20]
 3882 02be 0133     		adds	r3, r3, #1
 3883 02c0 7B61     		str	r3, [r7, #20]
 3884              	.L223:
 675:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 3885              		.loc 2 675 21
 3886 02c2 3B68     		ldr	r3, [r7]
 3887 02c4 1A68     		ldr	r2, [r3]
 675:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 3888              		.loc 2 675 28
 3889 02c6 7B69     		ldr	r3, [r7, #20]
 3890 02c8 22FA03F3 		lsr	r3, r2, r3
 675:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 3891              		.loc 2 675 9
 3892 02cc 002B     		cmp	r3, #0
 3893 02ce 7FF4A3AE 		bne	.L243
 777:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 778:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 3894              		.loc 2 778 1
 3895 02d2 00BF     		nop
 3896 02d4 1C37     		adds	r7, r7, #28
 3897              	.LCFI60:
 3898              		.cfi_def_cfa_offset 4
 3899 02d6 BD46     		mov	sp, r7
 3900              	.LCFI61:
 3901              		.cfi_def_cfa_register 13
 3902              		@ sp needed
 3903 02d8 5DF8047B 		ldr	r7, [sp], #4
 3904              	.LCFI62:
 3905              		.cfi_restore 7
 3906              		.cfi_def_cfa_offset 0
 3907 02dc 7047     		bx	lr
 3908              	.L245:
 3909 02de 00BF     		.align	2
 3910              	.L244:
 3911 02e0 00100240 		.word	1073876992
 3912 02e4 00000140 		.word	1073807360
 3913 02e8 00040048 		.word	1207960576
 3914 02ec 00080048 		.word	1207961600
 3915 02f0 000C0048 		.word	1207962624
 3916 02f4 00100048 		.word	1207963648
 3917 02f8 00040140 		.word	1073808384
 3918              		.cfi_endproc
 3919              	.LFE135:
 3921              		.section	.text.HAL_GPIO_WritePin,"ax",%progbits
 3922              		.align	1
 3923              		.global	HAL_GPIO_WritePin
 3924              		.syntax unified
 3925              		.thumb
 3926              		.thumb_func
 3927              		.fpu fpv4-sp-d16
 3929              	HAL_GPIO_WritePin:
 3930              	.LFB136:
 779:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 780:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 781:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Set or clear the selected data port bit.
 782:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 783:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   This function uses GPIOx_BSRR and GPIOx_BRR registers to allow atomic read/modify
 784:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         accesses. In this way, there is no risk of an IRQ occurring between
 785:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         the read and the modify access.
 786:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 787:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 788:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIO_Pin: specifies the port bit to be written.
 789:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
 790:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  PinState: specifies the value to be written to the selected bit.
 791:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         This parameter can be one of the GPIO_PinState enum values:
 792:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *            @arg GPIO_PIN_RESET: to clear the port pin
 793:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *            @arg GPIO_PIN_SET: to set the port pin
 794:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval None
 795:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 796:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 797:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 3931              		.loc 2 797 1
 3932              		.cfi_startproc
 3933              		@ args = 0, pretend = 0, frame = 8
 3934              		@ frame_needed = 1, uses_anonymous_args = 0
 3935              		@ link register save eliminated.
 3936 0000 80B4     		push	{r7}
 3937              	.LCFI63:
 3938              		.cfi_def_cfa_offset 4
 3939              		.cfi_offset 7, -4
 3940 0002 83B0     		sub	sp, sp, #12
 3941              	.LCFI64:
 3942              		.cfi_def_cfa_offset 16
 3943 0004 00AF     		add	r7, sp, #0
 3944              	.LCFI65:
 3945              		.cfi_def_cfa_register 7
 3946 0006 7860     		str	r0, [r7, #4]
 3947 0008 0B46     		mov	r3, r1
 3948 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3949 000c 1346     		mov	r3, r2
 3950 000e 7B70     		strb	r3, [r7, #1]
 798:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 799:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 800:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN_ACTION(PinState));
 801:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 802:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(PinState != GPIO_PIN_RESET)
 3951              		.loc 2 802 5
 3952 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 3953 0012 002B     		cmp	r3, #0
 3954 0014 03D0     		beq	.L247
 803:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 804:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     GPIOx->BSRR = (uint32_t)GPIO_Pin;
 3955              		.loc 2 804 19
 3956 0016 7A88     		ldrh	r2, [r7, #2]
 3957              		.loc 2 804 17
 3958 0018 7B68     		ldr	r3, [r7, #4]
 3959 001a 9A61     		str	r2, [r3, #24]
 805:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 806:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 807:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 808:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     GPIOx->BRR = (uint32_t)GPIO_Pin;
 809:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 810:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 3960              		.loc 2 810 1
 3961 001c 02E0     		b	.L249
 3962              	.L247:
 808:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 3963              		.loc 2 808 18
 3964 001e 7A88     		ldrh	r2, [r7, #2]
 808:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 3965              		.loc 2 808 16
 3966 0020 7B68     		ldr	r3, [r7, #4]
 3967 0022 9A62     		str	r2, [r3, #40]
 3968              	.L249:
 3969              		.loc 2 810 1
 3970 0024 00BF     		nop
 3971 0026 0C37     		adds	r7, r7, #12
 3972              	.LCFI66:
 3973              		.cfi_def_cfa_offset 4
 3974 0028 BD46     		mov	sp, r7
 3975              	.LCFI67:
 3976              		.cfi_def_cfa_register 13
 3977              		@ sp needed
 3978 002a 5DF8047B 		ldr	r7, [sp], #4
 3979              	.LCFI68:
 3980              		.cfi_restore 7
 3981              		.cfi_def_cfa_offset 0
 3982 002e 7047     		bx	lr
 3983              		.cfi_endproc
 3984              	.LFE136:
 3986              		.section	.text.UART_SetConfig,"ax",%progbits
 3987              		.align	1
 3988              		.global	UART_SetConfig
 3989              		.syntax unified
 3990              		.thumb
 3991              		.thumb_func
 3992              		.fpu fpv4-sp-d16
 3994              	UART_SetConfig:
 3995              	.LFB137:
 811:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 812:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 813:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 814:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Configure the UART peripheral.
 815:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
 816:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 817:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 818:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
 819:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 3996              		.loc 2 819 1
 3997              		.cfi_startproc
 3998              		@ args = 0, pretend = 0, frame = 24
 3999              		@ frame_needed = 1, uses_anonymous_args = 0
 4000 0000 80B5     		push	{r7, lr}
 4001              	.LCFI69:
 4002              		.cfi_def_cfa_offset 8
 4003              		.cfi_offset 7, -8
 4004              		.cfi_offset 14, -4
 4005 0002 86B0     		sub	sp, sp, #24
 4006              	.LCFI70:
 4007              		.cfi_def_cfa_offset 32
 4008 0004 00AF     		add	r7, sp, #0
 4009              	.LCFI71:
 4010              		.cfi_def_cfa_register 7
 4011 0006 7860     		str	r0, [r7, #4]
 820:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tmpreg                     = 0x00000000U;
 4012              		.loc 2 820 12
 4013 0008 0023     		movs	r3, #0
 4014 000a FB60     		str	r3, [r7, #12]
 821:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 4015              		.loc 2 821 27
 4016 000c 1023     		movs	r3, #16
 4017 000e FB75     		strb	r3, [r7, #23]
 822:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t brrtemp                    = 0x0000U;
 4018              		.loc 2 822 12
 4019 0010 0023     		movs	r3, #0
 4020 0012 7B81     		strh	r3, [r7, #10]	@ movhi
 823:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t usartdiv                   = 0x0000U;
 4021              		.loc 2 823 12
 4022 0014 0023     		movs	r3, #0
 4023 0016 BB82     		strh	r3, [r7, #20]	@ movhi
 824:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 4024              		.loc 2 824 21
 4025 0018 0023     		movs	r3, #0
 4026 001a FB74     		strb	r3, [r7, #19]
 825:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 826:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 827:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 828:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 829:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 830:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
 831:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
 832:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 833:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 834:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 835:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 836:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 837:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
 838:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
 839:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  the UART Word Length, Parity, Mode and oversampling:
 840:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set the M bits according to huart->Init.WordLength value
 841:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set PCE and PS bits according to huart->Init.Parity value
 842:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set TE and RE bits according to huart->Init.Mode value
 843:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set OVER8 bit according to huart->Init.OverSampling value */
 844:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 4027              		.loc 2 844 33
 4028 001c 7B68     		ldr	r3, [r7, #4]
 4029 001e 9A68     		ldr	r2, [r3, #8]
 4030              		.loc 2 844 58
 4031 0020 7B68     		ldr	r3, [r7, #4]
 4032 0022 1B69     		ldr	r3, [r3, #16]
 4033              		.loc 2 844 45
 4034 0024 1A43     		orrs	r2, r2, r3
 4035              		.loc 2 844 79
 4036 0026 7B68     		ldr	r3, [r7, #4]
 4037 0028 5B69     		ldr	r3, [r3, #20]
 4038              		.loc 2 844 66
 4039 002a 1A43     		orrs	r2, r2, r3
 4040              		.loc 2 844 98
 4041 002c 7B68     		ldr	r3, [r7, #4]
 4042 002e DB69     		ldr	r3, [r3, #28]
 4043              		.loc 2 844 10
 4044 0030 1343     		orrs	r3, r3, r2
 4045 0032 FB60     		str	r3, [r7, #12]
 845:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 4046              		.loc 2 845 3
 4047 0034 7B68     		ldr	r3, [r7, #4]
 4048 0036 1B68     		ldr	r3, [r3]
 4049 0038 1B68     		ldr	r3, [r3]
 4050 003a 23F41643 		bic	r3, r3, #38400
 4051 003e 23F00C03 		bic	r3, r3, #12
 4052 0042 7A68     		ldr	r2, [r7, #4]
 4053 0044 1268     		ldr	r2, [r2]
 4054 0046 F968     		ldr	r1, [r7, #12]
 4055 0048 0B43     		orrs	r3, r3, r1
 4056 004a 1360     		str	r3, [r2]
 846:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 847:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
 848:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
 849:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    * to huart->Init.StopBits value */
 850:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 4057              		.loc 2 850 3
 4058 004c 7B68     		ldr	r3, [r7, #4]
 4059 004e 1B68     		ldr	r3, [r3]
 4060 0050 5B68     		ldr	r3, [r3, #4]
 4061 0052 23F44051 		bic	r1, r3, #12288
 4062 0056 7B68     		ldr	r3, [r7, #4]
 4063 0058 DA68     		ldr	r2, [r3, #12]
 4064 005a 7B68     		ldr	r3, [r7, #4]
 4065 005c 1B68     		ldr	r3, [r3]
 4066 005e 0A43     		orrs	r2, r2, r1
 4067 0060 5A60     		str	r2, [r3, #4]
 851:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 852:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
 853:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure
 854:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    * - UART HardWare Flow Control: set CTSE and RTSE bits according
 855:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *   to huart->Init.HwFlowCtl value
 856:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    * - one-bit sampling method versus three samples' majority rule according
 857:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *   to huart->Init.OneBitSampling */
 858:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 4068              		.loc 2 858 33
 4069 0062 7B68     		ldr	r3, [r7, #4]
 4070 0064 9A69     		ldr	r2, [r3, #24]
 4071              		.loc 2 858 57
 4072 0066 7B68     		ldr	r3, [r7, #4]
 4073 0068 1B6A     		ldr	r3, [r3, #32]
 4074              		.loc 2 858 10
 4075 006a 1343     		orrs	r3, r3, r2
 4076 006c FB60     		str	r3, [r7, #12]
 859:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 4077              		.loc 2 859 3
 4078 006e 7B68     		ldr	r3, [r7, #4]
 4079 0070 1B68     		ldr	r3, [r3]
 4080 0072 9B68     		ldr	r3, [r3, #8]
 4081 0074 23F43061 		bic	r1, r3, #2816
 4082 0078 7B68     		ldr	r3, [r7, #4]
 4083 007a 1B68     		ldr	r3, [r3]
 4084 007c FA68     		ldr	r2, [r7, #12]
 4085 007e 0A43     		orrs	r2, r2, r1
 4086 0080 9A60     		str	r2, [r3, #8]
 860:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
 862:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
 4087              		.loc 2 862 3
 4088 0082 7B68     		ldr	r3, [r7, #4]
 4089 0084 1B68     		ldr	r3, [r3]
 4090 0086 B44A     		ldr	r2, .L310
 4091 0088 9342     		cmp	r3, r2
 4092 008a 21D1     		bne	.L251
 4093              		.loc 2 862 3 is_stmt 0 discriminator 1
 4094 008c B34B     		ldr	r3, .L310+4
 4095 008e 1B6B     		ldr	r3, [r3, #48]
 4096 0090 03F00303 		and	r3, r3, #3
 4097 0094 032B     		cmp	r3, #3
 4098 0096 17D8     		bhi	.L252
 4099 0098 01A2     		adr	r2, .L254
 4100 009a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4101 009e 00BF     		.p2align 2
 4102              	.L254:
 4103 00a0 B1000000 		.word	.L257+1
 4104 00a4 BD000000 		.word	.L256+1
 4105 00a8 C3000000 		.word	.L255+1
 4106 00ac B7000000 		.word	.L253+1
 4107              		.p2align 1
 4108              	.L257:
 4109              		.loc 2 862 3 discriminator 4
 4110 00b0 0123     		movs	r3, #1
 4111 00b2 FB75     		strb	r3, [r7, #23]
 4112 00b4 B2E0     		b	.L259
 4113              	.L253:
 4114              		.loc 2 862 3 discriminator 7
 4115 00b6 0223     		movs	r3, #2
 4116 00b8 FB75     		strb	r3, [r7, #23]
 4117 00ba AFE0     		b	.L259
 4118              	.L256:
 4119              		.loc 2 862 3 discriminator 5
 4120 00bc 0423     		movs	r3, #4
 4121 00be FB75     		strb	r3, [r7, #23]
 4122 00c0 ACE0     		b	.L259
 4123              	.L255:
 4124              		.loc 2 862 3 discriminator 6
 4125 00c2 0823     		movs	r3, #8
 4126 00c4 FB75     		strb	r3, [r7, #23]
 4127 00c6 A9E0     		b	.L259
 4128              	.L252:
 4129              		.loc 2 862 3 discriminator 3
 4130 00c8 1023     		movs	r3, #16
 4131 00ca FB75     		strb	r3, [r7, #23]
 4132 00cc 00BF     		nop
 4133 00ce A5E0     		b	.L259
 4134              	.L251:
 4135              		.loc 2 862 3 discriminator 2
 4136 00d0 7B68     		ldr	r3, [r7, #4]
 4137 00d2 1B68     		ldr	r3, [r3]
 4138 00d4 A24A     		ldr	r2, .L310+8
 4139 00d6 9342     		cmp	r3, r2
 4140 00d8 23D1     		bne	.L260
 4141              		.loc 2 862 3 discriminator 13
 4142 00da A04B     		ldr	r3, .L310+4
 4143 00dc 1B6B     		ldr	r3, [r3, #48]
 4144 00de 03F44033 		and	r3, r3, #196608
 4145 00e2 B3F5803F 		cmp	r3, #65536
 4146 00e6 12D0     		beq	.L261
 4147              		.loc 2 862 3
 4148 00e8 B3F5803F 		cmp	r3, #65536
 4149 00ec 02D8     		bhi	.L262
 4150 00ee 002B     		cmp	r3, #0
 4151 00f0 07D0     		beq	.L263
 4152 00f2 12E0     		b	.L264
 4153              	.L262:
 4154 00f4 B3F5003F 		cmp	r3, #131072
 4155 00f8 0CD0     		beq	.L265
 4156 00fa B3F5403F 		cmp	r3, #196608
 4157 00fe 03D0     		beq	.L266
 4158 0100 0BE0     		b	.L264
 4159              	.L263:
 4160              		.loc 2 862 3 discriminator 16
 4161 0102 0023     		movs	r3, #0
 4162 0104 FB75     		strb	r3, [r7, #23]
 4163 0106 89E0     		b	.L259
 4164              	.L266:
 4165              		.loc 2 862 3 discriminator 19
 4166 0108 0223     		movs	r3, #2
 4167 010a FB75     		strb	r3, [r7, #23]
 4168 010c 86E0     		b	.L259
 4169              	.L261:
 4170              		.loc 2 862 3 discriminator 17
 4171 010e 0423     		movs	r3, #4
 4172 0110 FB75     		strb	r3, [r7, #23]
 4173 0112 83E0     		b	.L259
 4174              	.L265:
 4175              		.loc 2 862 3 discriminator 18
 4176 0114 0823     		movs	r3, #8
 4177 0116 FB75     		strb	r3, [r7, #23]
 4178 0118 80E0     		b	.L259
 4179              	.L264:
 4180              		.loc 2 862 3 discriminator 15
 4181 011a 1023     		movs	r3, #16
 4182 011c FB75     		strb	r3, [r7, #23]
 4183 011e 00BF     		nop
 4184 0120 7CE0     		b	.L259
 4185              	.L260:
 4186              		.loc 2 862 3 discriminator 14
 4187 0122 7B68     		ldr	r3, [r7, #4]
 4188 0124 1B68     		ldr	r3, [r3]
 4189 0126 8F4A     		ldr	r2, .L310+12
 4190 0128 9342     		cmp	r3, r2
 4191 012a 23D1     		bne	.L268
 4192              		.loc 2 862 3 discriminator 25
 4193 012c 8B4B     		ldr	r3, .L310+4
 4194 012e 1B6B     		ldr	r3, [r3, #48]
 4195 0130 03F44023 		and	r3, r3, #786432
 4196 0134 B3F5802F 		cmp	r3, #262144
 4197 0138 12D0     		beq	.L269
 4198              		.loc 2 862 3
 4199 013a B3F5802F 		cmp	r3, #262144
 4200 013e 02D8     		bhi	.L270
 4201 0140 002B     		cmp	r3, #0
 4202 0142 07D0     		beq	.L271
 4203 0144 12E0     		b	.L272
 4204              	.L270:
 4205 0146 B3F5002F 		cmp	r3, #524288
 4206 014a 0CD0     		beq	.L273
 4207 014c B3F5402F 		cmp	r3, #786432
 4208 0150 03D0     		beq	.L274
 4209 0152 0BE0     		b	.L272
 4210              	.L271:
 4211              		.loc 2 862 3 discriminator 28
 4212 0154 0023     		movs	r3, #0
 4213 0156 FB75     		strb	r3, [r7, #23]
 4214 0158 60E0     		b	.L259
 4215              	.L274:
 4216              		.loc 2 862 3 discriminator 31
 4217 015a 0223     		movs	r3, #2
 4218 015c FB75     		strb	r3, [r7, #23]
 4219 015e 5DE0     		b	.L259
 4220              	.L269:
 4221              		.loc 2 862 3 discriminator 29
 4222 0160 0423     		movs	r3, #4
 4223 0162 FB75     		strb	r3, [r7, #23]
 4224 0164 5AE0     		b	.L259
 4225              	.L273:
 4226              		.loc 2 862 3 discriminator 30
 4227 0166 0823     		movs	r3, #8
 4228 0168 FB75     		strb	r3, [r7, #23]
 4229 016a 57E0     		b	.L259
 4230              	.L272:
 4231              		.loc 2 862 3 discriminator 27
 4232 016c 1023     		movs	r3, #16
 4233 016e FB75     		strb	r3, [r7, #23]
 4234 0170 00BF     		nop
 4235 0172 53E0     		b	.L259
 4236              	.L268:
 4237              		.loc 2 862 3 discriminator 26
 4238 0174 7B68     		ldr	r3, [r7, #4]
 4239 0176 1B68     		ldr	r3, [r3]
 4240 0178 7B4A     		ldr	r2, .L310+16
 4241 017a 9342     		cmp	r3, r2
 4242 017c 23D1     		bne	.L276
 4243              		.loc 2 862 3 discriminator 37
 4244 017e 774B     		ldr	r3, .L310+4
 4245 0180 1B6B     		ldr	r3, [r3, #48]
 4246 0182 03F44013 		and	r3, r3, #3145728
 4247 0186 B3F5801F 		cmp	r3, #1048576
 4248 018a 12D0     		beq	.L277
 4249              		.loc 2 862 3
 4250 018c B3F5801F 		cmp	r3, #1048576
 4251 0190 02D8     		bhi	.L278
 4252 0192 002B     		cmp	r3, #0
 4253 0194 07D0     		beq	.L279
 4254 0196 12E0     		b	.L280
 4255              	.L278:
 4256 0198 B3F5001F 		cmp	r3, #2097152
 4257 019c 0CD0     		beq	.L281
 4258 019e B3F5401F 		cmp	r3, #3145728
 4259 01a2 03D0     		beq	.L282
 4260 01a4 0BE0     		b	.L280
 4261              	.L279:
 4262              		.loc 2 862 3 discriminator 40
 4263 01a6 0023     		movs	r3, #0
 4264 01a8 FB75     		strb	r3, [r7, #23]
 4265 01aa 37E0     		b	.L259
 4266              	.L282:
 4267              		.loc 2 862 3 discriminator 43
 4268 01ac 0223     		movs	r3, #2
 4269 01ae FB75     		strb	r3, [r7, #23]
 4270 01b0 34E0     		b	.L259
 4271              	.L277:
 4272              		.loc 2 862 3 discriminator 41
 4273 01b2 0423     		movs	r3, #4
 4274 01b4 FB75     		strb	r3, [r7, #23]
 4275 01b6 31E0     		b	.L259
 4276              	.L281:
 4277              		.loc 2 862 3 discriminator 42
 4278 01b8 0823     		movs	r3, #8
 4279 01ba FB75     		strb	r3, [r7, #23]
 4280 01bc 2EE0     		b	.L259
 4281              	.L280:
 4282              		.loc 2 862 3 discriminator 39
 4283 01be 1023     		movs	r3, #16
 4284 01c0 FB75     		strb	r3, [r7, #23]
 4285 01c2 00BF     		nop
 4286 01c4 2AE0     		b	.L259
 4287              	.L276:
 4288              		.loc 2 862 3 discriminator 38
 4289 01c6 7B68     		ldr	r3, [r7, #4]
 4290 01c8 1B68     		ldr	r3, [r3]
 4291 01ca 684A     		ldr	r2, .L310+20
 4292 01cc 9342     		cmp	r3, r2
 4293 01ce 23D1     		bne	.L284
 4294              		.loc 2 862 3 discriminator 49
 4295 01d0 624B     		ldr	r3, .L310+4
 4296 01d2 1B6B     		ldr	r3, [r3, #48]
 4297 01d4 03F44003 		and	r3, r3, #12582912
 4298 01d8 B3F5800F 		cmp	r3, #4194304
 4299 01dc 12D0     		beq	.L285
 4300              		.loc 2 862 3
 4301 01de B3F5800F 		cmp	r3, #4194304
 4302 01e2 02D8     		bhi	.L286
 4303 01e4 002B     		cmp	r3, #0
 4304 01e6 07D0     		beq	.L287
 4305 01e8 12E0     		b	.L288
 4306              	.L286:
 4307 01ea B3F5000F 		cmp	r3, #8388608
 4308 01ee 0CD0     		beq	.L289
 4309 01f0 B3F5400F 		cmp	r3, #12582912
 4310 01f4 03D0     		beq	.L290
 4311 01f6 0BE0     		b	.L288
 4312              	.L287:
 4313              		.loc 2 862 3 discriminator 52
 4314 01f8 0023     		movs	r3, #0
 4315 01fa FB75     		strb	r3, [r7, #23]
 4316 01fc 0EE0     		b	.L259
 4317              	.L290:
 4318              		.loc 2 862 3 discriminator 55
 4319 01fe 0223     		movs	r3, #2
 4320 0200 FB75     		strb	r3, [r7, #23]
 4321 0202 0BE0     		b	.L259
 4322              	.L285:
 4323              		.loc 2 862 3 discriminator 53
 4324 0204 0423     		movs	r3, #4
 4325 0206 FB75     		strb	r3, [r7, #23]
 4326 0208 08E0     		b	.L259
 4327              	.L289:
 4328              		.loc 2 862 3 discriminator 54
 4329 020a 0823     		movs	r3, #8
 4330 020c FB75     		strb	r3, [r7, #23]
 4331 020e 05E0     		b	.L259
 4332              	.L288:
 4333              		.loc 2 862 3 discriminator 51
 4334 0210 1023     		movs	r3, #16
 4335 0212 FB75     		strb	r3, [r7, #23]
 4336 0214 00BF     		nop
 4337 0216 01E0     		b	.L259
 4338              	.L284:
 4339              		.loc 2 862 3 discriminator 50
 4340 0218 1023     		movs	r3, #16
 4341 021a FB75     		strb	r3, [r7, #23]
 4342              	.L259:
 863:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 864:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check UART Over Sampling to set Baud Rate Register */
 865:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 4343              		.loc 2 865 18 is_stmt 1
 4344 021c 7B68     		ldr	r3, [r7, #4]
 4345 021e DB69     		ldr	r3, [r3, #28]
 4346              		.loc 2 865 6
 4347 0220 B3F5004F 		cmp	r3, #32768
 4348 0224 6FD1     		bne	.L292
 866:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 867:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     switch (clocksource)
 4349              		.loc 2 867 5
 4350 0226 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4351 0228 082B     		cmp	r3, #8
 4352 022a 57D8     		bhi	.L293
 4353 022c 01A2     		adr	r2, .L295
 4354 022e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4355 0232 00BF     		.p2align 2
 4356              	.L295:
 4357 0234 59020000 		.word	.L299+1
 4358 0238 75020000 		.word	.L298+1
 4359 023c 91020000 		.word	.L297+1
 4360 0240 DD020000 		.word	.L293+1
 4361 0244 AB020000 		.word	.L296+1
 4362 0248 DD020000 		.word	.L293+1
 4363 024c DD020000 		.word	.L293+1
 4364 0250 DD020000 		.word	.L293+1
 4365 0254 C7020000 		.word	.L294+1
 4366              		.p2align 1
 4367              	.L299:
 868:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 869:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK1:
 870:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 4368              		.loc 2 870 31
 4369 0258 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4370 025c 0346     		mov	r3, r0
 4371 025e 5A00     		lsls	r2, r3, #1
 4372 0260 7B68     		ldr	r3, [r7, #4]
 4373 0262 5B68     		ldr	r3, [r3, #4]
 4374 0264 5B08     		lsrs	r3, r3, #1
 4375 0266 1A44     		add	r2, r2, r3
 4376 0268 7B68     		ldr	r3, [r7, #4]
 4377 026a 5B68     		ldr	r3, [r3, #4]
 4378 026c B2FBF3F3 		udiv	r3, r2, r3
 4379              		.loc 2 870 18
 4380 0270 BB82     		strh	r3, [r7, #20]	@ movhi
 871:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4381              		.loc 2 871 9
 4382 0272 36E0     		b	.L300
 4383              	.L298:
 872:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK2:
 873:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 4384              		.loc 2 873 31
 4385 0274 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4386 0278 0346     		mov	r3, r0
 4387 027a 5A00     		lsls	r2, r3, #1
 4388 027c 7B68     		ldr	r3, [r7, #4]
 4389 027e 5B68     		ldr	r3, [r3, #4]
 4390 0280 5B08     		lsrs	r3, r3, #1
 4391 0282 1A44     		add	r2, r2, r3
 4392 0284 7B68     		ldr	r3, [r7, #4]
 4393 0286 5B68     		ldr	r3, [r3, #4]
 4394 0288 B2FBF3F3 		udiv	r3, r2, r3
 4395              		.loc 2 873 18
 4396 028c BB82     		strh	r3, [r7, #20]	@ movhi
 874:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4397              		.loc 2 874 9
 4398 028e 28E0     		b	.L300
 4399              	.L297:
 875:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_HSI:
 876:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 4400              		.loc 2 876 31
 4401 0290 7B68     		ldr	r3, [r7, #4]
 4402 0292 5B68     		ldr	r3, [r3, #4]
 4403 0294 5B08     		lsrs	r3, r3, #1
 4404 0296 03F1F473 		add	r3, r3, #31981568
 4405 029a 03F59043 		add	r3, r3, #18432
 4406 029e 7A68     		ldr	r2, [r7, #4]
 4407 02a0 5268     		ldr	r2, [r2, #4]
 4408 02a2 B3FBF2F3 		udiv	r3, r3, r2
 4409              		.loc 2 876 18
 4410 02a6 BB82     		strh	r3, [r7, #20]	@ movhi
 877:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4411              		.loc 2 877 9
 4412 02a8 1BE0     		b	.L300
 4413              	.L296:
 878:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_SYSCLK:
 879:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 4414              		.loc 2 879 31
 4415 02aa FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 4416 02ae 0346     		mov	r3, r0
 4417 02b0 5A00     		lsls	r2, r3, #1
 4418 02b2 7B68     		ldr	r3, [r7, #4]
 4419 02b4 5B68     		ldr	r3, [r3, #4]
 4420 02b6 5B08     		lsrs	r3, r3, #1
 4421 02b8 1A44     		add	r2, r2, r3
 4422 02ba 7B68     		ldr	r3, [r7, #4]
 4423 02bc 5B68     		ldr	r3, [r3, #4]
 4424 02be B2FBF3F3 		udiv	r3, r2, r3
 4425              		.loc 2 879 18
 4426 02c2 BB82     		strh	r3, [r7, #20]	@ movhi
 880:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4427              		.loc 2 880 9
 4428 02c4 0DE0     		b	.L300
 4429              	.L294:
 881:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_LSE:
 882:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 4430              		.loc 2 882 31
 4431 02c6 7B68     		ldr	r3, [r7, #4]
 4432 02c8 5B68     		ldr	r3, [r3, #4]
 4433 02ca 5B08     		lsrs	r3, r3, #1
 4434 02cc 03F58032 		add	r2, r3, #65536
 4435 02d0 7B68     		ldr	r3, [r7, #4]
 4436 02d2 5B68     		ldr	r3, [r3, #4]
 4437 02d4 B2FBF3F3 		udiv	r3, r2, r3
 4438              		.loc 2 882 18
 4439 02d8 BB82     		strh	r3, [r7, #20]	@ movhi
 883:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4440              		.loc 2 883 9
 4441 02da 02E0     		b	.L300
 4442              	.L293:
 884:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 885:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       default:
 886:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         ret = HAL_ERROR;
 4443              		.loc 2 886 13
 4444 02dc 0123     		movs	r3, #1
 4445 02de FB74     		strb	r3, [r7, #19]
 887:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4446              		.loc 2 887 9
 4447 02e0 00BF     		nop
 4448              	.L300:
 888:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 889:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 890:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     brrtemp = usartdiv & 0xFFF0U;
 4449              		.loc 2 890 13
 4450 02e2 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 4451 02e4 23F00F03 		bic	r3, r3, #15
 4452 02e8 7B81     		strh	r3, [r7, #10]	@ movhi
 891:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 4453              		.loc 2 891 58
 4454 02ea BB8A     		ldrh	r3, [r7, #20]
 4455 02ec 5B10     		asrs	r3, r3, #1
 4456              		.loc 2 891 16
 4457 02ee 9BB2     		uxth	r3, r3
 4458 02f0 03F00703 		and	r3, r3, #7
 4459 02f4 9AB2     		uxth	r2, r3
 4460              		.loc 2 891 13
 4461 02f6 7B89     		ldrh	r3, [r7, #10]	@ movhi
 4462 02f8 1343     		orrs	r3, r3, r2
 4463 02fa 7B81     		strh	r3, [r7, #10]	@ movhi
 892:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Instance->BRR = brrtemp;
 4464              		.loc 2 892 10
 4465 02fc 7B68     		ldr	r3, [r7, #4]
 4466 02fe 1B68     		ldr	r3, [r3]
 4467              		.loc 2 892 26
 4468 0300 7A89     		ldrh	r2, [r7, #10]
 4469 0302 DA60     		str	r2, [r3, #12]
 4470 0304 75E0     		b	.L301
 4471              	.L292:
 893:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 894:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 895:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 896:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     switch (clocksource)
 4472              		.loc 2 896 5
 4473 0306 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4474 0308 082B     		cmp	r3, #8
 4475 030a 6FD8     		bhi	.L302
 4476 030c 01A2     		adr	r2, .L304
 4477 030e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4478 0312 00BF     		.p2align 2
 4479              	.L304:
 4480 0314 39030000 		.word	.L308+1
 4481 0318 71030000 		.word	.L307+1
 4482 031c 91030000 		.word	.L306+1
 4483 0320 ED030000 		.word	.L302+1
 4484 0324 B1030000 		.word	.L305+1
 4485 0328 ED030000 		.word	.L302+1
 4486 032c ED030000 		.word	.L302+1
 4487 0330 ED030000 		.word	.L302+1
 4488 0334 D1030000 		.word	.L303+1
 4489              		.p2align 1
 4490              	.L308:
 897:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 898:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK1:
 899:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.B
 4491              		.loc 2 899 43
 4492 0338 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4493 033c 0246     		mov	r2, r0
 4494 033e 7B68     		ldr	r3, [r7, #4]
 4495 0340 5B68     		ldr	r3, [r3, #4]
 4496 0342 5B08     		lsrs	r3, r3, #1
 4497 0344 1A44     		add	r2, r2, r3
 4498 0346 7B68     		ldr	r3, [r7, #4]
 4499 0348 5B68     		ldr	r3, [r3, #4]
 4500 034a B2FBF3F3 		udiv	r3, r2, r3
 4501              		.loc 2 899 32
 4502 034e 9AB2     		uxth	r2, r3
 4503              		.loc 2 899 14
 4504 0350 7B68     		ldr	r3, [r7, #4]
 4505 0352 1B68     		ldr	r3, [r3]
 4506              		.loc 2 899 30
 4507 0354 DA60     		str	r2, [r3, #12]
 900:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4508              		.loc 2 900 9
 4509 0356 4CE0     		b	.L301
 4510              	.L311:
 4511              		.align	2
 4512              	.L310:
 4513 0358 00380140 		.word	1073821696
 4514 035c 00100240 		.word	1073876992
 4515 0360 00440040 		.word	1073759232
 4516 0364 00480040 		.word	1073760256
 4517 0368 004C0040 		.word	1073761280
 4518 036c 00500040 		.word	1073762304
 4519              	.L307:
 901:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK2:
 902:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.B
 4520              		.loc 2 902 43
 4521 0370 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4522 0374 0246     		mov	r2, r0
 4523 0376 7B68     		ldr	r3, [r7, #4]
 4524 0378 5B68     		ldr	r3, [r3, #4]
 4525 037a 5B08     		lsrs	r3, r3, #1
 4526 037c 1A44     		add	r2, r2, r3
 4527 037e 7B68     		ldr	r3, [r7, #4]
 4528 0380 5B68     		ldr	r3, [r3, #4]
 4529 0382 B2FBF3F3 		udiv	r3, r2, r3
 4530              		.loc 2 902 32
 4531 0386 9AB2     		uxth	r2, r3
 4532              		.loc 2 902 14
 4533 0388 7B68     		ldr	r3, [r7, #4]
 4534 038a 1B68     		ldr	r3, [r3]
 4535              		.loc 2 902 30
 4536 038c DA60     		str	r2, [r3, #12]
 903:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4537              		.loc 2 903 9
 4538 038e 30E0     		b	.L301
 4539              	.L306:
 904:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_HSI:
 905:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 4540              		.loc 2 905 43
 4541 0390 7B68     		ldr	r3, [r7, #4]
 4542 0392 5B68     		ldr	r3, [r3, #4]
 4543 0394 5B08     		lsrs	r3, r3, #1
 4544 0396 03F57403 		add	r3, r3, #15990784
 4545 039a 03F51053 		add	r3, r3, #9216
 4546 039e 7A68     		ldr	r2, [r7, #4]
 4547 03a0 5268     		ldr	r2, [r2, #4]
 4548 03a2 B3FBF2F3 		udiv	r3, r3, r2
 4549              		.loc 2 905 32
 4550 03a6 9AB2     		uxth	r2, r3
 4551              		.loc 2 905 14
 4552 03a8 7B68     		ldr	r3, [r7, #4]
 4553 03aa 1B68     		ldr	r3, [r3]
 4554              		.loc 2 905 30
 4555 03ac DA60     		str	r2, [r3, #12]
 906:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4556              		.loc 2 906 9
 4557 03ae 20E0     		b	.L301
 4558              	.L305:
 907:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_SYSCLK:
 908:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Ini
 4559              		.loc 2 908 43
 4560 03b0 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 4561 03b4 0246     		mov	r2, r0
 4562 03b6 7B68     		ldr	r3, [r7, #4]
 4563 03b8 5B68     		ldr	r3, [r3, #4]
 4564 03ba 5B08     		lsrs	r3, r3, #1
 4565 03bc 1A44     		add	r2, r2, r3
 4566 03be 7B68     		ldr	r3, [r7, #4]
 4567 03c0 5B68     		ldr	r3, [r3, #4]
 4568 03c2 B2FBF3F3 		udiv	r3, r2, r3
 4569              		.loc 2 908 32
 4570 03c6 9AB2     		uxth	r2, r3
 4571              		.loc 2 908 14
 4572 03c8 7B68     		ldr	r3, [r7, #4]
 4573 03ca 1B68     		ldr	r3, [r3]
 4574              		.loc 2 908 30
 4575 03cc DA60     		str	r2, [r3, #12]
 909:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4576              		.loc 2 909 9
 4577 03ce 10E0     		b	.L301
 4578              	.L303:
 910:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_LSE:
 911:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 4579              		.loc 2 911 43
 4580 03d0 7B68     		ldr	r3, [r7, #4]
 4581 03d2 5B68     		ldr	r3, [r3, #4]
 4582 03d4 5B08     		lsrs	r3, r3, #1
 4583 03d6 03F50042 		add	r2, r3, #32768
 4584 03da 7B68     		ldr	r3, [r7, #4]
 4585 03dc 5B68     		ldr	r3, [r3, #4]
 4586 03de B2FBF3F3 		udiv	r3, r2, r3
 4587              		.loc 2 911 32
 4588 03e2 9AB2     		uxth	r2, r3
 4589              		.loc 2 911 14
 4590 03e4 7B68     		ldr	r3, [r7, #4]
 4591 03e6 1B68     		ldr	r3, [r3]
 4592              		.loc 2 911 30
 4593 03e8 DA60     		str	r2, [r3, #12]
 912:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4594              		.loc 2 912 9
 4595 03ea 02E0     		b	.L301
 4596              	.L302:
 913:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 914:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       default:
 915:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         ret = HAL_ERROR;
 4597              		.loc 2 915 13
 4598 03ec 0123     		movs	r3, #1
 4599 03ee FB74     		strb	r3, [r7, #19]
 916:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 4600              		.loc 2 916 9
 4601 03f0 00BF     		nop
 4602              	.L301:
 917:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 918:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 919:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 920:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return ret;
 4603              		.loc 2 920 10
 4604 03f2 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 921:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 922:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 4605              		.loc 2 922 1
 4606 03f4 1846     		mov	r0, r3
 4607 03f6 1837     		adds	r7, r7, #24
 4608              	.LCFI72:
 4609              		.cfi_def_cfa_offset 8
 4610 03f8 BD46     		mov	sp, r7
 4611              	.LCFI73:
 4612              		.cfi_def_cfa_register 13
 4613              		@ sp needed
 4614 03fa 80BD     		pop	{r7, pc}
 4615              		.cfi_endproc
 4616              	.LFE137:
 4618              		.section	.text.UART_CheckIdleState,"ax",%progbits
 4619              		.align	1
 4620              		.global	UART_CheckIdleState
 4621              		.syntax unified
 4622              		.thumb
 4623              		.thumb_func
 4624              		.fpu fpv4-sp-d16
 4626              	UART_CheckIdleState:
 4627              	.LFB138:
 923:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 924:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 925:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 926:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Check the UART Idle State.
 927:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart UART handle.
 928:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 929:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 930:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
 931:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 4628              		.loc 2 931 1
 4629              		.cfi_startproc
 4630              		@ args = 0, pretend = 0, frame = 16
 4631              		@ frame_needed = 1, uses_anonymous_args = 0
 4632 0000 80B5     		push	{r7, lr}
 4633              	.LCFI74:
 4634              		.cfi_def_cfa_offset 8
 4635              		.cfi_offset 7, -8
 4636              		.cfi_offset 14, -4
 4637 0002 86B0     		sub	sp, sp, #24
 4638              	.LCFI75:
 4639              		.cfi_def_cfa_offset 32
 4640 0004 02AF     		add	r7, sp, #8
 4641              	.LCFI76:
 4642              		.cfi_def_cfa 7, 24
 4643 0006 7860     		str	r0, [r7, #4]
 932:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 4644              		.loc 2 932 12
 4645 0008 0023     		movs	r3, #0
 4646 000a FB60     		str	r3, [r7, #12]
 933:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 934:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Initialize the UART ErrorCode */
 935:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 4647              		.loc 2 935 20
 4648 000c 7B68     		ldr	r3, [r7, #4]
 4649 000e 0022     		movs	r2, #0
 4650 0010 DA66     		str	r2, [r3, #108]
 936:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 937:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Init tickstart for timeout managment*/
 938:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   tickstart = HAL_GetTick();
 4651              		.loc 2 938 15
 4652 0012 FFF7FEFF 		bl	HAL_GetTick
 4653 0016 F860     		str	r0, [r7, #12]
 939:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 940:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check if the Transmitter is enabled */
 941:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 4654              		.loc 2 941 12
 4655 0018 7B68     		ldr	r3, [r7, #4]
 4656 001a 1B68     		ldr	r3, [r3]
 4657              		.loc 2 941 22
 4658 001c 1B68     		ldr	r3, [r3]
 4659              		.loc 2 941 28
 4660 001e 03F00803 		and	r3, r3, #8
 4661              		.loc 2 941 5
 4662 0022 082B     		cmp	r3, #8
 4663 0024 0ED1     		bne	.L313
 942:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 943:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Wait until TEACK flag is set */
 944:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 4664              		.loc 2 944 8
 4665 0026 6FF07E43 		mvn	r3, #-33554432
 4666 002a 0093     		str	r3, [sp]
 4667 002c FB68     		ldr	r3, [r7, #12]
 4668 002e 0022     		movs	r2, #0
 4669 0030 4FF40011 		mov	r1, #2097152
 4670 0034 7868     		ldr	r0, [r7, #4]
 4671 0036 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4672 003a 0346     		mov	r3, r0
 4673              		.loc 2 944 7
 4674 003c 002B     		cmp	r3, #0
 4675 003e 01D0     		beq	.L313
 945:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 946:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Timeout Occured */
 947:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 4676              		.loc 2 947 14
 4677 0040 0323     		movs	r3, #3
 4678 0042 22E0     		b	.L314
 4679              	.L313:
 948:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 949:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 950:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check if the Receiver is enabled */
 951:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 4680              		.loc 2 951 12
 4681 0044 7B68     		ldr	r3, [r7, #4]
 4682 0046 1B68     		ldr	r3, [r3]
 4683              		.loc 2 951 22
 4684 0048 1B68     		ldr	r3, [r3]
 4685              		.loc 2 951 28
 4686 004a 03F00403 		and	r3, r3, #4
 4687              		.loc 2 951 5
 4688 004e 042B     		cmp	r3, #4
 4689 0050 0ED1     		bne	.L315
 952:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 953:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Wait until REACK flag is set */
 954:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 4690              		.loc 2 954 8
 4691 0052 6FF07E43 		mvn	r3, #-33554432
 4692 0056 0093     		str	r3, [sp]
 4693 0058 FB68     		ldr	r3, [r7, #12]
 4694 005a 0022     		movs	r2, #0
 4695 005c 4FF48001 		mov	r1, #4194304
 4696 0060 7868     		ldr	r0, [r7, #4]
 4697 0062 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4698 0066 0346     		mov	r3, r0
 4699              		.loc 2 954 7
 4700 0068 002B     		cmp	r3, #0
 4701 006a 01D0     		beq	.L315
 955:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 956:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Timeout Occured */
 957:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 4702              		.loc 2 957 14
 4703 006c 0323     		movs	r3, #3
 4704 006e 0CE0     		b	.L314
 4705              	.L315:
 958:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 959:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 960:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 961:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Initialize the UART State */
 962:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->gState  = HAL_UART_STATE_READY;
 4706              		.loc 2 962 18
 4707 0070 7B68     		ldr	r3, [r7, #4]
 4708 0072 2022     		movs	r2, #32
 4709 0074 83F86920 		strb	r2, [r3, #105]
 963:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->RxState = HAL_UART_STATE_READY;
 4710              		.loc 2 963 18
 4711 0078 7B68     		ldr	r3, [r7, #4]
 4712 007a 2022     		movs	r2, #32
 4713 007c 83F86A20 		strb	r2, [r3, #106]
 964:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 965:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Process Unlocked */
 966:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UNLOCK(huart);
 4714              		.loc 2 966 3
 4715 0080 7B68     		ldr	r3, [r7, #4]
 4716 0082 0022     		movs	r2, #0
 4717 0084 83F86820 		strb	r2, [r3, #104]
 967:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 968:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 4718              		.loc 2 968 10
 4719 0088 0023     		movs	r3, #0
 4720              	.L314:
 969:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 4721              		.loc 2 969 1
 4722 008a 1846     		mov	r0, r3
 4723 008c 1037     		adds	r7, r7, #16
 4724              	.LCFI77:
 4725              		.cfi_def_cfa_offset 8
 4726 008e BD46     		mov	sp, r7
 4727              	.LCFI78:
 4728              		.cfi_def_cfa_register 13
 4729              		@ sp needed
 4730 0090 80BD     		pop	{r7, pc}
 4731              		.cfi_endproc
 4732              	.LFE138:
 4734              		.section	.text.HAL_UART_Init,"ax",%progbits
 4735              		.align	1
 4736              		.global	HAL_UART_Init
 4737              		.syntax unified
 4738              		.thumb
 4739              		.thumb_func
 4740              		.fpu fpv4-sp-d16
 4742              	HAL_UART_Init:
 4743              	.LFB139:
 970:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 971:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 972:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 973:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 974:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Initialize the UART mode according to the specified
 975:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 976:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
 977:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 978:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 979:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 980:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 4744              		.loc 2 980 1
 4745              		.cfi_startproc
 4746              		@ args = 0, pretend = 0, frame = 8
 4747              		@ frame_needed = 1, uses_anonymous_args = 0
 4748 0000 80B5     		push	{r7, lr}
 4749              	.LCFI79:
 4750              		.cfi_def_cfa_offset 8
 4751              		.cfi_offset 7, -8
 4752              		.cfi_offset 14, -4
 4753 0002 82B0     		sub	sp, sp, #8
 4754              	.LCFI80:
 4755              		.cfi_def_cfa_offset 16
 4756 0004 00AF     		add	r7, sp, #0
 4757              	.LCFI81:
 4758              		.cfi_def_cfa_register 7
 4759 0006 7860     		str	r0, [r7, #4]
 981:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the UART handle allocation */
 982:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart == NULL)
 4760              		.loc 2 982 5
 4761 0008 7B68     		ldr	r3, [r7, #4]
 4762 000a 002B     		cmp	r3, #0
 4763 000c 01D1     		bne	.L317
 983:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 984:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_ERROR;
 4764              		.loc 2 984 12
 4765 000e 0123     		movs	r3, #1
 4766 0010 39E0     		b	.L318
 4767              	.L317:
 985:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 986:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 987:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 988:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 989:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 990:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 991:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 992:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 993:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 994:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 995:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 996:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 997:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 998:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 4768              		.loc 2 998 11
 4769 0012 7B68     		ldr	r3, [r7, #4]
 4770 0014 93F86930 		ldrb	r3, [r3, #105]
 4771 0018 DBB2     		uxtb	r3, r3
 4772              		.loc 2 998 5
 4773 001a 002B     		cmp	r3, #0
 4774 001c 03D1     		bne	.L319
 999:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1000:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Allocate lock resource and initialize it */
1001:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Lock = HAL_UNLOCKED;
 4775              		.loc 2 1001 17
 4776 001e 7B68     		ldr	r3, [r7, #4]
 4777 0020 0022     		movs	r2, #0
 4778 0022 83F86820 		strb	r2, [r3, #104]
 4779              	.L319:
1002:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1003:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init the low level hardware : GPIO, CLOCK */
1004:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     //HAL_UART_MspInit(huart);
1005:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1006:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1007:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4780              		.loc 2 1007 17
 4781 0026 7B68     		ldr	r3, [r7, #4]
 4782 0028 2422     		movs	r2, #36
 4783 002a 83F86920 		strb	r2, [r3, #105]
1008:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1009:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Disable the Peripheral */
1010:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UART_DISABLE(huart);
 4784              		.loc 2 1010 3
 4785 002e 7B68     		ldr	r3, [r7, #4]
 4786 0030 1B68     		ldr	r3, [r3]
 4787 0032 1A68     		ldr	r2, [r3]
 4788 0034 7B68     		ldr	r3, [r7, #4]
 4789 0036 1B68     		ldr	r3, [r3]
 4790 0038 22F00102 		bic	r2, r2, #1
 4791 003c 1A60     		str	r2, [r3]
1011:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1012:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Set the UART Communication parameters */
1013:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 4792              		.loc 2 1013 7
 4793 003e 7868     		ldr	r0, [r7, #4]
 4794 0040 FFF7FEFF 		bl	UART_SetConfig
 4795 0044 0346     		mov	r3, r0
 4796              		.loc 2 1013 6
 4797 0046 012B     		cmp	r3, #1
 4798 0048 01D1     		bne	.L320
1014:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1015:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_ERROR;
 4799              		.loc 2 1015 12
 4800 004a 0123     		movs	r3, #1
 4801 004c 1BE0     		b	.L318
 4802              	.L320:
1016:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1017:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1018:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1019:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1020:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     //UART_AdvFeatureConfig(huart);
1021:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1022:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1023:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* In asynchronous mode, the following bits must be kept cleared:
1024:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
1025:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
1026:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 4803              		.loc 2 1026 3
 4804 004e 7B68     		ldr	r3, [r7, #4]
 4805 0050 1B68     		ldr	r3, [r3]
 4806 0052 5A68     		ldr	r2, [r3, #4]
 4807 0054 7B68     		ldr	r3, [r7, #4]
 4808 0056 1B68     		ldr	r3, [r3]
 4809 0058 22F49042 		bic	r2, r2, #18432
 4810 005c 5A60     		str	r2, [r3, #4]
1027:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 4811              		.loc 2 1027 3
 4812 005e 7B68     		ldr	r3, [r7, #4]
 4813 0060 1B68     		ldr	r3, [r3]
 4814 0062 9A68     		ldr	r2, [r3, #8]
 4815 0064 7B68     		ldr	r3, [r7, #4]
 4816 0066 1B68     		ldr	r3, [r3]
 4817 0068 22F02A02 		bic	r2, r2, #42
 4818 006c 9A60     		str	r2, [r3, #8]
1028:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1029:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Enable the Peripheral */
1030:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UART_ENABLE(huart);
 4819              		.loc 2 1030 3
 4820 006e 7B68     		ldr	r3, [r7, #4]
 4821 0070 1B68     		ldr	r3, [r3]
 4822 0072 1A68     		ldr	r2, [r3]
 4823 0074 7B68     		ldr	r3, [r7, #4]
 4824 0076 1B68     		ldr	r3, [r3]
 4825 0078 42F00102 		orr	r2, r2, #1
 4826 007c 1A60     		str	r2, [r3]
1031:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1032:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
1033:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return UART_CheckIdleState(huart);
 4827              		.loc 2 1033 10
 4828 007e 7868     		ldr	r0, [r7, #4]
 4829 0080 FFF7FEFF 		bl	UART_CheckIdleState
 4830 0084 0346     		mov	r3, r0
 4831              	.L318:
1034:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 4832              		.loc 2 1034 1
 4833 0086 1846     		mov	r0, r3
 4834 0088 0837     		adds	r7, r7, #8
 4835              	.LCFI82:
 4836              		.cfi_def_cfa_offset 8
 4837 008a BD46     		mov	sp, r7
 4838              	.LCFI83:
 4839              		.cfi_def_cfa_register 13
 4840              		@ sp needed
 4841 008c 80BD     		pop	{r7, pc}
 4842              		.cfi_endproc
 4843              	.LFE139:
 4845              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 4846              		.align	1
 4847              		.global	UART_WaitOnFlagUntilTimeout
 4848              		.syntax unified
 4849              		.thumb
 4850              		.thumb_func
 4851              		.fpu fpv4-sp-d16
 4853              	UART_WaitOnFlagUntilTimeout:
 4854              	.LFB140:
1035:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1036:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1037:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Handle UART Communication Timeout.
1038:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  huart UART handle.
1039:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Flag Specifies the UART flag to check
1040:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Status Flag status (SET or RESET)
1041:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Tickstart Tick start value
1042:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Timeout Timeout duration
1043:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1044:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1045:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
1046:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 4855              		.loc 2 1046 1
 4856              		.cfi_startproc
 4857              		@ args = 4, pretend = 0, frame = 16
 4858              		@ frame_needed = 1, uses_anonymous_args = 0
 4859 0000 80B5     		push	{r7, lr}
 4860              	.LCFI84:
 4861              		.cfi_def_cfa_offset 8
 4862              		.cfi_offset 7, -8
 4863              		.cfi_offset 14, -4
 4864 0002 84B0     		sub	sp, sp, #16
 4865              	.LCFI85:
 4866              		.cfi_def_cfa_offset 24
 4867 0004 00AF     		add	r7, sp, #0
 4868              	.LCFI86:
 4869              		.cfi_def_cfa_register 7
 4870 0006 F860     		str	r0, [r7, #12]
 4871 0008 B960     		str	r1, [r7, #8]
 4872 000a 3B60     		str	r3, [r7]
 4873 000c 1346     		mov	r3, r2
 4874 000e FB71     		strb	r3, [r7, #7]
1047:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Wait until flag is set */
1048:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 4875              		.loc 2 1048 8
 4876 0010 2CE0     		b	.L322
 4877              	.L325:
1049:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1050:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check for the Timeout */
1051:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(Timeout != HAL_MAX_DELAY)
 4878              		.loc 2 1051 7
 4879 0012 BB69     		ldr	r3, [r7, #24]
 4880 0014 B3F1FF3F 		cmp	r3, #-1
 4881 0018 28D0     		beq	.L322
1052:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1053:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 4882              		.loc 2 1053 9
 4883 001a BB69     		ldr	r3, [r7, #24]
 4884 001c 002B     		cmp	r3, #0
 4885 001e 07D0     		beq	.L323
 4886              		.loc 2 1053 31 discriminator 1
 4887 0020 FFF7FEFF 		bl	HAL_GetTick
 4888 0024 0246     		mov	r2, r0
 4889              		.loc 2 1053 44 discriminator 1
 4890 0026 3B68     		ldr	r3, [r7]
 4891 0028 D31A     		subs	r3, r2, r3
 4892              		.loc 2 1053 26 discriminator 1
 4893 002a BA69     		ldr	r2, [r7, #24]
 4894 002c 9A42     		cmp	r2, r3
 4895 002e 1DD2     		bcs	.L322
 4896              	.L323:
1054:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1055:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
1056:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 4897              		.loc 2 1056 9
 4898 0030 FB68     		ldr	r3, [r7, #12]
 4899 0032 1B68     		ldr	r3, [r3]
 4900 0034 1A68     		ldr	r2, [r3]
 4901 0036 FB68     		ldr	r3, [r7, #12]
 4902 0038 1B68     		ldr	r3, [r3]
 4903 003a 22F4D072 		bic	r2, r2, #416
 4904 003e 1A60     		str	r2, [r3]
1057:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4905              		.loc 2 1057 9
 4906 0040 FB68     		ldr	r3, [r7, #12]
 4907 0042 1B68     		ldr	r3, [r3]
 4908 0044 9A68     		ldr	r2, [r3, #8]
 4909 0046 FB68     		ldr	r3, [r7, #12]
 4910 0048 1B68     		ldr	r3, [r3]
 4911 004a 22F00102 		bic	r2, r2, #1
 4912 004e 9A60     		str	r2, [r3, #8]
1058:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1059:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->gState  = HAL_UART_STATE_READY;
 4913              		.loc 2 1059 24
 4914 0050 FB68     		ldr	r3, [r7, #12]
 4915 0052 2022     		movs	r2, #32
 4916 0054 83F86920 		strb	r2, [r3, #105]
1060:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->RxState = HAL_UART_STATE_READY;
 4917              		.loc 2 1060 24
 4918 0058 FB68     		ldr	r3, [r7, #12]
 4919 005a 2022     		movs	r2, #32
 4920 005c 83F86A20 		strb	r2, [r3, #106]
1061:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1062:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Process Unlocked */
1063:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_UNLOCK(huart);
 4921              		.loc 2 1063 9
 4922 0060 FB68     		ldr	r3, [r7, #12]
 4923 0062 0022     		movs	r2, #0
 4924 0064 83F86820 		strb	r2, [r3, #104]
1064:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
 4925              		.loc 2 1064 16
 4926 0068 0323     		movs	r3, #3
 4927 006a 0FE0     		b	.L324
 4928              	.L322:
1048:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 4929              		.loc 2 1048 10
 4930 006c FB68     		ldr	r3, [r7, #12]
 4931 006e 1B68     		ldr	r3, [r3]
 4932 0070 DA69     		ldr	r2, [r3, #28]
 4933 0072 BB68     		ldr	r3, [r7, #8]
 4934 0074 1340     		ands	r3, r3, r2
1048:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 4935              		.loc 2 1048 49
 4936 0076 BA68     		ldr	r2, [r7, #8]
 4937 0078 9A42     		cmp	r2, r3
 4938 007a 0CBF     		ite	eq
 4939 007c 0123     		moveq	r3, #1
 4940 007e 0023     		movne	r3, #0
 4941 0080 DBB2     		uxtb	r3, r3
 4942 0082 1A46     		mov	r2, r3
1048:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 4943              		.loc 2 1048 58
 4944 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1048:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 4945              		.loc 2 1048 8
 4946 0086 9A42     		cmp	r2, r3
 4947 0088 C3D0     		beq	.L325
1065:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1066:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1067:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1068:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 4948              		.loc 2 1068 10
 4949 008a 0023     		movs	r3, #0
 4950              	.L324:
1069:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 4951              		.loc 2 1069 1
 4952 008c 1846     		mov	r0, r3
 4953 008e 1037     		adds	r7, r7, #16
 4954              	.LCFI87:
 4955              		.cfi_def_cfa_offset 8
 4956 0090 BD46     		mov	sp, r7
 4957              	.LCFI88:
 4958              		.cfi_def_cfa_register 13
 4959              		@ sp needed
 4960 0092 80BD     		pop	{r7, pc}
 4961              		.cfi_endproc
 4962              	.LFE140:
 4964              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 4965              		.align	1
 4966              		.global	HAL_UART_Transmit
 4967              		.syntax unified
 4968              		.thumb
 4969              		.thumb_func
 4970              		.fpu fpv4-sp-d16
 4972              	HAL_UART_Transmit:
 4973              	.LFB141:
1070:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1071:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1072:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1073:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1074:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Send an amount of data in blocking mode.
1075:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
1076:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param pData: Pointer to data buffer.
1077:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Size: Amount of data to be sent.
1078:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Timeout: Timeout duration.
1079:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1080:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1081:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1082:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 4974              		.loc 2 1082 1
 4975              		.cfi_startproc
 4976              		@ args = 0, pretend = 0, frame = 24
 4977              		@ frame_needed = 1, uses_anonymous_args = 0
 4978 0000 80B5     		push	{r7, lr}
 4979              	.LCFI89:
 4980              		.cfi_def_cfa_offset 8
 4981              		.cfi_offset 7, -8
 4982              		.cfi_offset 14, -4
 4983 0002 88B0     		sub	sp, sp, #32
 4984              	.LCFI90:
 4985              		.cfi_def_cfa_offset 40
 4986 0004 02AF     		add	r7, sp, #8
 4987              	.LCFI91:
 4988              		.cfi_def_cfa 7, 32
 4989 0006 F860     		str	r0, [r7, #12]
 4990 0008 B960     		str	r1, [r7, #8]
 4991 000a 3B60     		str	r3, [r7]
 4992 000c 1346     		mov	r3, r2	@ movhi
 4993 000e FB80     		strh	r3, [r7, #6]	@ movhi
1083:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
1084:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 4994              		.loc 2 1084 12
 4995 0010 0023     		movs	r3, #0
 4996 0012 7B61     		str	r3, [r7, #20]
1085:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1086:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check that a Tx process is not already ongoing */
1087:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_READY)
 4997              		.loc 2 1087 11
 4998 0014 FB68     		ldr	r3, [r7, #12]
 4999 0016 93F86930 		ldrb	r3, [r3, #105]
 5000 001a DBB2     		uxtb	r3, r3
 5001              		.loc 2 1087 5
 5002 001c 202B     		cmp	r3, #32
 5003 001e 77D1     		bne	.L327
1088:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1089:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0U))
 5004              		.loc 2 1089 7
 5005 0020 BB68     		ldr	r3, [r7, #8]
 5006 0022 002B     		cmp	r3, #0
 5007 0024 02D0     		beq	.L328
 5008              		.loc 2 1089 25 discriminator 1
 5009 0026 FB88     		ldrh	r3, [r7, #6]
 5010 0028 002B     		cmp	r3, #0
 5011 002a 01D1     		bne	.L329
 5012              	.L328:
1090:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1091:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return  HAL_ERROR;
 5013              		.loc 2 1091 15
 5014 002c 0123     		movs	r3, #1
 5015 002e 70E0     		b	.L330
 5016              	.L329:
1092:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1093:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1094:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Locked */
1095:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_LOCK(huart);
 5017              		.loc 2 1095 5
 5018 0030 FB68     		ldr	r3, [r7, #12]
 5019 0032 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 5020 0036 012B     		cmp	r3, #1
 5021 0038 01D1     		bne	.L331
 5022              		.loc 2 1095 5 is_stmt 0 discriminator 1
 5023 003a 0223     		movs	r3, #2
 5024 003c 69E0     		b	.L330
 5025              	.L331:
 5026              		.loc 2 1095 5 discriminator 2
 5027 003e FB68     		ldr	r3, [r7, #12]
 5028 0040 0122     		movs	r2, #1
 5029 0042 83F86820 		strb	r2, [r3, #104]
1096:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1097:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 5030              		.loc 2 1097 22 is_stmt 1 discriminator 2
 5031 0046 FB68     		ldr	r3, [r7, #12]
 5032 0048 0022     		movs	r2, #0
 5033 004a DA66     		str	r2, [r3, #108]
1098:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 5034              		.loc 2 1098 19 discriminator 2
 5035 004c FB68     		ldr	r3, [r7, #12]
 5036 004e 2122     		movs	r2, #33
 5037 0050 83F86920 		strb	r2, [r3, #105]
1099:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1100:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init tickstart for timeout managment*/
1101:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 5038              		.loc 2 1101 17 discriminator 2
 5039 0054 FFF7FEFF 		bl	HAL_GetTick
 5040 0058 7861     		str	r0, [r7, #20]
1102:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1103:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->TxXferSize = Size;
 5041              		.loc 2 1103 23 discriminator 2
 5042 005a FB68     		ldr	r3, [r7, #12]
 5043 005c FA88     		ldrh	r2, [r7, #6]	@ movhi
 5044 005e A3F85020 		strh	r2, [r3, #80]	@ movhi
1104:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->TxXferCount = Size;
 5045              		.loc 2 1104 24 discriminator 2
 5046 0062 FB68     		ldr	r3, [r7, #12]
 5047 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5048 0066 A3F85220 		strh	r2, [r3, #82]	@ movhi
1105:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     while(huart->TxXferCount > 0U)
 5049              		.loc 2 1105 10 discriminator 2
 5050 006a 34E0     		b	.L332
 5051              	.L335:
1106:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1107:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       huart->TxXferCount--;
 5052              		.loc 2 1107 12
 5053 006c FB68     		ldr	r3, [r7, #12]
 5054 006e B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 5055 0072 9BB2     		uxth	r3, r3
 5056              		.loc 2 1107 25
 5057 0074 013B     		subs	r3, r3, #1
 5058 0076 9AB2     		uxth	r2, r3
 5059 0078 FB68     		ldr	r3, [r7, #12]
 5060 007a A3F85220 		strh	r2, [r3, #82]	@ movhi
1108:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 5061              		.loc 2 1108 10
 5062 007e 3B68     		ldr	r3, [r7]
 5063 0080 0093     		str	r3, [sp]
 5064 0082 7B69     		ldr	r3, [r7, #20]
 5065 0084 0022     		movs	r2, #0
 5066 0086 8021     		movs	r1, #128
 5067 0088 F868     		ldr	r0, [r7, #12]
 5068 008a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5069 008e 0346     		mov	r3, r0
 5070              		.loc 2 1108 9
 5071 0090 002B     		cmp	r3, #0
 5072 0092 01D0     		beq	.L333
1109:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1110:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
 5073              		.loc 2 1110 16
 5074 0094 0323     		movs	r3, #3
 5075 0096 3CE0     		b	.L330
 5076              	.L333:
1111:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1112:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 5077              		.loc 2 1112 23
 5078 0098 FB68     		ldr	r3, [r7, #12]
 5079 009a 9B68     		ldr	r3, [r3, #8]
 5080              		.loc 2 1112 10
 5081 009c B3F5805F 		cmp	r3, #4096
 5082 00a0 11D1     		bne	.L334
 5083              		.loc 2 1112 73 discriminator 1
 5084 00a2 FB68     		ldr	r3, [r7, #12]
 5085 00a4 1B69     		ldr	r3, [r3, #16]
 5086              		.loc 2 1112 58 discriminator 1
 5087 00a6 002B     		cmp	r3, #0
 5088 00a8 0DD1     		bne	.L334
1113:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1114:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tmp = (uint16_t*) pData;
 5089              		.loc 2 1114 13
 5090 00aa BB68     		ldr	r3, [r7, #8]
 5091 00ac 3B61     		str	r3, [r7, #16]
1115:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 5092              		.loc 2 1115 38
 5093 00ae 3B69     		ldr	r3, [r7, #16]
 5094 00b0 1A88     		ldrh	r2, [r3]
 5095              		.loc 2 1115 14
 5096 00b2 FB68     		ldr	r3, [r7, #12]
 5097 00b4 1B68     		ldr	r3, [r3]
 5098              		.loc 2 1115 38
 5099 00b6 C2F30802 		ubfx	r2, r2, #0, #9
 5100 00ba 92B2     		uxth	r2, r2
 5101              		.loc 2 1115 30
 5102 00bc 1A85     		strh	r2, [r3, #40]	@ movhi
1116:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         pData += 2U;
 5103              		.loc 2 1116 15
 5104 00be BB68     		ldr	r3, [r7, #8]
 5105 00c0 0233     		adds	r3, r3, #2
 5106 00c2 BB60     		str	r3, [r7, #8]
 5107 00c4 07E0     		b	.L332
 5108              	.L334:
1117:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1118:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
1119:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1120:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 5109              		.loc 2 1120 39
 5110 00c6 BB68     		ldr	r3, [r7, #8]
 5111 00c8 5A1C     		adds	r2, r3, #1
 5112 00ca BA60     		str	r2, [r7, #8]
 5113              		.loc 2 1120 33
 5114 00cc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5115              		.loc 2 1120 14
 5116 00ce FB68     		ldr	r3, [r7, #12]
 5117 00d0 1B68     		ldr	r3, [r3]
 5118              		.loc 2 1120 33
 5119 00d2 92B2     		uxth	r2, r2
 5120              		.loc 2 1120 30
 5121 00d4 1A85     		strh	r2, [r3, #40]	@ movhi
 5122              	.L332:
1105:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 5123              		.loc 2 1105 16
 5124 00d6 FB68     		ldr	r3, [r7, #12]
 5125 00d8 B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 5126 00dc 9BB2     		uxth	r3, r3
1105:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 5127              		.loc 2 1105 10
 5128 00de 002B     		cmp	r3, #0
 5129 00e0 C4D1     		bne	.L335
1121:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1122:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1123:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 5130              		.loc 2 1123 8
 5131 00e2 3B68     		ldr	r3, [r7]
 5132 00e4 0093     		str	r3, [sp]
 5133 00e6 7B69     		ldr	r3, [r7, #20]
 5134 00e8 0022     		movs	r2, #0
 5135 00ea 4021     		movs	r1, #64
 5136 00ec F868     		ldr	r0, [r7, #12]
 5137 00ee FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5138 00f2 0346     		mov	r3, r0
 5139              		.loc 2 1123 7
 5140 00f4 002B     		cmp	r3, #0
 5141 00f6 01D0     		beq	.L336
1124:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1125:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 5142              		.loc 2 1125 14
 5143 00f8 0323     		movs	r3, #3
 5144 00fa 0AE0     		b	.L330
 5145              	.L336:
1126:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1127:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1128:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* At end of Tx process, restore huart->gState to Ready */
1129:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_READY;
 5146              		.loc 2 1129 19
 5147 00fc FB68     		ldr	r3, [r7, #12]
 5148 00fe 2022     		movs	r2, #32
 5149 0100 83F86920 		strb	r2, [r3, #105]
1130:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1131:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Unlocked */
1132:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
 5150              		.loc 2 1132 5
 5151 0104 FB68     		ldr	r3, [r7, #12]
 5152 0106 0022     		movs	r2, #0
 5153 0108 83F86820 		strb	r2, [r3, #104]
1133:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1134:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_OK;
 5154              		.loc 2 1134 12
 5155 010c 0023     		movs	r3, #0
 5156 010e 00E0     		b	.L330
 5157              	.L327:
1135:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1136:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
1137:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1138:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_BUSY;
 5158              		.loc 2 1138 12
 5159 0110 0223     		movs	r3, #2
 5160              	.L330:
1139:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1140:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 5161              		.loc 2 1140 1
 5162 0112 1846     		mov	r0, r3
 5163 0114 1837     		adds	r7, r7, #24
 5164              	.LCFI92:
 5165              		.cfi_def_cfa_offset 8
 5166 0116 BD46     		mov	sp, r7
 5167              	.LCFI93:
 5168              		.cfi_def_cfa_register 13
 5169              		@ sp needed
 5170 0118 80BD     		pop	{r7, pc}
 5171              		.cfi_endproc
 5172              	.LFE141:
 5174              		.section	.text.HAL_UART_Receive,"ax",%progbits
 5175              		.align	1
 5176              		.global	HAL_UART_Receive
 5177              		.syntax unified
 5178              		.thumb
 5179              		.thumb_func
 5180              		.fpu fpv4-sp-d16
 5182              	HAL_UART_Receive:
 5183              	.LFB142:
1141:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1142:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1143:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1144:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1145:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Receive an amount of data in blocking mode.
1146:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
1147:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param pData: pointer to data buffer.
1148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Size: amount of data to be received.
1149:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Timeout: Timeout duration.
1150:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1151:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1152:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1153:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 5184              		.loc 2 1153 1
 5185              		.cfi_startproc
 5186              		@ args = 0, pretend = 0, frame = 32
 5187              		@ frame_needed = 1, uses_anonymous_args = 0
 5188 0000 80B5     		push	{r7, lr}
 5189              	.LCFI94:
 5190              		.cfi_def_cfa_offset 8
 5191              		.cfi_offset 7, -8
 5192              		.cfi_offset 14, -4
 5193 0002 8AB0     		sub	sp, sp, #40
 5194              	.LCFI95:
 5195              		.cfi_def_cfa_offset 48
 5196 0004 02AF     		add	r7, sp, #8
 5197              	.LCFI96:
 5198              		.cfi_def_cfa 7, 40
 5199 0006 F860     		str	r0, [r7, #12]
 5200 0008 B960     		str	r1, [r7, #8]
 5201 000a 3B60     		str	r3, [r7]
 5202 000c 1346     		mov	r3, r2	@ movhi
 5203 000e FB80     		strh	r3, [r7, #6]	@ movhi
1154:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
1155:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t uhMask;
1156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 5204              		.loc 2 1156 12
 5205 0010 0023     		movs	r3, #0
 5206 0012 FB61     		str	r3, [r7, #28]
1157:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1158:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check that a Rx process is not already ongoing */
1159:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 5207              		.loc 2 1159 11
 5208 0014 FB68     		ldr	r3, [r7, #12]
 5209 0016 93F86A30 		ldrb	r3, [r3, #106]
 5210 001a DBB2     		uxtb	r3, r3
 5211              		.loc 2 1159 5
 5212 001c 202B     		cmp	r3, #32
 5213 001e 40F09F80 		bne	.L338
1160:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1161:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0U))
 5214              		.loc 2 1161 7
 5215 0022 BB68     		ldr	r3, [r7, #8]
 5216 0024 002B     		cmp	r3, #0
 5217 0026 02D0     		beq	.L339
 5218              		.loc 2 1161 25 discriminator 1
 5219 0028 FB88     		ldrh	r3, [r7, #6]
 5220 002a 002B     		cmp	r3, #0
 5221 002c 01D1     		bne	.L340
 5222              	.L339:
1162:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1163:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return  HAL_ERROR;
 5223              		.loc 2 1163 15
 5224 002e 0123     		movs	r3, #1
 5225 0030 97E0     		b	.L341
 5226              	.L340:
1164:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1165:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1166:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Locked */
1167:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_LOCK(huart);
 5227              		.loc 2 1167 5
 5228 0032 FB68     		ldr	r3, [r7, #12]
 5229 0034 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 5230 0038 012B     		cmp	r3, #1
 5231 003a 01D1     		bne	.L342
 5232              		.loc 2 1167 5 is_stmt 0 discriminator 1
 5233 003c 0223     		movs	r3, #2
 5234 003e 90E0     		b	.L341
 5235              	.L342:
 5236              		.loc 2 1167 5 discriminator 2
 5237 0040 FB68     		ldr	r3, [r7, #12]
 5238 0042 0122     		movs	r2, #1
 5239 0044 83F86820 		strb	r2, [r3, #104]
1168:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1169:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Instance->ICR = 0xFFFFFFFF;
 5240              		.loc 2 1169 10 is_stmt 1 discriminator 2
 5241 0048 FB68     		ldr	r3, [r7, #12]
 5242 004a 1B68     		ldr	r3, [r3]
 5243              		.loc 2 1169 26 discriminator 2
 5244 004c 4FF0FF32 		mov	r2, #-1
 5245 0050 1A62     		str	r2, [r3, #32]
1170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 5246              		.loc 2 1170 22 discriminator 2
 5247 0052 FB68     		ldr	r3, [r7, #12]
 5248 0054 0022     		movs	r2, #0
 5249 0056 DA66     		str	r2, [r3, #108]
1171:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 5250              		.loc 2 1171 20 discriminator 2
 5251 0058 FB68     		ldr	r3, [r7, #12]
 5252 005a 2222     		movs	r2, #34
 5253 005c 83F86A20 		strb	r2, [r3, #106]
1172:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1173:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init tickstart for timeout managment*/
1174:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 5254              		.loc 2 1174 17 discriminator 2
 5255 0060 FFF7FEFF 		bl	HAL_GetTick
 5256 0064 F861     		str	r0, [r7, #28]
1175:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1176:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferSize = Size;
 5257              		.loc 2 1176 23 discriminator 2
 5258 0066 FB68     		ldr	r3, [r7, #12]
 5259 0068 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5260 006a A3F85820 		strh	r2, [r3, #88]	@ movhi
1177:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferCount = Size;
 5261              		.loc 2 1177 24 discriminator 2
 5262 006e FB68     		ldr	r3, [r7, #12]
 5263 0070 FA88     		ldrh	r2, [r7, #6]	@ movhi
 5264 0072 A3F85A20 		strh	r2, [r3, #90]	@ movhi
1178:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1179:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Computation of UART mask to apply to RDR register */
1180:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     UART_MASK_COMPUTATION(huart);
 5265              		.loc 2 1180 5 discriminator 2
 5266 0076 FB68     		ldr	r3, [r7, #12]
 5267 0078 9B68     		ldr	r3, [r3, #8]
 5268 007a B3F5805F 		cmp	r3, #4096
 5269 007e 0ED1     		bne	.L343
 5270              		.loc 2 1180 5 is_stmt 0 discriminator 1
 5271 0080 FB68     		ldr	r3, [r7, #12]
 5272 0082 1B69     		ldr	r3, [r3, #16]
 5273 0084 002B     		cmp	r3, #0
 5274 0086 05D1     		bne	.L344
 5275              		.loc 2 1180 5 discriminator 3
 5276 0088 FB68     		ldr	r3, [r7, #12]
 5277 008a 40F2FF12 		movw	r2, #511
 5278 008e A3F85C20 		strh	r2, [r3, #92]	@ movhi
 5279 0092 15E0     		b	.L346
 5280              	.L344:
 5281              		.loc 2 1180 5 discriminator 4
 5282 0094 FB68     		ldr	r3, [r7, #12]
 5283 0096 FF22     		movs	r2, #255
 5284 0098 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 5285 009c 10E0     		b	.L346
 5286              	.L343:
 5287              		.loc 2 1180 5 discriminator 2
 5288 009e FB68     		ldr	r3, [r7, #12]
 5289 00a0 9B68     		ldr	r3, [r3, #8]
 5290 00a2 002B     		cmp	r3, #0
 5291 00a4 0CD1     		bne	.L346
 5292              		.loc 2 1180 5 discriminator 5
 5293 00a6 FB68     		ldr	r3, [r7, #12]
 5294 00a8 1B69     		ldr	r3, [r3, #16]
 5295 00aa 002B     		cmp	r3, #0
 5296 00ac 04D1     		bne	.L347
 5297              		.loc 2 1180 5 discriminator 6
 5298 00ae FB68     		ldr	r3, [r7, #12]
 5299 00b0 FF22     		movs	r2, #255
 5300 00b2 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 5301 00b6 03E0     		b	.L346
 5302              	.L347:
 5303              		.loc 2 1180 5 discriminator 7
 5304 00b8 FB68     		ldr	r3, [r7, #12]
 5305 00ba 7F22     		movs	r2, #127
 5306 00bc A3F85C20 		strh	r2, [r3, #92]	@ movhi
 5307              	.L346:
1181:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     uhMask = huart->Mask;
 5308              		.loc 2 1181 12 is_stmt 1
 5309 00c0 FB68     		ldr	r3, [r7, #12]
 5310 00c2 B3F85C30 		ldrh	r3, [r3, #92]	@ movhi
 5311 00c6 7B83     		strh	r3, [r7, #26]	@ movhi
1182:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1183:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* as long as data have to be received */
1184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     while(huart->RxXferCount > 0U)
 5312              		.loc 2 1184 10
 5313 00c8 3AE0     		b	.L348
 5314              	.L351:
1185:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1186:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       huart->RxXferCount--;
 5315              		.loc 2 1186 12
 5316 00ca FB68     		ldr	r3, [r7, #12]
 5317 00cc B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 5318 00d0 9BB2     		uxth	r3, r3
 5319              		.loc 2 1186 25
 5320 00d2 013B     		subs	r3, r3, #1
 5321 00d4 9AB2     		uxth	r2, r3
 5322 00d6 FB68     		ldr	r3, [r7, #12]
 5323 00d8 A3F85A20 		strh	r2, [r3, #90]	@ movhi
1187:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 5324              		.loc 2 1187 10
 5325 00dc 3B68     		ldr	r3, [r7]
 5326 00de 0093     		str	r3, [sp]
 5327 00e0 FB69     		ldr	r3, [r7, #28]
 5328 00e2 0022     		movs	r2, #0
 5329 00e4 2021     		movs	r1, #32
 5330 00e6 F868     		ldr	r0, [r7, #12]
 5331 00e8 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5332 00ec 0346     		mov	r3, r0
 5333              		.loc 2 1187 9
 5334 00ee 002B     		cmp	r3, #0
 5335 00f0 01D0     		beq	.L349
1188:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1189:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
 5336              		.loc 2 1189 16
 5337 00f2 0323     		movs	r3, #3
 5338 00f4 35E0     		b	.L341
 5339              	.L349:
1190:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1191:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 5340              		.loc 2 1191 23
 5341 00f6 FB68     		ldr	r3, [r7, #12]
 5342 00f8 9B68     		ldr	r3, [r3, #8]
 5343              		.loc 2 1191 10
 5344 00fa B3F5805F 		cmp	r3, #4096
 5345 00fe 12D1     		bne	.L350
 5346              		.loc 2 1191 73 discriminator 1
 5347 0100 FB68     		ldr	r3, [r7, #12]
 5348 0102 1B69     		ldr	r3, [r3, #16]
 5349              		.loc 2 1191 58 discriminator 1
 5350 0104 002B     		cmp	r3, #0
 5351 0106 0ED1     		bne	.L350
1192:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1193:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tmp = (uint16_t*) pData ;
 5352              		.loc 2 1193 13
 5353 0108 BB68     		ldr	r3, [r7, #8]
 5354 010a 7B61     		str	r3, [r7, #20]
1194:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 5355              		.loc 2 1194 32
 5356 010c FB68     		ldr	r3, [r7, #12]
 5357 010e 1B68     		ldr	r3, [r3]
 5358              		.loc 2 1194 42
 5359 0110 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 5360 0112 9AB2     		uxth	r2, r3
 5361              		.loc 2 1194 16
 5362 0114 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 5363 0116 1340     		ands	r3, r3, r2
 5364 0118 9AB2     		uxth	r2, r3
 5365              		.loc 2 1194 14
 5366 011a 7B69     		ldr	r3, [r7, #20]
 5367 011c 1A80     		strh	r2, [r3]	@ movhi
1195:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         pData +=2U;
 5368              		.loc 2 1195 15
 5369 011e BB68     		ldr	r3, [r7, #8]
 5370 0120 0233     		adds	r3, r3, #2
 5371 0122 BB60     		str	r3, [r7, #8]
 5372 0124 0CE0     		b	.L348
 5373              	.L350:
1196:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1197:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
1198:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1199:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 5374              		.loc 2 1199 35
 5375 0126 FB68     		ldr	r3, [r7, #12]
 5376 0128 1B68     		ldr	r3, [r3]
 5377              		.loc 2 1199 45
 5378 012a 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 5379 012c 9BB2     		uxth	r3, r3
 5380              		.loc 2 1199 20
 5381 012e D9B2     		uxtb	r1, r3
 5382              		.loc 2 1199 53
 5383 0130 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 5384 0132 DAB2     		uxtb	r2, r3
 5385              		.loc 2 1199 15
 5386 0134 BB68     		ldr	r3, [r7, #8]
 5387 0136 581C     		adds	r0, r3, #1
 5388 0138 B860     		str	r0, [r7, #8]
 5389              		.loc 2 1199 20
 5390 013a 0A40     		ands	r2, r2, r1
 5391 013c D2B2     		uxtb	r2, r2
 5392              		.loc 2 1199 18
 5393 013e 1A70     		strb	r2, [r3]
 5394              	.L348:
1184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 5395              		.loc 2 1184 16
 5396 0140 FB68     		ldr	r3, [r7, #12]
 5397 0142 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 5398 0146 9BB2     		uxth	r3, r3
1184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 5399              		.loc 2 1184 10
 5400 0148 002B     		cmp	r3, #0
 5401 014a BED1     		bne	.L351
1200:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1201:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1202:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1203:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1204:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_READY;
 5402              		.loc 2 1204 20
 5403 014c FB68     		ldr	r3, [r7, #12]
 5404 014e 2022     		movs	r2, #32
 5405 0150 83F86A20 		strb	r2, [r3, #106]
1205:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1206:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Unlocked */
1207:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
 5406              		.loc 2 1207 5
 5407 0154 FB68     		ldr	r3, [r7, #12]
 5408 0156 0022     		movs	r2, #0
 5409 0158 83F86820 		strb	r2, [r3, #104]
1208:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1209:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_OK;
 5410              		.loc 2 1209 12
 5411 015c 0023     		movs	r3, #0
 5412 015e 00E0     		b	.L341
 5413              	.L338:
1210:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1211:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
1212:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1213:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_BUSY;
 5414              		.loc 2 1213 12
 5415 0160 0223     		movs	r3, #2
 5416              	.L341:
1214:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1215:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 5417              		.loc 2 1215 1
 5418 0162 1846     		mov	r0, r3
 5419 0164 2037     		adds	r7, r7, #32
 5420              	.LCFI97:
 5421              		.cfi_def_cfa_offset 8
 5422 0166 BD46     		mov	sp, r7
 5423              	.LCFI98:
 5424              		.cfi_def_cfa_register 13
 5425              		@ sp needed
 5426 0168 80BD     		pop	{r7, pc}
 5427              		.cfi_endproc
 5428              	.LFE142:
 5430              		.text
 5431              	.Letext0:
 5432              		.file 4 "c:\\users\\char8\\documents\\gnu-mcu-eclipse-arm-none-eabi-gcc-8.2.1-1.7-20190524-0603-wi
 5433              		.file 5 "c:\\users\\char8\\documents\\gnu-mcu-eclipse-arm-none-eabi-gcc-8.2.1-1.7-20190524-0603-wi
 5434              		.file 6 ".././hal/stm32f3/CMSIS/device/stm32f303xc.h"
 5435              		.file 7 ".././hal/stm32f3/CMSIS/device/system_stm32f3xx.h"
 5436              		.file 8 ".././hal/stm32f3/CMSIS/device/stm32f3xx.h"
 5437              		.file 9 "c:\\users\\char8\\documents\\gnu-mcu-eclipse-arm-none-eabi-gcc-8.2.1-1.7-20190524-0603-wi
 5438              		.file 10 "c:\\users\\char8\\documents\\gnu-mcu-eclipse-arm-none-eabi-gcc-8.2.1-1.7-20190524-0603-w
 5439              		.file 11 "c:\\users\\char8\\documents\\gnu-mcu-eclipse-arm-none-eabi-gcc-8.2.1-1.7-20190524-0603-w
 5440              		.file 12 "c:\\users\\char8\\documents\\gnu-mcu-eclipse-arm-none-eabi-gcc-8.2.1-1.7-20190524-0603-w
 5441              		.file 13 ".././hal/stm32f3/stm32f3xx_hal_def.h"
 5442              		.file 14 ".././hal/stm32f3/stm32f3xx_hal_rcc.h"
 5443              		.file 15 ".././hal/stm32f3/stm32f3xx_hal_gpio.h"
 5444              		.file 16 ".././hal/stm32f3/stm32f3xx_hal_dma.h"
 5445              		.file 17 ".././hal/stm32f3/stm32f3xx_hal_uart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3_hal_lowlevel.c
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:18     .text.NVIC_GetPriorityGrouping:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:25     .text.NVIC_GetPriorityGrouping:0000000000000000 NVIC_GetPriorityGrouping
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:60     .text.NVIC_GetPriorityGrouping:0000000000000018 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:65     .text.NVIC_SetPriority:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:71     .text.NVIC_SetPriority:0000000000000000 NVIC_SetPriority
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:145    .text.NVIC_SetPriority:000000000000004c $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:151    .text.NVIC_EncodePriority:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:157    .text.NVIC_EncodePriority:0000000000000000 NVIC_EncodePriority
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:246    .bss:0000000000000000 hal_sys_tick
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:243    .bss:0000000000000000 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:252    .bss:0000000000000004 uwTick
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:259    .data:0000000000000000 SystemCoreClock
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:256    .data:0000000000000000 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:262    .text.HAL_NVIC_SetPriority:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:269    .text.HAL_NVIC_SetPriority:0000000000000000 HAL_NVIC_SetPriority
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:321    .text.HAL_InitTick:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:328    .text.HAL_InitTick:0000000000000000 HAL_InitTick
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:369    .text.HAL_InitTick:000000000000001c $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:374    .text.HAL_GetTick:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:381    .text.HAL_GetTick:0000000000000000 HAL_GetTick
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:415    .text.HAL_GetTick:0000000000000018 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:420    .text.HAL_IncTick:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:427    .text.HAL_IncTick:0000000000000000 HAL_IncTick
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:456    .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:463    .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:494    .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:501    .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:532    .text.HAL_RCC_OscConfig:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:539    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:1011   .text.HAL_RCC_OscConfig:00000000000002f8 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:1014   .text.HAL_RCC_OscConfig:00000000000002fc $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:1564   .text.HAL_RCC_OscConfig:0000000000000650 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:1567   .text.HAL_RCC_OscConfig:0000000000000658 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:2016   .text.HAL_RCC_OscConfig:000000000000092c $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:2020   .text.HAL_RCC_OscConfig:0000000000000938 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:2495   .text.HAL_RCC_OscConfig:0000000000000c40 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:2497   .text.HAL_RCC_OscConfig:0000000000000c44 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:2750   .text.HAL_RCC_OscConfig:0000000000000dd0 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:2755   .text.HAL_RCC_ClockConfig:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:2762   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3276   .text.HAL_RCC_ClockConfig:00000000000002ac $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3280   .text.HAL_RCC_ClockConfig:00000000000002b4 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3332   .text.HAL_RCC_ClockConfig:00000000000002fc $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3337   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3344   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3374   .text.HAL_RCC_GetPCLK2Freq:0000000000000010 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3379   .text.HAL_GPIO_Init:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3386   .text.HAL_GPIO_Init:0000000000000000 HAL_GPIO_Init
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3911   .text.HAL_GPIO_Init:00000000000002e0 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3922   .text.HAL_GPIO_WritePin:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3929   .text.HAL_GPIO_WritePin:0000000000000000 HAL_GPIO_WritePin
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3987   .text.UART_SetConfig:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:3994   .text.UART_SetConfig:0000000000000000 UART_SetConfig
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4103   .text.UART_SetConfig:00000000000000a0 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4107   .text.UART_SetConfig:00000000000000b0 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4357   .text.UART_SetConfig:0000000000000234 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4366   .text.UART_SetConfig:0000000000000258 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4480   .text.UART_SetConfig:0000000000000314 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4489   .text.UART_SetConfig:0000000000000338 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4513   .text.UART_SetConfig:0000000000000358 $d
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4521   .text.UART_SetConfig:0000000000000370 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4619   .text.UART_CheckIdleState:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4626   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4853   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4735   .text.HAL_UART_Init:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4742   .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4846   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4965   .text.HAL_UART_Transmit:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:4972   .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:5175   .text.HAL_UART_Receive:0000000000000000 $t
C:\Users\char8\AppData\Local\Temp\cczQRn1s.s:5182   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
                           .group:0000000000000000 wm4.0.4f4e2297610e043bdda5b1ed482d7fb1
                           .group:0000000000000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:0000000000000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stm32f3_hal.h.21.46f47e43e35a9e9cfc7f15dfdf04a919
                           .group:0000000000000000 wm4.stm32f3_hal_lowlevel.h.39.a6f46f44567a00836cb5979da34be937
                           .group:0000000000000000 wm4.stm32f3xx.h.57.32e3ce9a5215e97db639d596319edad0
                           .group:0000000000000000 wm4.stm32f303xc.h.53.b114a456ce5f54880070ceb840aa71ce
                           .group:0000000000000000 wm4.core_cm4.h.42.42f38327ee0970d80f60117e6a3ba2b0
                           .group:0000000000000000 wm4.cmsis_gcc.h.36.39970cb43ce4b53c82644a1f9bc2eab9
                           .group:0000000000000000 wm4.core_cm4.h.223.390ff9b0e06949b13520d8b6746f63e8
                           .group:0000000000000000 wm4.stm32f303xc.h.712.da5eb2044d7021b23c0133ead5b40148
                           .group:0000000000000000 wm4.stm32f3xx.h.193.090ea54589f6b52d952fe7881f32e4e8
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.41.a9459936478ffce237bb0355c366536c
                           .group:0000000000000000 wm4.newlib.h.8.2aecb9f3b2dc9d2e83d06d10f0c6ed3e
                           .group:0000000000000000 wm4.ieeefp.h.77.d5685ba212d3ed6e914898d045f873e3
                           .group:0000000000000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:0000000000000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:0000000000000000 wm4.stddef.h.39.a231a87e043a95babfd62cebe88e50f8
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:0000000000000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:0000000000000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:0000000000000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:0000000000000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:0000000000000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:0000000000000000 wm4.stm32f3xx_hal_def.h.75.656d1f7cd93f1e7a16ec1d4762ba8da0
                           .group:0000000000000000 wm4.stm32f3xx_hal_rcc.h.66.9a98e4880dda185970e1ba01d766e875
                           .group:0000000000000000 wm4.stm32f3xx_hal_rcc_ex.h.40.e8538ff11aa1d49a8d253fcf9f38f9c5
                           .group:0000000000000000 wm4.stm32f3xx_hal_gpio.h.40.3f94abd0521b513956c0d64091392471
                           .group:0000000000000000 wm4.stm32f3xx_hal_gpio_ex.h.40.37db2dc33a814d445179744af089ced6
                           .group:0000000000000000 wm4.stm32f3xx_hal_dma.h.40.d11b90e7439e7b10ed17267b282ffc93
                           .group:0000000000000000 wm4.stm32f3xx_hal_dma_ex.h.40.dbbdaeaaaf2071f9d298ddd8584a74c2
                           .group:0000000000000000 wm4.stm32f3xx_hal_dma.h.425.193b823b7d05a068cc2db35946b94307
                           .group:0000000000000000 wm4.stm32f3xx_hal_uart.h.40.2f270e52bb65f31c33954479efc998fa
                           .group:0000000000000000 wm4.stm32f3xx_hal_uart_ex.h.40.4ff96af662beadf724dce494cf493164
                           .group:0000000000000000 wm4.stm32f3xx_hal_flash.h.40.580d712480847fd656a0a16ed2873f5d
                           .group:0000000000000000 wm4.stm32f3xx_hal_flash_ex.h.40.cb3073de3dca46b8d8e53a4eefe6f79e
                           .group:0000000000000000 wm4.stm32f3xx_hal_cortex.h.38.c5c1d06be9dad8e7837dbe16f3535233

NO UNDEFINED SYMBOLS
